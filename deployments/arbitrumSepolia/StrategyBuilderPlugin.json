{
  "address": "0xDA71d1304221b5Ac3257dC0510B556B5346Ba6E4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeHandler",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AutomationAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "condition",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "AutomationNotExecutable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AutomationNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ChangeStrategyInConditionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeeExceedMaxFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAction",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NotContractCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "uint8",
          "name": "functionId",
          "type": "uint8"
        }
      ],
      "name": "NotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentTokenNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyIsInUse",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "condition",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "UpdateConditionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "changeAutomationInConditionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "parameter",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategyBuilderPlugin.ActionType",
              "name": "actionType",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyBuilderPlugin.Action",
          "name": "action",
          "type": "tuple"
        }
      ],
      "name": "ActionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "automationId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "strategyId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "conditionAddress",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "id",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "result1",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "result0",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyBuilderPlugin.Condition",
          "name": "condition",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "AutomationCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "automationId",
          "type": "uint32"
        }
      ],
      "name": "AutomationDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "automationId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeInToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeInUSD",
          "type": "uint256"
        }
      ],
      "name": "AutomationExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "strategyId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "conditionAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint32",
                      "name": "id",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint8",
                      "name": "result1",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "result0",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IStrategyBuilderPlugin.Condition",
                  "name": "condition",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "selector",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "parameter",
                      "type": "bytes"
                    },
                    {
                      "internalType": "address",
                      "name": "target",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum IStrategyBuilderPlugin.ActionType",
                      "name": "actionType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IStrategyBuilderPlugin.Action[]",
                  "name": "actions",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IStrategyBuilderPlugin.StrategyStep[]",
              "name": "steps",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyBuilderPlugin.Strategy",
          "name": "strategy",
          "type": "tuple"
        }
      ],
      "name": "StrategyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "strategyId",
          "type": "uint32"
        }
      ],
      "name": "StrategyDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "strategyId",
          "type": "uint32"
        }
      ],
      "name": "StrategyExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "strategyId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "stepId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "parameter",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "enum IStrategyBuilderPlugin.ActionType",
              "name": "actionType",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IStrategyBuilderPlugin.Action[]",
          "name": "actions",
          "type": "tuple[]"
        }
      ],
      "name": "StrategyStepExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTHOR",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "automation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "conditionAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "result1",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "result0",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IStrategyBuilderPlugin.Condition",
              "name": "condition",
              "type": "tuple"
            },
            {
              "internalType": "uint32",
              "name": "strategyId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxFeeAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStrategyBuilderPlugin.Automation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "strategyId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxFeeInUSD",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "conditionAddress",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "id",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "result1",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "result0",
              "type": "uint8"
            }
          ],
          "internalType": "struct IStrategyBuilderPlugin.Condition",
          "name": "condition",
          "type": "tuple"
        }
      ],
      "name": "createAutomation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "conditionAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "id",
                  "type": "uint32"
                },
                {
                  "internalType": "uint8",
                  "name": "result1",
                  "type": "uint8"
                },
                {
                  "internalType": "uint8",
                  "name": "result0",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IStrategyBuilderPlugin.Condition",
              "name": "condition",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "selector",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "parameter",
                  "type": "bytes"
                },
                {
                  "internalType": "address",
                  "name": "target",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "enum IStrategyBuilderPlugin.ActionType",
                  "name": "actionType",
                  "type": "uint8"
                }
              ],
              "internalType": "struct IStrategyBuilderPlugin.Action[]",
              "name": "actions",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrategyBuilderPlugin.StrategyStep[]",
          "name": "steps",
          "type": "tuple[]"
        }
      ],
      "name": "createStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "deleteAutomation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "deleteStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficary",
          "type": "address"
        }
      ],
      "name": "executeAutomation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "executeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeController",
      "outputs": [
        {
          "internalType": "contract IFeeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeHandler",
      "outputs": [
        {
          "internalType": "contract IFeeHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "getStorageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onInstall",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onUninstall",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pluginManifest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes4[]",
              "name": "interfaceIds",
              "type": "bytes4[]"
            },
            {
              "internalType": "bytes4[]",
              "name": "dependencyInterfaceIds",
              "type": "bytes4[]"
            },
            {
              "internalType": "bytes4[]",
              "name": "executionFunctions",
              "type": "bytes4[]"
            },
            {
              "internalType": "bytes4[]",
              "name": "permittedExecutionSelectors",
              "type": "bytes4[]"
            },
            {
              "internalType": "bool",
              "name": "permitAnyExternalAddress",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canSpendNativeToken",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "externalAddress",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "permitAnySelector",
                  "type": "bool"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "selectors",
                  "type": "bytes4[]"
                }
              ],
              "internalType": "struct ManifestExternalCallPermission[]",
              "name": "permittedExternalCalls",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "executionSelector",
                  "type": "bytes4"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ManifestAssociatedFunctionType",
                      "name": "functionType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "functionId",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "dependencyIndex",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ManifestFunction",
                  "name": "associatedFunction",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ManifestAssociatedFunction[]",
              "name": "userOpValidationFunctions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "executionSelector",
                  "type": "bytes4"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ManifestAssociatedFunctionType",
                      "name": "functionType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "functionId",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "dependencyIndex",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ManifestFunction",
                  "name": "associatedFunction",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ManifestAssociatedFunction[]",
              "name": "runtimeValidationFunctions",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "executionSelector",
                  "type": "bytes4"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ManifestAssociatedFunctionType",
                      "name": "functionType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "functionId",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "dependencyIndex",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ManifestFunction",
                  "name": "associatedFunction",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ManifestAssociatedFunction[]",
              "name": "preUserOpValidationHooks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "executionSelector",
                  "type": "bytes4"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ManifestAssociatedFunctionType",
                      "name": "functionType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "functionId",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "dependencyIndex",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ManifestFunction",
                  "name": "associatedFunction",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ManifestAssociatedFunction[]",
              "name": "preRuntimeValidationHooks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "executionSelector",
                  "type": "bytes4"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ManifestAssociatedFunctionType",
                      "name": "functionType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "functionId",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "dependencyIndex",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ManifestFunction",
                  "name": "preExecHook",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ManifestAssociatedFunctionType",
                      "name": "functionType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "functionId",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "dependencyIndex",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct ManifestFunction",
                  "name": "postExecHook",
                  "type": "tuple"
                }
              ],
              "internalType": "struct ManifestExecutionHook[]",
              "name": "executionHooks",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PluginManifest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pluginMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "author",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "functionSelector",
                  "type": "bytes4"
                },
                {
                  "internalType": "string",
                  "name": "permissionDescription",
                  "type": "string"
                }
              ],
              "internalType": "struct SelectorPermission[]",
              "name": "permissionDescriptors",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct PluginMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionId",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "preExecHookData",
          "type": "bytes"
        }
      ],
      "name": "postExecutionHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "preExecutionHook",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "preRuntimeValidationHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionId",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        }
      ],
      "name": "preUserOpValidationHook",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "runtimeValidationFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "strategy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "conditionAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint32",
                      "name": "id",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint8",
                      "name": "result1",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "result0",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IStrategyBuilderPlugin.Condition",
                  "name": "condition",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "selector",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "parameter",
                      "type": "bytes"
                    },
                    {
                      "internalType": "address",
                      "name": "target",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum IStrategyBuilderPlugin.ActionType",
                      "name": "actionType",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IStrategyBuilderPlugin.Action[]",
                  "name": "actions",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IStrategyBuilderPlugin.StrategyStep[]",
              "name": "steps",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IStrategyBuilderPlugin.Strategy",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "functionId",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        }
      ],
      "name": "userOpValidationFunction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa14f3651983a250118629bb5ee116fa9fad2539cb6f734df3991d8454ff00ef8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x36375828fd821935cFf3E8AB6322cAb54BBfaDeC",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "6556452",
    "logsBloom": "0x
    "blockHash": "0x25802d4b0db7df17aabdf4c906139c6a875c4e1929551ddb5104ebe694cf11dd",
    "transactionHash": "0xa14f3651983a250118629bb5ee116fa9fad2539cb6f734df3991d8454ff00ef8",
    "logs": [],
    "blockNumber": 129554294,
    "cumulativeGasUsed": "6556452",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x63D11999a31A5903D4025818534B5903c46CFB12",
    "0x4a8Da20ee44677b41210b4851a799BfF3aB7d9E9"
  ],
  "numDeployments": 2,
  "solcInputHash": "4b77b1615366c5fedbc67911183a0195",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeHandler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AutomationAlreadyExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"AutomationNotExecutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AutomationNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChangeStrategyInConditionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedMaxFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAction\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotContractCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"}],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentTokenNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsInUse\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"UpdateConditionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"changeAutomationInConditionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameter\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategyBuilderPlugin.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IStrategyBuilderPlugin.Action\",\"name\":\"action\",\"type\":\"tuple\"}],\"name\":\"ActionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"automationId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"strategyId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"conditionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"result1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"result0\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IStrategyBuilderPlugin.Condition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFeeAmount\",\"type\":\"uint256\"}],\"name\":\"AutomationCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"automationId\",\"type\":\"uint32\"}],\"name\":\"AutomationDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"automationId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeInUSD\",\"type\":\"uint256\"}],\"name\":\"AutomationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"strategyId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"conditionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"result1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"result0\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Condition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameter\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategyBuilderPlugin.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyBuilderPlugin.StrategyStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IStrategyBuilderPlugin.Strategy\",\"name\":\"strategy\",\"type\":\"tuple\"}],\"name\":\"StrategyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"strategyId\",\"type\":\"uint32\"}],\"name\":\"StrategyDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"strategyId\",\"type\":\"uint32\"}],\"name\":\"StrategyExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"strategyId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"stepId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameter\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategyBuilderPlugin.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IStrategyBuilderPlugin.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"name\":\"StrategyStepExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTHOR\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"automation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"conditionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"result1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"result0\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Condition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"strategyId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Automation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"strategyId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeeInUSD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"conditionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"result1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"result0\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Condition\",\"name\":\"condition\",\"type\":\"tuple\"}],\"name\":\"createAutomation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"conditionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"result1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"result0\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Condition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameter\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategyBuilderPlugin.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyBuilderPlugin.StrategyStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"name\":\"createStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"deleteAutomation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"deleteStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"}],\"name\":\"executeAutomation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"executeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeController\",\"outputs\":[{\"internalType\":\"contract IFeeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeHandler\",\"outputs\":[{\"internalType\":\"contract IFeeHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"getStorageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onInstall\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onUninstall\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginManifest\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"dependencyInterfaceIds\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"executionFunctions\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"permittedExecutionSelectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool\",\"name\":\"permitAnyExternalAddress\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canSpendNativeToken\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"externalAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permitAnySelector\",\"type\":\"bool\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct ManifestExternalCallPermission[]\",\"name\":\"permittedExternalCalls\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"executionSelector\",\"type\":\"bytes4\"},{\"components\":[{\"internalType\":\"enum ManifestAssociatedFunctionType\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dependencyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ManifestFunction\",\"name\":\"associatedFunction\",\"type\":\"tuple\"}],\"internalType\":\"struct ManifestAssociatedFunction[]\",\"name\":\"userOpValidationFunctions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"executionSelector\",\"type\":\"bytes4\"},{\"components\":[{\"internalType\":\"enum ManifestAssociatedFunctionType\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dependencyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ManifestFunction\",\"name\":\"associatedFunction\",\"type\":\"tuple\"}],\"internalType\":\"struct ManifestAssociatedFunction[]\",\"name\":\"runtimeValidationFunctions\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"executionSelector\",\"type\":\"bytes4\"},{\"components\":[{\"internalType\":\"enum ManifestAssociatedFunctionType\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dependencyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ManifestFunction\",\"name\":\"associatedFunction\",\"type\":\"tuple\"}],\"internalType\":\"struct ManifestAssociatedFunction[]\",\"name\":\"preUserOpValidationHooks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"executionSelector\",\"type\":\"bytes4\"},{\"components\":[{\"internalType\":\"enum ManifestAssociatedFunctionType\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dependencyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ManifestFunction\",\"name\":\"associatedFunction\",\"type\":\"tuple\"}],\"internalType\":\"struct ManifestAssociatedFunction[]\",\"name\":\"preRuntimeValidationHooks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"executionSelector\",\"type\":\"bytes4\"},{\"components\":[{\"internalType\":\"enum ManifestAssociatedFunctionType\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dependencyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ManifestFunction\",\"name\":\"preExecHook\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ManifestAssociatedFunctionType\",\"name\":\"functionType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"dependencyIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ManifestFunction\",\"name\":\"postExecHook\",\"type\":\"tuple\"}],\"internalType\":\"struct ManifestExecutionHook[]\",\"name\":\"executionHooks\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PluginManifest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"permissionDescription\",\"type\":\"string\"}],\"internalType\":\"struct SelectorPermission[]\",\"name\":\"permissionDescriptors\",\"type\":\"tuple[]\"}],\"internalType\":\"struct PluginMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"preExecHookData\",\"type\":\"bytes\"}],\"name\":\"postExecutionHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"preExecutionHook\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"preRuntimeValidationHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"}],\"name\":\"preUserOpValidationHook\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"runtimeValidationFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"strategy\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"conditionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"result1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"result0\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Condition\",\"name\":\"condition\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"parameter\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum IStrategyBuilderPlugin.ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyBuilderPlugin.StrategyStep[]\",\"name\":\"steps\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IStrategyBuilderPlugin.Strategy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"functionId\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"}],\"name\":\"userOpValidationFunction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onInstall(bytes)\":{\"details\":\"Called by the modular account during `installPlugin`.\",\"params\":{\"data\":\"Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the modular account.\"}},\"onUninstall(bytes)\":{\"details\":\"Called by the modular account during `uninstallPlugin`.\",\"params\":{\"data\":\"Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular account.\"}},\"pluginManifest()\":{\"details\":\"This manifest MUST stay constant over time.\",\"returns\":{\"_0\":\"A manifest describing the contents and intended configuration of the plugin.\"}},\"pluginMetadata()\":{\"details\":\"This metadata MUST stay constant over time.\",\"returns\":{\"_0\":\"A metadata struct describing the plugin.\"}},\"postExecutionHook(uint8,bytes)\":{\"details\":\"To indicate the entire call should revert, the function MUST revert.\",\"params\":{\"functionId\":\"An identifier that routes the call to different internal implementations, should there be more than one.\",\"preExecHookData\":\"The context returned by its associated pre execution hook.\"}},\"preExecutionHook(uint8,address,uint256,bytes)\":{\"details\":\"To indicate the entire call should revert, the function MUST revert.\",\"params\":{\"data\":\"The calldata sent.\",\"functionId\":\"An identifier that routes the call to different internal implementations, should there be more than one.\",\"sender\":\"The caller address.\",\"value\":\"The call value.\"},\"returns\":{\"_0\":\"Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\"}},\"preRuntimeValidationHook(uint8,address,uint256,bytes)\":{\"details\":\"To indicate the entire call should revert, the function MUST revert.\",\"params\":{\"data\":\"The calldata sent.\",\"functionId\":\"An identifier that routes the call to different internal implementations, should there be more than one.\",\"sender\":\"The caller address.\",\"value\":\"The call value.\"}},\"preUserOpValidationHook(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)\":{\"details\":\"Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\",\"params\":{\"functionId\":\"An identifier that routes the call to different internal implementations, should there be more than one.\",\"userOp\":\"The user operation.\",\"userOpHash\":\"The user operation hash.\"},\"returns\":{\"_0\":\"Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\"}},\"runtimeValidationFunction(uint8,address,uint256,bytes)\":{\"details\":\"To indicate the entire call should revert, the function MUST revert.\",\"params\":{\"data\":\"The calldata sent.\",\"functionId\":\"An identifier that routes the call to different internal implementations, should there be more than one.\",\"sender\":\"The caller address.\",\"value\":\"The call value.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas. Supporting the IPlugin interface is a requirement for plugin installation. This is also used by the modular account to prevent standard execution functions `execute`, `executeBatch`, and `executeFromPluginExternal` from making calls to plugins.\",\"params\":{\"interfaceId\":\"The interface ID to check for support.\"},\"returns\":{\"_0\":\"True if the contract supports `interfaceId`.\"}},\"userOpValidationFunction(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)\":{\"params\":{\"functionId\":\"An identifier that routes the call to different internal implementations, should there be more than one.\",\"userOp\":\"The user operation.\",\"userOpHash\":\"The user operation hash.\"},\"returns\":{\"_0\":\"Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onInstall(bytes)\":{\"notice\":\"Initialize plugin data for the modular account.\"},\"onUninstall(bytes)\":{\"notice\":\"Clear plugin data for the modular account.\"},\"pluginManifest()\":{\"notice\":\"Describe the contents and intended configuration of the plugin.\"},\"pluginMetadata()\":{\"notice\":\"Describe the metadata of the plugin.\"},\"postExecutionHook(uint8,bytes)\":{\"notice\":\"Run the post execution hook specified by the `functionId`.\"},\"preExecutionHook(uint8,address,uint256,bytes)\":{\"notice\":\"Run the pre execution hook specified by the `functionId`.\"},\"preRuntimeValidationHook(uint8,address,uint256,bytes)\":{\"notice\":\"Run the pre runtime validation hook specified by the `functionId`.\"},\"preUserOpValidationHook(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)\":{\"notice\":\"Run the pre user operation validation hook specified by the `functionId`.\"},\"runtimeValidationFunction(uint8,address,uint256,bytes)\":{\"notice\":\"Run the runtime validationFunction specified by the `functionId`.\"},\"userOpValidationFunction(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)\":{\"notice\":\"Run the user operation validationFunction specified by the `functionId`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/StrategyBuilderPlugin.sol\":\"StrategyBuilderPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"modular-account-libs/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n// Ported from @openzeppelin/contracts@v5.0.2\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc94ab7be7d85d340decc4b2b0468f56c5565a74f1eb9ea3b90453a07845cb516\",\"license\":\"MIT\"},\"modular-account-libs/interfaces/IPlugin.sol\":{\"content\":\"// This work is marked with CC0 1.0 Universal.\\n//\\n// SPDX-License-Identifier: CC0-1.0\\n//\\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\\n\\npragma solidity ^0.8.20;\\n\\nimport {UserOperation} from \\\"./UserOperation.sol\\\";\\n\\nenum ManifestAssociatedFunctionType {\\n    // Function is not defined.\\n    NONE,\\n    // Function belongs to this plugin.\\n    SELF,\\n    // Function belongs to an external plugin provided as a dependency during plugin installation. Plugins MAY depend\\n    // on external validation functions. It MUST NOT depend on external hooks, or installation will fail.\\n    DEPENDENCY,\\n    // Resolves to a magic value to always bypass runtime validation for a given function.\\n    // This is only assignable on runtime validation functions. If it were to be used on a user op validation function,\\n    // it would risk burning gas from the account. When used as a hook in any hook location, it is equivalent to not\\n    // setting a hook and is therefore disallowed.\\n    RUNTIME_VALIDATION_ALWAYS_ALLOW,\\n    // Resolves to a magic value to always fail in a hook for a given function.\\n    // This is only assignable to pre hooks (pre validation and pre execution). It should not be used on\\n    // validation functions themselves, because this is equivalent to leaving the validation functions unset.\\n    // It should not be used in post-exec hooks, because if it is known to always revert, that should happen\\n    // as early as possible to save gas.\\n    PRE_HOOK_ALWAYS_DENY\\n}\\n\\n/// @dev For functions of type `ManifestAssociatedFunctionType.DEPENDENCY`, the MSCA MUST find the plugin address\\n/// of the function at `dependencies[dependencyIndex]` during the call to `installPlugin(config)`.\\nstruct ManifestFunction {\\n    ManifestAssociatedFunctionType functionType;\\n    uint8 functionId;\\n    uint256 dependencyIndex;\\n}\\n\\nstruct ManifestAssociatedFunction {\\n    bytes4 executionSelector;\\n    ManifestFunction associatedFunction;\\n}\\n\\nstruct ManifestExecutionHook {\\n    bytes4 executionSelector;\\n    ManifestFunction preExecHook;\\n    ManifestFunction postExecHook;\\n}\\n\\nstruct ManifestExternalCallPermission {\\n    address externalAddress;\\n    bool permitAnySelector;\\n    bytes4[] selectors;\\n}\\n\\nstruct SelectorPermission {\\n    bytes4 functionSelector;\\n    string permissionDescription;\\n}\\n\\n/// @dev A struct holding fields to describe the plugin in a purely view context. Intended for front end clients.\\nstruct PluginMetadata {\\n    // A human-readable name of the plugin.\\n    string name;\\n    // The version of the plugin, following the semantic versioning scheme.\\n    string version;\\n    // The author field SHOULD be a username representing the identity of the user or organization\\n    // that created this plugin.\\n    string author;\\n    // String descriptions of the relative sensitivity of specific functions. The selectors MUST be selectors for\\n    // functions implemented by this plugin.\\n    SelectorPermission[] permissionDescriptors;\\n}\\n\\n/// @dev A struct describing how the plugin should be installed on a modular account.\\nstruct PluginManifest {\\n    // List of ERC-165 interface IDs to add to account to support introspection checks. This MUST NOT include\\n    // IPlugin's interface ID.\\n    bytes4[] interfaceIds;\\n    // If this plugin depends on other plugins' validation functions, the interface IDs of those plugins MUST be\\n    // provided here, with its position in the array matching the `dependencyIndex` members of `ManifestFunction`\\n    // structs used in the manifest.\\n    bytes4[] dependencyInterfaceIds;\\n    // Execution functions defined in this plugin to be installed on the MSCA.\\n    bytes4[] executionFunctions;\\n    // Plugin execution functions already installed on the MSCA that this plugin will be able to call.\\n    bytes4[] permittedExecutionSelectors;\\n    // Boolean to indicate whether the plugin can call any external address.\\n    bool permitAnyExternalAddress;\\n    // Boolean to indicate whether the plugin needs access to spend native tokens of the account. If false, the\\n    // plugin MUST still be able to spend up to the balance that it sends to the account in the same call.\\n    bool canSpendNativeToken;\\n    ManifestExternalCallPermission[] permittedExternalCalls;\\n    ManifestAssociatedFunction[] userOpValidationFunctions;\\n    ManifestAssociatedFunction[] runtimeValidationFunctions;\\n    ManifestAssociatedFunction[] preUserOpValidationHooks;\\n    ManifestAssociatedFunction[] preRuntimeValidationHooks;\\n    ManifestExecutionHook[] executionHooks;\\n}\\n\\n/// @title Plugin Interface\\ninterface IPlugin {\\n    /// @notice Initialize plugin data for the modular account.\\n    /// @dev Called by the modular account during `installPlugin`.\\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\\n    /// modular account.\\n    function onInstall(bytes calldata data) external;\\n\\n    /// @notice Clear plugin data for the modular account.\\n    /// @dev Called by the modular account during `uninstallPlugin`.\\n    /// @param data Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular\\n    /// account.\\n    function onUninstall(bytes calldata data) external;\\n\\n    /// @notice Run the pre user operation validation hook specified by the `functionId`.\\n    /// @dev Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param userOp The user operation.\\n    /// @param userOpHash The user operation hash.\\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\\n    function preUserOpValidationHook(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Run the user operation validationFunction specified by the `functionId`.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param userOp The user operation.\\n    /// @param userOpHash The user operation hash.\\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\\n    function userOpValidationFunction(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Run the pre runtime validation hook specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param sender The caller address.\\n    /// @param value The call value.\\n    /// @param data The calldata sent.\\n    function preRuntimeValidationHook(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Run the runtime validationFunction specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param sender The caller address.\\n    /// @param value The call value.\\n    /// @param data The calldata sent.\\n    function runtimeValidationFunction(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Run the pre execution hook specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param sender The caller address.\\n    /// @param value The call value.\\n    /// @param data The calldata sent.\\n    /// @return Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\\n    function preExecutionHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\\n        external\\n        returns (bytes memory);\\n\\n    /// @notice Run the post execution hook specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param preExecHookData The context returned by its associated pre execution hook.\\n    function postExecutionHook(uint8 functionId, bytes calldata preExecHookData) external;\\n\\n    /// @notice Describe the contents and intended configuration of the plugin.\\n    /// @dev This manifest MUST stay constant over time.\\n    /// @return A manifest describing the contents and intended configuration of the plugin.\\n    function pluginManifest() external pure returns (PluginManifest memory);\\n\\n    /// @notice Describe the metadata of the plugin.\\n    /// @dev This metadata MUST stay constant over time.\\n    /// @return A metadata struct describing the plugin.\\n    function pluginMetadata() external pure returns (PluginMetadata memory);\\n}\\n\",\"keccak256\":\"0x0cd575082bf955179a100f2679bc2fd561a8cd510a2fdb86d9edd822134787e2\",\"license\":\"CC0-1.0\"},\"modular-account-libs/interfaces/IPluginExecutor.sol\":{\"content\":\"// This work is marked with CC0 1.0 Universal.\\n//\\n// SPDX-License-Identifier: CC0-1.0\\n//\\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\\n\\npragma solidity ^0.8.20;\\n\\n/// @title Plugin Executor Interface\\ninterface IPluginExecutor {\\n    /// @notice Execute a call from a plugin through the account.\\n    /// @dev Permissions must be granted to the calling plugin for the call to go through.\\n    /// @param data The calldata to send to the account.\\n    /// @return The return data from the call.\\n    function executeFromPlugin(bytes calldata data) external payable returns (bytes memory);\\n\\n    /// @notice Execute a call from a plugin to a non-plugin address.\\n    /// @dev If the target is a plugin, the call SHOULD revert. Permissions must be granted to the calling plugin\\n    /// for the call to go through.\\n    /// @param target The address to be called.\\n    /// @param value The value to send with the call.\\n    /// @param data The calldata to send to the target.\\n    /// @return The return data from the call.\\n    function executeFromPluginExternal(address target, uint256 value, bytes calldata data)\\n        external\\n        payable\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xbf877cc7a5b91ec14ba13be9284de8473c08d93116b291d521845fa684a9fb42\",\"license\":\"CC0-1.0\"},\"modular-account-libs/interfaces/UserOperation.sol\":{\"content\":\"// This work is marked with CC0 1.0 Universal.\\n//\\n// SPDX-License-Identifier: CC0-1.0\\n//\\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\\n\\npragma solidity ^0.8.20;\\n\\n/// @notice User Operation struct as defined in ERC-4337 v0.6\\nstruct UserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    uint256 callGasLimit;\\n    uint256 verificationGasLimit;\\n    uint256 preVerificationGas;\\n    uint256 maxFeePerGas;\\n    uint256 maxPriorityFeePerGas;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\",\"keccak256\":\"0x5cf69718643d134b3e02b011de07788a37da9211f2469e332b9f34e5318ec3c3\",\"license\":\"CC0-1.0\"},\"modular-account-libs/plugins/BasePlugin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// See LICENSE-MIT file for more information\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC165} from \\\"./ERC165.sol\\\";\\n\\nimport {UserOperation} from \\\"../interfaces/UserOperation.sol\\\";\\nimport {IPlugin, PluginManifest, PluginMetadata} from \\\"../interfaces/IPlugin.sol\\\";\\n\\n/// @title Base contract for plugins\\n/// @dev Implements ERC-165 to support IPlugin's interface, which is a requirement\\n/// for plugin installation. This also ensures that plugin interactions cannot\\n/// happen via the standard execution funtions `execute`, `executeBatch`, and `executeFromPluginExternal`.\\n/// Note that the plugins implementing BasePlugin cannot be installed within the account constructor. unless\\n/// `onInstall` is overriden to not check the codesize of caller. The codesize check is done to prevent an EOA\\n/// from accidentally calling the plugin and initiating state, which will make it unusable in the future when EOAs\\n/// can be upgraded to smart contract accounts.\\nabstract contract BasePlugin is ERC165, IPlugin {\\n    error AlreadyInitialized();\\n    error InvalidAction();\\n    error NotContractCaller(address caller);\\n    error NotImplemented(bytes4 selector, uint8 functionId);\\n    error NotInitialized();\\n\\n    modifier isNotInitialized(address account) {\\n        if (_isInitialized(account)) {\\n            revert AlreadyInitialized();\\n        }\\n        _;\\n    }\\n\\n    modifier isInitialized(address account) {\\n        if (!_isInitialized(account)) {\\n            revert NotInitialized();\\n        }\\n        _;\\n    }\\n\\n    modifier staysInitialized(address account) {\\n        if (!_isInitialized(account)) {\\n            revert NotInitialized();\\n        }\\n        _;\\n        if (!_isInitialized(account)) {\\n            revert InvalidAction();\\n        }\\n    }\\n\\n    /// @notice Initialize plugin data for the modular account.\\n    /// @dev Called by the modular account during `installPlugin`.\\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\\n    /// modular account.\\n    function onInstall(bytes calldata data) external virtual {\\n        if (msg.sender.code.length == 0) {\\n            revert NotContractCaller(msg.sender);\\n        }\\n        _onInstall(data);\\n    }\\n\\n    /// @notice Clear plugin data for the modular account.\\n    /// @dev Called by the modular account during `uninstallPlugin`.\\n    /// @param data Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular\\n    /// account.\\n    function onUninstall(bytes calldata data) external virtual {\\n        (data);\\n        revert NotImplemented(msg.sig, 0);\\n    }\\n\\n    /// @notice Run the pre user operation validation hook specified by the `functionId`.\\n    /// @dev Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param userOp The user operation.\\n    /// @param userOpHash The user operation hash.\\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\\n    function preUserOpValidationHook(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\\n        external\\n        virtual\\n        returns (uint256)\\n    {\\n        (functionId, userOp, userOpHash);\\n        revert NotImplemented(msg.sig, functionId);\\n    }\\n\\n    /// @notice Run the user operation validationFunction specified by the `functionId`.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param userOp The user operation.\\n    /// @param userOpHash The user operation hash.\\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\\n    function userOpValidationFunction(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\\n        external\\n        virtual\\n        returns (uint256)\\n    {\\n        (functionId, userOp, userOpHash);\\n        revert NotImplemented(msg.sig, functionId);\\n    }\\n\\n    /// @notice Run the pre runtime validation hook specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param sender The caller address.\\n    /// @param value The call value.\\n    /// @param data The calldata sent.\\n    function preRuntimeValidationHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\\n        external\\n        virtual\\n    {\\n        (functionId, sender, value, data);\\n        revert NotImplemented(msg.sig, functionId);\\n    }\\n\\n    /// @notice Run the runtime validationFunction specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param sender The caller address.\\n    /// @param value The call value.\\n    /// @param data The calldata sent.\\n    function runtimeValidationFunction(uint8 functionId, address sender, uint256 value, bytes calldata data)\\n        external\\n        virtual\\n    {\\n        (functionId, sender, value, data);\\n        revert NotImplemented(msg.sig, functionId);\\n    }\\n\\n    /// @notice Run the pre execution hook specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param sender The caller address.\\n    /// @param value The call value.\\n    /// @param data The calldata sent.\\n    /// @return Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\\n    function preExecutionHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\\n        external\\n        virtual\\n        returns (bytes memory)\\n    {\\n        (functionId, sender, value, data);\\n        revert NotImplemented(msg.sig, functionId);\\n    }\\n\\n    /// @notice Run the post execution hook specified by the `functionId`.\\n    /// @dev To indicate the entire call should revert, the function MUST revert.\\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\\n    /// more than one.\\n    /// @param preExecHookData The context returned by its associated pre execution hook.\\n    function postExecutionHook(uint8 functionId, bytes calldata preExecHookData) external virtual {\\n        (functionId, preExecHookData);\\n        revert NotImplemented(msg.sig, functionId);\\n    }\\n\\n    /// @notice Describe the contents and intended configuration of the plugin.\\n    /// @dev This manifest MUST stay constant over time.\\n    /// @return A manifest describing the contents and intended configuration of the plugin.\\n    function pluginManifest() external pure virtual returns (PluginManifest memory) {\\n        revert NotImplemented(msg.sig, 0);\\n    }\\n\\n    /// @notice Describe the metadata of the plugin.\\n    /// @dev This metadata MUST stay constant over time.\\n    /// @return A metadata struct describing the plugin.\\n    function pluginMetadata() external pure virtual returns (PluginMetadata memory) {\\n        revert NotImplemented(msg.sig, 0);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by\\n    /// `interfaceId`. See the corresponding\\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// to learn more about how these ids are created.\\n    ///\\n    /// This function call must use less than 30 000 gas.\\n    ///\\n    /// Supporting the IPlugin interface is a requirement for plugin installation. This is also used\\n    /// by the modular account to prevent standard execution functions `execute`, `executeBatch`, and\\n    /// `executeFromPluginExternal` from making calls to plugins.\\n    /// @param interfaceId The interface ID to check for support.\\n    /// @return True if the contract supports `interfaceId`.\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IPlugin).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Initialize plugin data for the modular account.\\n    /// @dev Called by the modular account during `installPlugin`.\\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\\n    /// modular account.\\n    function _onInstall(bytes calldata data) internal virtual {\\n        (data);\\n        revert NotImplemented(msg.sig, 0);\\n    }\\n\\n    /// @notice Check if the account has initialized this plugin yet\\n    /// @dev This function should be overwritten for plugins that have state-changing onInstall's\\n    /// @param account The account to check\\n    /// @return True if the account has initialized this plugin\\n    // solhint-disable-next-line no-empty-blocks\\n    function _isInitialized(address account) internal view virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0x1aeb1bfa0a9eb67d6031af38677646cef0846c9ea8f350ab2677c7853ceab930\",\"license\":\"MIT\"},\"modular-account-libs/plugins/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n// Ported from @openzeppelin/contracts@v5.0.2\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x76dfd6d2511ff7061e381cb99fbd7757feee1af1cf2ebc02991f80c67e5ecec3\",\"license\":\"MIT\"},\"src/StrategyBuilderPlugin.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.19;\\n\\nimport {BasePlugin} from \\\"modular-account-libs/plugins/BasePlugin.sol\\\";\\nimport {IPluginExecutor} from \\\"modular-account-libs/interfaces/IPluginExecutor.sol\\\";\\nimport {\\n    ManifestFunction,\\n    ManifestAssociatedFunctionType,\\n    ManifestAssociatedFunction,\\n    PluginManifest,\\n    PluginMetadata,\\n    IPlugin\\n} from \\\"modular-account-libs/interfaces/IPlugin.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IStrategyBuilderPlugin} from \\\"./interfaces/IStrategyBuilderPlugin.sol\\\";\\nimport {ICondition} from \\\"./interfaces/ICondition.sol\\\";\\nimport {IFeeController} from \\\"./interfaces/IFeeController.sol\\\";\\nimport {IFeeHandler} from \\\"./interfaces/IFeeHandler.sol\\\";\\nimport {IAction} from \\\"./interfaces/IAction.sol\\\";\\n\\ncontract StrategyBuilderPlugin is BasePlugin, IStrategyBuilderPlugin {\\n    // metadata used by the pluginMetadata() method down below\\n    string public constant NAME = \\\"Strategy Builder Plugin\\\";\\n    string public constant VERSION = \\\"0.0.1\\\";\\n    string public constant AUTHOR = \\\"3Blocks\\\";\\n\\n    // this is a constant used in the manifest, to reference our only dependency: the single owner plugin\\n    // since it is the first, and only, plugin the index 0 will reference the single owner plugin\\n    // we can use this to tell the modular account that we should use the single owner plugin to validate our user op\\n    // in other words, we'll say \\\"make sure the person calling increment is an owner of the account using our single plugin\\\"\\n    uint256 internal constant _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION = 0;\\n\\n    IFeeController public immutable feeController;\\n    IFeeHandler public immutable feeHandler;\\n\\n    mapping(bytes32 => Strategy) private strategies;\\n    mapping(bytes32 => uint32[]) private strategiesUsed; //All automations where the strategy is used\\n    mapping(bytes32 => uint32) private automationsToIndex; //Maps each automation ID to its index in the owner's used strategy array.\\n    mapping(bytes32 => Automation) private automations;\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Modifier            \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    modifier strategyExist(address wallet, uint32 id) {\\n        if (strategies[getStorageId(wallet, id)].steps.length == 0) {\\n            revert StrategyDoesNotExist();\\n        }\\n        _;\\n    }\\n\\n    modifier strategyDoesNotExist(address wallet, uint32 id) {\\n        if (strategies[getStorageId(wallet, id)].steps.length > 0) {\\n            revert StrategyAlreadyExist();\\n        }\\n        _;\\n    }\\n\\n    modifier automationExist(address wallet, uint32 id) {\\n        if (automations[getStorageId(wallet, id)].condition.conditionAddress == address(0)) {\\n            revert AutomationNotExist();\\n        }\\n        _;\\n    }\\n\\n    modifier automationDoesNotExist(address wallet, uint32 id) {\\n        if (automations[getStorageId(wallet, id)].condition.conditionAddress != address(0)) {\\n            revert AutomationAlreadyExist();\\n        }\\n        _;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Constructor         \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    constructor(address _feeController, address _feeHandler) {\\n        feeController = IFeeController(_feeController);\\n        feeHandler = IFeeHandler(_feeHandler);\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503    Execution functions    \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function createStrategy(uint32 id, address creator, StrategyStep[] calldata steps)\\n        external\\n        strategyDoesNotExist(msg.sender, id)\\n    {\\n        //TODO: Validate steps\\n\\n        Strategy storage newStrategy = strategies[getStorageId(msg.sender, id)];\\n\\n        //TODO: Dont allow zero address!\\n        newStrategy.creator = creator;\\n\\n        for (uint256 i = 0; i < steps.length; i++) {\\n            StrategyStep memory step = steps[i];\\n\\n            // Create a new step in storage\\n            StrategyStep storage newStep = newStrategy.steps.push();\\n            newStep.condition = step.condition;\\n\\n            if (step.condition.conditionAddress != address(0)) {\\n                _changeStrategyInCondition(msg.sender, step.condition.conditionAddress, step.condition.id, id, true);\\n            }\\n\\n            // Loop through the actions and add them to the step\\n            for (uint256 j = 0; j < step.actions.length; j++) {\\n                //TODO: Validate each action!\\n                newStep.actions.push(step.actions[j]);\\n            }\\n        }\\n\\n        emit StrategyCreated(msg.sender, id, creator, newStrategy);\\n    }\\n\\n    function deleteStrategy(uint32 id) external strategyExist(msg.sender, id) {\\n        bytes32 storageId = getStorageId(msg.sender, id);\\n\\n        if (strategiesUsed[storageId].length > 0) {\\n            revert StrategyIsInUse();\\n        }\\n\\n        Strategy memory _strategy = strategies[storageId];\\n\\n        for (uint256 i = 0; i < _strategy.steps.length; i++) {\\n            Condition memory condition = _strategy.steps[i].condition;\\n            if (condition.conditionAddress != address(0)) {\\n                _changeStrategyInCondition(msg.sender, condition.conditionAddress, condition.id, id, false);\\n            }\\n        }\\n\\n        delete strategies[storageId];\\n\\n        emit StrategyDeleted(msg.sender, id);\\n    }\\n\\n    function executeStrategy(uint32 id) external strategyExist(msg.sender, id) {\\n        _executeStrategy(msg.sender, id);\\n    }\\n\\n    function createAutomation(\\n        uint32 id,\\n        uint32 strategyId,\\n        address paymentToken,\\n        uint256 maxFeeInUSD,\\n        Condition calldata condition\\n    ) external automationDoesNotExist(msg.sender, id) strategyExist(msg.sender, strategyId) {\\n        //Specific validations\\n        _validatePaymentToken(paymentToken);\\n\\n        _changeAutomationInCondition(msg.sender, condition.conditionAddress, condition.id, id, true);\\n\\n        bytes32 automationSID = getStorageId(msg.sender, id);\\n        Automation storage _newAutomation = automations[getStorageId(msg.sender, id)];\\n\\n        _newAutomation.condition = condition;\\n        _newAutomation.strategyId = strategyId;\\n        //TODO: Validate Payment token\\n        _newAutomation.paymentToken = paymentToken;\\n        //TODO: Validate maxFeeAmount\\n        _newAutomation.maxFeeAmount = maxFeeInUSD;\\n\\n        bytes32 strategySID = getStorageId(msg.sender, strategyId);\\n        strategiesUsed[strategySID].push(id);\\n        automationsToIndex[automationSID] = uint32(strategiesUsed[strategySID].length - 1);\\n\\n        emit AutomationCreated(msg.sender, id, strategyId, condition, paymentToken, maxFeeInUSD);\\n    }\\n\\n    function deleteAutomation(uint32 id) external automationExist(msg.sender, id) {\\n        bytes32 automationSID = getStorageId(msg.sender, id);\\n        Automation memory _automation = automations[automationSID];\\n\\n        uint32[] storage _usedInAutomations = strategiesUsed[getStorageId(msg.sender, _automation.strategyId)];\\n\\n        uint32 _actualAutomationIndex = automationsToIndex[automationSID];\\n        uint256 _lastAutomationIndex = _usedInAutomations.length - 1;\\n        if (_actualAutomationIndex != _lastAutomationIndex) {\\n            uint32 _lastAutomation = _usedInAutomations[_lastAutomationIndex];\\n            _usedInAutomations[_actualAutomationIndex] = _lastAutomation;\\n            automationsToIndex[getStorageId(msg.sender, _lastAutomation)] = _actualAutomationIndex;\\n        }\\n        _usedInAutomations.pop();\\n\\n        _changeAutomationInCondition(\\n            msg.sender, _automation.condition.conditionAddress, _automation.condition.id, id, false\\n        );\\n\\n        delete automations[automationSID];\\n\\n        emit AutomationDeleted(msg.sender, id);\\n    }\\n\\n    function executeAutomation(uint32 id, address wallet, address beneficary) external automationExist(wallet, id) {\\n        bytes32 automationSID = getStorageId(wallet, id);\\n        Automation memory _automation = automations[automationSID];\\n\\n        //Check the condition\\n        (uint8 conditionResult,) = _checkCondition(wallet, _automation.condition);\\n\\n        if (conditionResult == 0) {\\n            revert AutomationNotExecutable(_automation.condition.conditionAddress, _automation.condition.id);\\n        }\\n\\n        uint256 feeInUSD = _executeStrategy(wallet, _automation.strategyId);\\n\\n        if (feeInUSD > _automation.maxFeeAmount) {\\n            revert FeeExceedMaxFee();\\n        }\\n\\n        address _strategyCreator = strategies[getStorageId(wallet, _automation.strategyId)].creator;\\n        uint256 feeInToken =\\n            feeInUSD > 0 ? _payAutomation(wallet, _automation.paymentToken, feeInUSD, beneficary, _strategyCreator) : 0;\\n\\n        _updateCondition(wallet, _automation.condition, id);\\n\\n        emit AutomationExecuted(wallet, id, _automation.paymentToken, feeInToken, feeInUSD);\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Internal functions         \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function _executeStrategy(address wallet, uint32 id) internal returns (uint256 fee) {\\n        fee = _executeStep(wallet, id, 0);\\n\\n        emit StrategyExecuted(wallet, id);\\n    }\\n\\n    function _executeStep(address wallet, uint32 id, uint16 index) internal returns (uint256 fee) {\\n        StrategyStep memory _step = strategies[getStorageId(wallet, id)].steps[index];\\n\\n        //Check Condition\\n        (uint8 conditionResult, uint16 nextIndex) = _checkCondition(wallet, _step.condition);\\n\\n        if (conditionResult == 1) {\\n            //Execute all actions from the step\\n            for (uint256 i = 0; i < _step.actions.length; i++) {\\n                uint256 _actionFee = _executeAction(wallet, _step.actions[i]);\\n                fee += _actionFee;\\n            }\\n\\n            emit StrategyStepExecuted(wallet, id, index, _step.actions);\\n        }\\n\\n        if (nextIndex != 0) {\\n            //if there is a next step go to it\\n            uint256 _feeNextStep = _executeStep(wallet, id, nextIndex);\\n            fee += _feeNextStep;\\n        }\\n    }\\n\\n    function _executeAction(address _wallet, Action memory _action) internal returns (uint256 feeInUSD) {\\n        (address tokenToTrack, bool exist) =\\n            feeController.getTokenForAction(_action.target, _action.selector, _action.parameter);\\n        // If the volume token exist track the volume before and after the execution, else get the min fee\\n\\n        uint256 preExecBalance = exist ? IERC20(tokenToTrack).balanceOf(_wallet) : 0;\\n\\n        _execute(_wallet, _action);\\n\\n        IFeeController.FeeType feeType = feeController.functionFeeConfig(_action.selector).feeType;\\n\\n        if (exist) {\\n            uint256 postExecBalance = IERC20(tokenToTrack).balanceOf(_wallet);\\n            uint256 volume = feeType == IFeeController.FeeType.Deposit\\n                ? preExecBalance - postExecBalance\\n                : postExecBalance - preExecBalance;\\n\\n            feeInUSD = feeController.calculateFee(tokenToTrack, _action.selector, volume);\\n        } else {\\n            feeInUSD = feeController.minFeeInUSD(feeType);\\n        }\\n\\n        emit ActionExecuted(_wallet, _action);\\n    }\\n\\n    function _execute(address _wallet, Action memory _action) internal {\\n        bytes memory data = abi.encodePacked(_action.selector, _action.parameter);\\n        if (_action.actionType == ActionType.EXTERNAL) {\\n            IPluginExecutor(_wallet).executeFromPluginExternal(_action.target, _action.value, data);\\n        } else {\\n            (, bytes memory _result) = _action.target.call(data);\\n            IAction.PluginExecution[] memory executions = abi.decode(_result, (IAction.PluginExecution[]));\\n            for (uint256 i = 0; i < executions.length; i++) {\\n                //TODO: Check target is unequal zero\\n                IPluginExecutor(_wallet).executeFromPluginExternal(\\n                    executions[i].target, executions[i].value, executions[i].data\\n                );\\n            }\\n        }\\n    }\\n\\n    function _checkCondition(address _wallet, Condition memory _condition)\\n        internal\\n        view\\n        returns (uint8 conditionResult, uint16 nextStep)\\n    {\\n        if (_condition.conditionAddress == address(0)) {\\n            nextStep = _condition.result1;\\n            conditionResult = 1;\\n        } else {\\n            conditionResult = ICondition(_condition.conditionAddress).checkCondition(_wallet, _condition.id);\\n            if (conditionResult == 1) {\\n                nextStep = _condition.result1;\\n            } else {\\n                nextStep = _condition.result0;\\n            }\\n        }\\n    }\\n\\n    function _changeAutomationInCondition(\\n        address _wallet,\\n        address _condition,\\n        uint32 _conditionId,\\n        uint32 automationId,\\n        bool _add\\n    ) internal {\\n        bytes memory data = _add\\n            ? abi.encodeCall(ICondition.addAutomationToCondition, (_conditionId, automationId))\\n            : abi.encodeCall(ICondition.removeAutomationFromCondition, (_conditionId, automationId));\\n\\n        bytes memory result = IPluginExecutor(_wallet).executeFromPluginExternal(_condition, 0, data);\\n        bool _success = abi.decode(result, (bool));\\n        if (!_success) {\\n            revert changeAutomationInConditionFailed();\\n        }\\n    }\\n\\n    function _changeStrategyInCondition(\\n        address _wallet,\\n        address _condition,\\n        uint32 _conditionId,\\n        uint32 _strategy,\\n        bool _add\\n    ) internal {\\n        bytes memory data = _add\\n            ? abi.encodeCall(ICondition.addStrategyToCondition, (_conditionId, _strategy))\\n            : abi.encodeCall(ICondition.removeStrategyFromCondition, (_conditionId, _strategy));\\n\\n        bytes memory result = IPluginExecutor(_wallet).executeFromPluginExternal(_condition, 0, data);\\n        bool _success = abi.decode(result, (bool));\\n        if (!_success) {\\n            revert ChangeStrategyInConditionFailed();\\n        }\\n    }\\n\\n    function _payAutomation(\\n        address wallet,\\n        address paymentToken,\\n        uint256 feeInUSD,\\n        address beneficiary,\\n        address creator\\n    ) internal returns (uint256) {\\n        //calculate the token amount\\n        uint256 feeInToken = feeController.calculateTokenAmount(paymentToken, feeInUSD);\\n\\n        //If payment with ERC20 token approve first\\n        if (paymentToken != address(0)) {\\n            bytes memory _approveData = abi.encodeCall(IERC20.approve, (address(feeHandler), feeInToken));\\n            IPluginExecutor(wallet).executeFromPluginExternal(paymentToken, 0, _approveData);\\n        }\\n\\n        bytes memory _handleFeeData = paymentToken != address(0)\\n            ? abi.encodeCall(IFeeHandler.handleFee, (paymentToken, feeInToken, beneficiary, creator))\\n            : abi.encodeCall(IFeeHandler.handleFeeETH, (beneficiary, creator));\\n\\n        IPluginExecutor(wallet).executeFromPluginExternal(\\n            address(feeHandler), paymentToken == address(0) ? feeInToken : 0, _handleFeeData\\n        );\\n\\n        return feeInToken;\\n    }\\n\\n    function _updateCondition(address _wallet, Condition memory _condition, uint32 _actionId) internal {\\n        if (ICondition(_condition.conditionAddress).isUpdateable(_wallet, _condition.id)) {\\n            bytes memory _data = abi.encodeCall(ICondition.updateCondition, (_condition.id));\\n            bytes memory _result =\\n                IPluginExecutor(_wallet).executeFromPluginExternal(_condition.conditionAddress, 0, _data);\\n            bool _success = abi.decode(_result, (bool));\\n            if (!_success) {\\n                revert UpdateConditionFailed(_condition.conditionAddress, _condition.id);\\n            }\\n        } else {\\n            _changeAutomationInCondition(_wallet, _condition.conditionAddress, _condition.id, _actionId, false);\\n        }\\n    }\\n\\n    function _validatePaymentToken(address token) internal view {\\n        bool valid = true;\\n        if (!feeController.hasOracle(token)) {\\n            valid = false;\\n        }\\n\\n        if (!feeHandler.tokenAllowed(token)) {\\n            valid = false;\\n        }\\n\\n        if (!valid) {\\n            revert PaymentTokenNotAllowed();\\n        }\\n    }\\n\\n    function _decodePluginExecutions(bytes memory encodedData)\\n        private\\n        pure\\n        returns (IAction.PluginExecution[] memory)\\n    {\\n        return abi.decode(encodedData, (IAction.PluginExecution[]));\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503    Plugin interface functions    \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    /// @inheritdoc BasePlugin\\n    function onInstall(bytes calldata) external pure override {}\\n\\n    /// @inheritdoc BasePlugin\\n    function onUninstall(bytes calldata) external pure override {}\\n\\n    /// @inheritdoc BasePlugin\\n    function pluginManifest() external pure override returns (PluginManifest memory) {\\n        PluginManifest memory manifest;\\n\\n        // since we are using the modular account, we will specify one depedency\\n        // which will handle the user op validation for ownership\\n        // you can find this depedency specified in the installPlugin call in the tests\\n        manifest.dependencyInterfaceIds = new bytes4[](1);\\n        manifest.dependencyInterfaceIds[0] = type(IPlugin).interfaceId;\\n\\n        manifest.executionFunctions = new bytes4[](5);\\n        manifest.executionFunctions[0] = this.createStrategy.selector;\\n        manifest.executionFunctions[1] = this.executeStrategy.selector;\\n        manifest.executionFunctions[2] = this.createAutomation.selector;\\n        manifest.executionFunctions[3] = this.deleteStrategy.selector;\\n        manifest.executionFunctions[4] = this.deleteAutomation.selector;\\n\\n        // you can think of ManifestFunction as a reference to a function somewhere,\\n        // we want to say \\\"use this function\\\" for some purpose - in this case,\\n        // we'll be using the user op validation function from the single owner dependency\\n        // and this is specified by the depdendency index\\n        ManifestFunction memory ownerUserOpValidationFunction = ManifestFunction({\\n            functionType: ManifestAssociatedFunctionType.DEPENDENCY,\\n            functionId: 0, // unused since it's a dependency\\n            dependencyIndex: _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION\\n        });\\n\\n        // here we will link together the increment function with the single owner user op validation\\n        // this basically says \\\"use this user op validation function and make sure everythings okay before calling increment\\\"\\n        // this will ensure that only an owner of the account can call increment\\n        manifest.userOpValidationFunctions = new ManifestAssociatedFunction[](5);\\n        manifest.userOpValidationFunctions[0] = ManifestAssociatedFunction({\\n            executionSelector: this.createStrategy.selector,\\n            associatedFunction: ownerUserOpValidationFunction\\n        });\\n\\n        manifest.userOpValidationFunctions[1] = ManifestAssociatedFunction({\\n            executionSelector: this.executeStrategy.selector,\\n            associatedFunction: ownerUserOpValidationFunction\\n        });\\n\\n        manifest.userOpValidationFunctions[2] = ManifestAssociatedFunction({\\n            executionSelector: this.createAutomation.selector,\\n            associatedFunction: ownerUserOpValidationFunction\\n        });\\n\\n        manifest.userOpValidationFunctions[3] = ManifestAssociatedFunction({\\n            executionSelector: this.deleteStrategy.selector,\\n            associatedFunction: ownerUserOpValidationFunction\\n        });\\n\\n        manifest.userOpValidationFunctions[4] = ManifestAssociatedFunction({\\n            executionSelector: this.deleteAutomation.selector,\\n            associatedFunction: ownerUserOpValidationFunction\\n        });\\n\\n        // finally here we will always deny runtime calls to the increment function as we will only call it through user ops\\n        // this avoids a potential issue where a future plugin may define\\n        // a runtime validation function for it and unauthorized calls may occur due to that\\n        manifest.preRuntimeValidationHooks = new ManifestAssociatedFunction[](5);\\n        manifest.preRuntimeValidationHooks[0] = ManifestAssociatedFunction({\\n            executionSelector: this.createStrategy.selector,\\n            associatedFunction: ManifestFunction({\\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\\n                functionId: 0,\\n                dependencyIndex: 0\\n            })\\n        });\\n\\n        manifest.preRuntimeValidationHooks[1] = ManifestAssociatedFunction({\\n            executionSelector: this.executeStrategy.selector,\\n            associatedFunction: ManifestFunction({\\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\\n                functionId: 0,\\n                dependencyIndex: 0\\n            })\\n        });\\n\\n        manifest.preRuntimeValidationHooks[2] = ManifestAssociatedFunction({\\n            executionSelector: this.createAutomation.selector,\\n            associatedFunction: ManifestFunction({\\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\\n                functionId: 0,\\n                dependencyIndex: 0\\n            })\\n        });\\n\\n        manifest.preRuntimeValidationHooks[3] = ManifestAssociatedFunction({\\n            executionSelector: this.deleteAutomation.selector,\\n            associatedFunction: ManifestFunction({\\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\\n                functionId: 0,\\n                dependencyIndex: 0\\n            })\\n        });\\n\\n        manifest.preRuntimeValidationHooks[4] = ManifestAssociatedFunction({\\n            executionSelector: this.deleteStrategy.selector,\\n            associatedFunction: ManifestFunction({\\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\\n                functionId: 0,\\n                dependencyIndex: 0\\n            })\\n        });\\n\\n        manifest.permitAnyExternalAddress = true;\\n        manifest.canSpendNativeToken = true;\\n\\n        return manifest;\\n    }\\n\\n    /// @inheritdoc BasePlugin\\n    function pluginMetadata() external pure virtual override returns (PluginMetadata memory) {\\n        PluginMetadata memory metadata;\\n        metadata.name = NAME;\\n        metadata.version = VERSION;\\n        metadata.author = AUTHOR;\\n        return metadata;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503    External View Functions       \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function strategy(address wallet, uint32 id) external view returns (Strategy memory) {\\n        return strategies[getStorageId(wallet, id)];\\n    }\\n\\n    function automation(address wallet, uint32 id) external view returns (Automation memory) {\\n        return automations[getStorageId(wallet, id)];\\n    }\\n\\n    function getStorageId(address wallet, uint32 id) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(wallet, id));\\n    }\\n}\\n\",\"keccak256\":\"0xe99451989f1a6172d961e70d8092e802a56ef34ffb76c86145ee5aaaea63ba47\",\"license\":\"MIT\"},\"src/interfaces/IAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IAction {\\n    struct PluginExecution {\\n        address target;\\n        uint256 value;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x6fea0b07e7e004e9b7c84a30aee31bd939d62ec1cac7df206d7ae892fe6f5c7f\",\"license\":\"MIT\"},\"src/interfaces/ICondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface ICondition {\\n    function checkCondition(address wallet, uint32 id) external view returns (uint8);\\n\\n    function isUpdateable(address wallet, uint32 id) external view returns (bool);\\n\\n    function actionValid(address wallet, uint32 id, uint32 action) external view returns (bool);\\n\\n    function strategyValid(address wallet, uint32 id, uint32 strategy) external view returns (bool);\\n\\n    function updateCondition(uint32 id) external returns (bool);\\n\\n    function deleteCondition(uint32 id) external;\\n\\n    function addAutomationToCondition(uint32 id, uint32 action) external returns (bool);\\n\\n    function addStrategyToCondition(uint32 id, uint32 action) external returns (bool);\\n\\n    function removeAutomationFromCondition(uint32 id, uint32 automation) external returns (bool);\\n\\n    function removeStrategyFromCondition(uint32 id, uint32 strategy) external returns (bool);\\n\\n    function conditionActive(address wallet, uint32 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf7d8ef822f58236f414226e77743a9dc1c4997d939caf454b0047662a52978f0\",\"license\":\"MIT\"},\"src/interfaces/IFeeController.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.19;\\n\\ninterface IFeeController {\\n    enum FeeType {\\n        Deposit,\\n        Withdraw,\\n        Reward\\n    }\\n\\n    struct FeeConfig {\\n        FeeType feeType;\\n        uint256 feePercentage; // e.g., 100 = 1% (basis points)\\n    }\\n\\n    error FeePercentageExceedLimit();\\n    error ZeroAddressNotValid();\\n    error NoOracleExist();\\n    error InvalidTokenWithPriceOfZero();\\n    error InvalidArrayLength();\\n\\n    event FeeConfigSet(bytes4 indexed selector, FeeType feeType, uint256 feePercentage);\\n    event TokenGetterSet(address indexed target, bytes4 indexed selector, address tokenGetter);\\n    event GlobalTokenGetterSet(bytes4 indexed selector, address tokenGetter);\\n    event MinFeeSet(FeeType feeType, uint256 minFeeUSD);\\n\\n    function setFunctionFeeConfig(bytes4 _selector, FeeType _feeType, uint256 _feePercentage) external;\\n\\n    function getTokenForAction(address _target, bytes4 _selector, bytes memory _params)\\n        external\\n        view\\n        returns (address, bool);\\n    function calculateFee(address _token, bytes4 _selector, uint256 _volume) external view returns (uint256);\\n    function calculateTokenAmount(address token, uint256 feeInUSD) external view returns (uint256);\\n    function functionFeeConfig(bytes4 _selector) external view returns (FeeConfig memory);\\n    function maxFeeLimit(FeeType _type) external view returns (uint256);\\n    function minFeeInUSD(FeeType _type) external view returns (uint256);\\n    function hasOracle(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6c531a60fb5e40fc5eb34e51f048d723aa1d8cc5ec36e3ea545f9927c604e86b\",\"license\":\"MIT\"},\"src/interfaces/IFeeHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IFeeHandler {\\n    error InvalidAmount();\\n    error ZeroAddressNotValid();\\n    error InvalidBeneficiaryOrCreator();\\n    error PrimaryTokenAlreadyActivated();\\n    error InvalidPercentageDistribution();\\n    error InvalidPrimaryTokenDiscount();\\n    error TokenNotAllowed();\\n\\n    event FeeHandled(address indexed token, uint256 amount);\\n    event FeeHandledETH(uint256 amount);\\n    event PrimaryTokenActivated(address token, address treasury);\\n    event UpdatedVault(address vault);\\n    event UpdatedPercentages(uint256 beneficiary, uint256 creator, uint256 vault);\\n    event UpdatedPrimaryTokenDiscount(uint256 discount);\\n    event UpdatedTokenAllowance(address token, bool allowed);\\n\\n    function handleFee(address token, uint256 amount, address beneficiary, address creator) external;\\n    function handleFeeETH(address beneficiary, address creator) external payable;\\n    function activatePrimaryToken(address token, address _treasury) external;\\n    function updateVault(address _vault) external;\\n    function updatePercentages(uint256 _beneficiary, uint256 _creator, uint256 _vault) external;\\n    function updatePrimaryTokenDiscount(uint256 _discount) external;\\n    function updateTokenAllowance(address token, bool allowed) external;\\n    function tokenAllowed(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea4fe34edab754854074d8b2e1371fe49dcff0ddeb8eaf635744ff25403e0d5e\",\"license\":\"MIT\"},\"src/interfaces/IStrategyBuilderPlugin.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.19;\\n\\ninterface IStrategyBuilderPlugin {\\n    enum FunctionId {USER_OP_VALIDATION_SESSION_KEY}\\n\\n    enum ActionType {\\n        EXTERNAL,\\n        INTERNAL_ACTION\\n    }\\n\\n    /* ====== Structs ====== */\\n\\n    struct Action {\\n        bytes4 selector;\\n        bytes parameter;\\n        address target;\\n        uint256 value;\\n        ActionType actionType;\\n    }\\n\\n    struct Condition {\\n        address conditionAddress;\\n        uint32 id;\\n        uint8 result1; // If the condition returns 1 got to index result1. If index result1 is 0 then no next step\\n        uint8 result0; // If the condtions returns 0 go to index result0. If index result0 is 0 then no next step\\n    }\\n\\n    struct StrategyStep {\\n        Condition condition;\\n        Action[] actions;\\n    }\\n\\n    struct Strategy {\\n        address creator;\\n        StrategyStep[] steps;\\n    }\\n\\n    struct Automation {\\n        Condition condition; // If the condition returns 1, the automation can be executed\\n        uint32 strategyId;\\n        address paymentToken;\\n        uint256 maxFeeAmount;\\n    }\\n\\n    error StrategyDoesNotExist();\\n    error StrategyAlreadyExist();\\n    error AutomationNotExecutable(address condition, uint32 id);\\n    error FeeExceedMaxFee();\\n    error AutomationNotExist();\\n    error AutomationAlreadyExist();\\n    error StrategyIsInUse();\\n    error changeAutomationInConditionFailed();\\n    error ChangeStrategyInConditionFailed();\\n    error UpdateConditionFailed(address condition, uint32 id);\\n    error PaymentTokenNotAllowed();\\n\\n    /* ====== Events ====== */\\n\\n    event StrategyCreated(address indexed wallet, uint32 strategyId, address creator, Strategy strategy);\\n    event StrategyExecuted(address indexed wallet, uint32 strategyId);\\n    event StrategyDeleted(address indexed wallet, uint32 strategyId);\\n\\n    event AutomationCreated(\\n        address indexed wallet,\\n        uint32 automationId,\\n        uint32 strategyId,\\n        Condition condition,\\n        address paymentToken,\\n        uint256 maxFeeAmount\\n    );\\n    event AutomationDeleted(address indexed wallet, uint32 automationId);\\n    event AutomationExecuted(\\n        address indexed wallet, uint32 automationId, address paymentToken, uint256 feeInToken, uint256 feeInUSD\\n    );\\n\\n    event StrategyStepExecuted(address indexed wallet, uint32 strategyId, uint32 stepId, Action[] actions);\\n    event ActionExecuted(address indexed wallet, Action action);\\n\\n    function createStrategy(uint32 id, address creator, StrategyStep[] calldata steps) external;\\n    function createAutomation(\\n        uint32 id,\\n        uint32 strategyId,\\n        address paymentToken,\\n        uint256 maxFeeInUSD,\\n        Condition calldata condition\\n    ) external;\\n\\n    // function executeStrategy(uint16 id) external;\\n\\n    // function deleteStrategy(uint16 id) external;\\n\\n    // function activateAutomation(\\n    //     uint16 id,\\n    //     uint16 strategyId,\\n    //     Condition calldata condition,\\n    //     address paymentToken,\\n    //     uint256 maxFeeAmount\\n    // ) external;\\n\\n    // function executeAutomation(uint16 id, address beneficary) external;\\n\\n    // function strategy(uint16 strategyId) external view returns (Strategy memory);\\n\\n    // function automation(uint16 automationId) external view returns (Automation memory);\\n}\\n\",\"keccak256\":\"0x1963184df5b5a015eb899af66a0f21c4cac36841d8bad4cd0f856a1677c96466\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200479f3803806200479f833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051614699620001066000396000818161028001528181611ea20152818161225b01526123f901526000818161030501528181611e0e015281816121d20152818161297601528181612a9801528181612bf20152612c7d01526146996000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636d61fe70116100de578063af87348311610097578063c776313011610071578063c7763130146103dc578063d7ec3598146103f1578063d855198a14610404578063ffa1ad741461042457600080fd5b8063af87348314610339578063ba542eae146103c9578063bfd151c11461022d57600080fd5b80636d61fe701461032757806388e18ce4146103395780638a91b0e3146103275780639478a77f1461035a578063a3f4df7e1461036d578063a7be85c6146103a357600080fd5b80633bd797b7116101305780633bd797b7146102685780633c93adee1461027b57806342ab2be1146102ba57806346d60eb2146102cd57806358949453146102ed5780636999b3771461030057600080fd5b806301ffc9a71461017857806305fe4172146101a057806308fdca32146101b55780630c7ecd841461022d5780631128186d14610240578063118a538914610253575b600080fd5b61018b610186366004613136565b610448565b60405190151581526020015b60405180910390f35b6101b36101ae36600461316a565b61047f565b005b6101c86101c33660046131a7565b610751565b60408051825180516001600160a01b03908116835260208083015163ffffffff908116828601528386015160ff908116868801526060948501511684860152908601511660808401529284015190921660a082015291015160c082015260e001610197565b6101b361023b366004613230565b610836565b6101b361024e3660046132a2565b610868565b61025b610891565b6040516101979190613346565b6101b361027636600461341f565b61095d565b6102a27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610197565b6101b36102c836600461316a565b610ba6565b6102e06102db366004613230565b610bfa565b6040516101979190613490565b6101b36102fb3660046134a3565b610c25565b6102a27f000000000000000000000000000000000000000000000000000000000000000081565b6101b3610335366004613537565b5050565b61034c610347366004613578565b610ebc565b604051908152602001610197565b6101b36103683660046135d7565b610ee6565b6102e06040518060400160405280601781526020017629ba3930ba32b3bc90213ab4b63232b91028363ab3b4b760491b81525081565b6102e06040518060400160405280600781526020016633426c6f636b7360c81b81525081565b6101b36103d736600461316a565b61111f565b6103e4611497565b60405161019791906137d3565b61034c6103ff3660046131a7565b6119f6565b6104176104123660046131a7565b611a4a565b60405161019791906139ee565b6102e060405180604001604052806005815260200164302e302e3160d81b81525081565b60006001600160e01b0319821663f23b1ed760e01b148061047957506301ffc9a760e01b6001600160e01b03198316145b92915050565b3381600060038161049085856119f6565b81526020810191909152604001600020546001600160a01b0316036104c857604051630cc8721760e31b815260040160405180910390fd5b60006104d433856119f6565b600081815260036020908152604080832081516101008101835281546001600160a01b038082166080840190815263ffffffff600160a01b8404811660a086015260ff600160c01b8504811660c0870152600160c81b90940490931660e08501528352600180850154928316968401879052640100000000909204169382019390935260029091015460608201529394509082906105739033906119f6565b815260208082019290925260409081016000908120868252600290935290812054825492935063ffffffff16916105ac90600190613acc565b9050808263ffffffff16146106805760008382815481106105cf576105cf613adf565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905080848463ffffffff168154811061061057610610613adf565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550826002600061065233856119f6565b815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550505b8280548061069057610690613af5565b60008281526020808220600860001990940193840401805463ffffffff600460078716026101000a021916905591909255855180519101516106d792339291908c90611c9a565b600085815260036020908152604080832080546001600160d01b03191681556001810180546001600160c01b031916905560020192909255905163ffffffff8a16815233917f8c1bcc5bc952f57b9bb9ca11fcfe46e46cdcc85cfab32adaef297a52892b3901910160405180910390a25050505050505050565b604080516101008101825260006080820181815260a0830182905260c0830182905260e0830182905282526020820181905291810182905260608101919091526003600061079f85856119f6565b8152602080820192909252604090810160002081516101008101835281546001600160a01b038082166080840190815263ffffffff600160a01b8404811660a086015260ff600160c01b8504811660c0870152600160c81b90940490931660e08501528352600184015491821695830195909552640100000000900490931691830191909152600201546060820152905092915050565b6000356001600160e01b031916856040516384b9b37960e01b815260040161085f929190613b0b565b60405180910390fd5b6000356001600160e01b031916836040516384b9b37960e01b815260040161085f929190613b0b565b6108bc6040518060800160405280606081526020016060815260200160608152602001606081525090565b6108e76040518060800160405280606081526020016060815260200160608152602001606081525090565b604080518082018252601781527629ba3930ba32b3bc90213ab4b63232b91028363ab3b4b760491b602080830191909152908352815180830183526005815264302e302e3160d81b818301528382015281518083018352600781526633426c6f636b7360c81b9181019190915290820152919050565b3385600060038161096e85856119f6565b81526020810191909152604001600020546001600160a01b0316146109a657604051634dd7513760e11b815260040160405180910390fd5b33866000806109b584846119f6565b8152602001908152602001600020600101805490506000036109ea57604051635737b5dd60e01b815260040160405180910390fd5b6109f387611dec565b610a1c33610a046020880188613b28565b610a146040890160208a0161316a565b8c6001611c9a565b6000610a28338b6119f6565b9050600060036000610a3a338e6119f6565b8152602081019190915260400160002090508681610a588282613b45565b50506001810180546001600160a01b038b16640100000000026001600160c01b031990911663ffffffff8d1617179055600281018890556000610a9b338c6119f6565b9050600160008281526020019081526020016000208c90806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff160217905550600180600083815260200190815260200160002080549050610b1e9190613acc565b6002600085815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550336001600160a01b03167fdb9e062b56198be71327d2a755449c3fe38502eff5c81468ebda215c5e3ffcea8d8d8b8e8e604051610b90959493929190613bfe565b60405180910390a2505050505050505050505050565b3381600080610bb584846119f6565b815260200190815260200160002060010180549050600003610bea57604051635737b5dd60e01b815260040160405180910390fd5b610bf43384611f33565b50505050565b60606000356001600160e01b031916866040516384b9b37960e01b815260040161085f929190613b0b565b33846000806000610c3685856119f6565b81526020810191909152604001600020600101541115610c695760405163634f694f60e11b815260040160405180910390fd5b6000806000610c78338a6119f6565b81526020810191909152604001600090812080546001600160a01b0319166001600160a01b03891617815591505b84811015610e6d576000868683818110610cc257610cc2613adf565b9050602002810190610cd49190613c90565b610cdd90613f20565b6001808501805491820181556000908152602090819020835180516002909402909101805492820151604083015160609093015160ff908116600160c81b0260ff60c81b1991909416600160c01b021661ffff60c01b1963ffffffff909216600160a01b026001600160c01b03199095166001600160a01b0390961695861794909417169290921717815591925015610d885781518051602090910151610d889133918d6001611f8e565b60005b826020015151811015610e62578160010183602001518281518110610db257610db2613adf565b6020908102919091018101518254600180820185556000948552938390208251600590920201805463ffffffff191660e09290921c919091178155918101519092820190610e009082614050565b5060408201516002820180546001600160a01b0319166001600160a01b0390921691909117905560608201516003820155608082015160048201805460ff191660018381811115610e5357610e536136de565b02179055505050600101610d8b565b505050600101610ca6565b50336001600160a01b03167f6055ac00abe054259552b545157e716d05be56347e14d86c1492cc51180de26a888884604051610eab9392919061410f565b60405180910390a250505050505050565b600080356001600160e01b031916846040516384b9b37960e01b815260040161085f929190613b0b565b81836000600381610ef785856119f6565b81526020810191909152604001600020546001600160a01b031603610f2f57604051630cc8721760e31b815260040160405180910390fd5b6000610f3b85876119f6565b600081815260036020908152604080832081516101008101835281546001600160a01b038082166080840190815263ffffffff600160a01b8404811660a086015260ff600160c01b8504811660c0870152600160c81b90940490931660e08501528084526001850154928316968401969096526401000000009091041692810192909252600201546060820152929350610fd69088906120d7565b5090508060ff1660000361101e578151805160209091015160405163586601c960e11b81526001600160a01b03909216600483015263ffffffff16602482015260440161085f565b600061102e888460200151611f33565b905082606001518111156110555760405163735a16a760e11b815260040160405180910390fd5b60008060006110688b87602001516119f6565b815260208101919091526040016000908120546001600160a01b03169150826110925760006110a3565b6110a38a8660400151858c866121a7565b90506110b48a86600001518d6124ae565b604080860151815163ffffffff8e1681526001600160a01b039182166020820152918201839052606082018590528b16907ff3b51f5934782975a42d014d05c1bcf64abdb16c56051b2b64208a610987800f9060800160405180910390a25050505050505050505050565b338160008061112e84846119f6565b81526020019081526020016000206001018054905060000361116357604051635737b5dd60e01b815260040160405180910390fd5b600061116f33856119f6565b6000818152600160205260409020549091501561119f57604051634c7ff9bd60e11b815260040160405180910390fd5b6000818152602081815260408083208151808301835281546001600160a01b031681526001820180548451818702810187019095528085529194929385840193909290879084015b828210156113b857600084815260208082206040805160c0810182526002870290920180546001600160a01b03811684840190815263ffffffff600160a01b830416606086015260ff600160c01b830481166080870152600160c81b90920490911660a08501528352600181018054835181870281018701909452808452939591948681019491929084015b828210156113a15760008481526020908190206040805160a0810190915260058502909101805460e01b6001600160e01b031916825260018101805492939192918401916112c090613fce565b80601f01602080910402602001604051908101604052809291908181526020018280546112ec90613fce565b80156113395780601f1061130e57610100808354040283529160200191611339565b820191906000526020600020905b81548152906001019060200180831161131c57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460609091019060ff16600181111561137d5761137d6136de565b600181111561138e5761138e6136de565b8152505081526020019060010190611273565b5050505081525050815260200190600101906111e7565b5050505081525050905060005b816020015151811015611428576000826020015182815181106113ea576113ea613adf565b60209081029190910101515180519091506001600160a01b03161561141f5761141f33826000015183602001518a6000611f8e565b506001016113c5565b50600082815260208190526040812080546001600160a01b0319168155906114536001830182612f6b565b505060405163ffffffff8616815233907fd422eb39d02e723621702475863a9c9799e4aaa0c2d76dac1ceac800e915700b9060200160405180910390a25050505050565b61149f612f8f565b6114a7612f8f565b604080516001808252818301909252906020808301908036833750505060208201819052805163f23b1ed760e01b91906000906114e6576114e6613adf565b6001600160e01b03199290921660209283029190910182015260408051600580825260c0820190925291820160a080368337505050604082018190528051635894945360e01b919060009061153d5761153d613adf565b6001600160e01b031990921660209283029190910190910152604081015180516342ab2be160e01b9190600190811061157857611578613adf565b6001600160e01b03199092166020928302919091019091015260408101518051633bd797b760e01b919060029081106115b3576115b3613adf565b6001600160e01b03199092166020928302919091019091015260408101518051635d2a175760e11b919060039081106115ee576115ee613adf565b6001600160e01b031990921660209283029190910190910152604081015180516302ff20b960e11b9190600490811061162957611629613adf565b6001600160e01b03199290921660209283029190910182015260408051606081018252600281526000928101839052808201929092528051600580825260c0820190925290816020015b61167b612ff4565b81526020019060019003908161167357505060e0830190815260408051808201909152635894945360e01b815260208101839052905180516000906116c2576116c2613adf565b602002602001018190525060405180604001604052806342ab2be160e01b6001600160e01b0319168152602001828152508260e0015160018151811061170a5761170a613adf565b60200260200101819052506040518060400160405280633bd797b760e01b6001600160e01b0319168152602001828152508260e0015160028151811061175257611752613adf565b6020026020010181905250604051806040016040528063ba542eae60e01b6001600160e01b0319168152602001828152508260e0015160038151811061179a5761179a613adf565b602002602001018190525060405180604001604052806305fe417260e01b6001600160e01b0319168152602001828152508260e001516004815181106117e2576117e2613adf565b602090810291909101015260408051600580825260c0820190925290816020015b61180b612ff4565b8152602001906001900390816118035750506101408301908152604080518082018252635894945360e01b815281516060810183526004815260006020808301829052938201819052928201529151805190919061186b5761186b613adf565b6020908102919091018101919091526040805180820182526342ab2be160e01b815281516060810183526004815260008185018190529281019290925291820152610140830151805160019081106118c5576118c5613adf565b602090810291909101810191909152604080518082018252633bd797b760e01b8152815160608101835260048152600081850181905292810192909252918201526101408301518051600290811061191f5761191f613adf565b6020908102919091018101919091526040805180820182526302ff20b960e11b8152815160608101835260048152600081850181905292810192909252918201526101408301518051600390811061197957611979613adf565b602090810291909101810191909152604080518082018252635d2a175760e11b81528151606081019092529182019080600481526000602082018190526040909101529052610140830151805160049081106119d7576119d7613adf565b60209081029190910101525060016080820181905260a0820152919050565b6040516bffffffffffffffffffffffff19606084901b1660208201526001600160e01b031960e083901b16603482015260009060380160405160208183030381529060405280519060200120905092915050565b604080518082019091526000815260606020820152600080611a6c85856119f6565b8152602080820192909252604090810160009081208251808401845281546001600160a01b031681526001820180548551818802810188019096528086529195929486840194909391929184015b82821015611c8b57600084815260208082206040805160c0810182526002870290920180546001600160a01b03811684840190815263ffffffff600160a01b830416606086015260ff600160c01b830481166080870152600160c81b90920490911660a08501528352600181018054835181870281018701909452808452939591948681019491929084015b82821015611c745760008481526020908190206040805160a0810190915260058502909101805460e01b6001600160e01b03191682526001810180549293919291840191611b9390613fce565b80601f0160208091040260200160405190810160405280929190818152602001828054611bbf90613fce565b8015611c0c5780601f10611be157610100808354040283529160200191611c0c565b820191906000526020600020905b815481529060010190602001808311611bef57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460609091019060ff166001811115611c5057611c506136de565b6001811115611c6157611c616136de565b8152505081526020019060010190611b46565b505050508152505081526020019060010190611aba565b50505091525090949350505050565b600081611cea5760405163ffffffff80861660248301528416604482015260640160408051601f198184030181529190526020810180516001600160e01b03166345248a6160e11b179052611d2f565b60405163ffffffff80861660248301528416604482015260640160408051601f198184030181529190526020810180516001600160e01b031663023ef5a960e01b1790525b90506000866001600160a01b03166338997b11876000856040518463ffffffff1660e01b8152600401611d649392919061430a565b6000604051808303816000875af1158015611d83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611dab9190810190614387565b9050600081806020019051810190611dc391906143cb565b905080611de257604051627db9bf60e11b815260040160405180910390fd5b5050505050505050565b60405163180c930960e01b81526001600160a01b0382811660048301526001917f00000000000000000000000000000000000000000000000000000000000000009091169063180c930990602401602060405180830381865afa158015611e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7b91906143cb565b611e83575060005b604051632a90cead60e11b81526001600160a01b0383811660048301527f000000000000000000000000000000000000000000000000000000000000000016906355219d5a90602401602060405180830381865afa158015611ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0d91906143cb565b611f15575060005b8061033557604051633177657b60e21b815260040160405180910390fd5b6000611f418383600061266c565b60405163ffffffff841681529091506001600160a01b038416907f30bcdb9ee7609081b23f2866129f2079d711802265ba54036d4f8bf6c62229779060200160405180910390a292915050565b600081611fde5760405163ffffffff80861660248301528416604482015260640160408051601f198184030181529190526020810180516001600160e01b031663014b0af760e41b179052612023565b60405163ffffffff80861660248301528416604482015260640160408051601f198184030181529190526020810180516001600160e01b03166339404bed60e21b1790525b90506000866001600160a01b03166338997b11876000856040518463ffffffff1660e01b81526004016120589392919061430a565b6000604051808303816000875af1158015612077573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261209f9190810190614387565b90506000818060200190518101906120b791906143cb565b905080611de2576040516334eb2f4560e21b815260040160405180910390fd5b805160009081906001600160a01b03166120fd575050604081015160019060ff166121a0565b825160208401516040516389a78a0360e01b81526001600160a01b03878116600483015263ffffffff90921660248201529116906389a78a0390604401602060405180830381865afa158015612157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217b91906143e6565b91508160ff166001036121965750604082015160ff166121a0565b50606082015160ff165b9250929050565b60405163aac61a1f60e01b81526001600160a01b0385811660048301526024820185905260009182917f0000000000000000000000000000000000000000000000000000000000000000169063aac61a1f90604401602060405180830381865afa158015612219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061223d9190614403565b90506001600160a01b03861615612333576040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044810182905260009060640160408051601f198184030181529181526020820180516001600160e01b031663095ea7b360e01b179052516338997b1160e01b81529091506001600160a01b038916906338997b11906122e9908a90600090869060040161430a565b6000604051808303816000875af1158015612308573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123309190810190614387565b50505b60006001600160a01b03871661238f576040516001600160a01b0380871660248301528516604482015260640160408051601f198184030181529190526020810180516001600160e01b031663d66672c960e01b1790526123e6565b6040516001600160a01b0380891660248301526044820184905280871660648301528516608482015260a40160408051601f198184030181529190526020810180516001600160e01b0316630bceddc760e01b1790525b9050876001600160a01b03166338997b117f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b03168a6001600160a01b03161461243957600061243b565b845b846040518463ffffffff1660e01b815260040161245a9392919061430a565b6000604051808303816000875af1158015612479573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526124a19190810190614387565b5090979650505050505050565b81516020830151604051632b8c165760e11b81526001600160a01b03868116600483015263ffffffff90921660248201529116906357182cae90604401602060405180830381865afa158015612508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252c91906143cb565b1561265157602082015160405163ffffffff909116602482015260009060440160408051601f198184030181529181526020820180516001600160e01b03166303d049bb60e01b179052845190516338997b1160e01b81529192506000916001600160a01b038716916338997b11916125ac91908590879060040161430a565b6000604051808303816000875af11580156125cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125f39190810190614387565b905060008180602001905181019061260b91906143cb565b9050806126495784516020860151604051637b81003760e01b81526001600160a01b03909216600483015263ffffffff16602482015260440161085f565b505050505050565b6126678383600001518460200151846000611c9a565b505050565b60008060008061267c87876119f6565b81526020019081526020016000206001018361ffff16815481106126a2576126a2613adf565b600091825260208083206040805160c081018252600290940290910180546001600160a01b03811685840190815263ffffffff600160a01b830416606087015260ff600160c01b830481166080880152600160c81b90920490911660a0860152845260018101805483518186028101860190945280845294959194868501949192909184015b828210156128565760008481526020908190206040805160a0810190915260058502909101805460e01b6001600160e01b0319168252600181018054929391929184019161277590613fce565b80601f01602080910402602001604051908101604052809291908181526020018280546127a190613fce565b80156127ee5780601f106127c3576101008083540402835291602001916127ee565b820191906000526020600020905b8154815290600101906020018083116127d157829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201546040820152600482015460609091019060ff166001811115612832576128326136de565b6001811115612843576128436136de565b8152505081526020019060010190612728565b505050508152505090506000806128718784600001516120d7565b915091508160ff1660010361291b5760005b8360200151518110156128d05760006128b989866020015184815181106128ac576128ac613adf565b602002602001015161294c565b90506128c5818761441c565b955050600101612883565b50866001600160a01b03167f9e69fce51107df6a8ea6c6add2311f64f842e81c07b565c38864bd16f098739f878786602001516040516129129392919061442f565b60405180910390a25b61ffff81161561294257600061293288888461266c565b905061293e818661441c565b9450505b5050509392505050565b6040808201518251602084015192516334dcc79760e01b8152600093849384936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016936334dcc797936129ab939291600401614458565b6040805180830381865afa1580156129c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129eb919061448c565b915091506000816129fd576000612a67565b6040516370a0823160e01b81526001600160a01b0387811660048301528416906370a0823190602401602060405180830381865afa158015612a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a679190614403565b9050612a738686612d41565b845160405163d659e5d160e01b81526001600160e01b031990911660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d659e5d1906024016040805180830381865afa158015612ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0a91906144c1565b5190508215612c66576040516370a0823160e01b81526001600160a01b038881166004830152600091908616906370a0823190602401602060405180830381865afa158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b819190614403565b9050600080836002811115612b9857612b986136de565b14612bac57612ba78483613acc565b612bb6565b612bb68285613acc565b885160405163f25be75360e01b81526001600160a01b0389811660048301526001600160e01b03199092166024820152604481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063f25be75390606401602060405180830381865afa158015612c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5d9190614403565b96505050612cf6565b604051638b33fc9960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638b33fc9990612cb29084906004016144ff565b602060405180830381865afa158015612ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf39190614403565b94505b866001600160a01b03167ff527f5594cdc8f8c00b64622e3fdd624abd1588919811d4f526c6b91e928806787604051612d2f9190614519565b60405180910390a25050505092915050565b600081600001518260200151604051602001612d5e92919061452c565b60408051601f198184030181529190529050600082608001516001811115612d8857612d886136de565b03612e0c57826001600160a01b03166338997b1183604001518460600151846040518463ffffffff1660e01b8152600401612dc59392919061430a565b6000604051808303816000875af1158015612de4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bf49190810190614387565b600082604001516001600160a01b031682604051612e2a919061455d565b6000604051808303816000865af19150503d8060008114612e67576040519150601f19603f3d011682016040523d82523d6000602084013e612e6c565b606091505b50915050600081806020019051810190612e86919061456f565b905060005b815181101561264957856001600160a01b03166338997b11838381518110612eb557612eb5613adf565b602002602001015160000151848481518110612ed357612ed3613adf565b602002602001015160200151858581518110612ef157612ef1613adf565b6020026020010151604001516040518463ffffffff1660e01b8152600401612f1b9392919061430a565b6000604051808303816000875af1158015612f3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f629190810190614387565b50600101612e8b565b5080546000825560020290600052602060002090810190612f8c9190613030565b50565b604051806101800160405280606081526020016060815260200160608152602001606081526020016000151581526020016000151581526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b60408051808201909152600081526020810161302b6040805160608101909152806000815260006020820181905260409091015290565b905290565b8082111561305e5780546001600160d01b031916815560006130556001830182613062565b50600201613030565b5090565b5080546000825560050290600052602060002090810190612f8c91905b8082111561305e57805463ffffffff1916815560006130a160018301826130cf565b506002810180546001600160a01b03191690556000600382015560048101805460ff1916905560050161307f565b5080546130db90613fce565b6000825580601f106130eb575050565b601f016020900490600052602060002090810190612f8c91905b8082111561305e5760008155600101613105565b80356001600160e01b03198116811461313157600080fd5b919050565b60006020828403121561314857600080fd5b61315182613119565b9392505050565b63ffffffff81168114612f8c57600080fd5b60006020828403121561317c57600080fd5b813561315181613158565b6001600160a01b0381168114612f8c57600080fd5b803561313181613187565b600080604083850312156131ba57600080fd5b82356131c581613187565b915060208301356131d581613158565b809150509250929050565b60ff81168114612f8c57600080fd5b60008083601f84011261320157600080fd5b5081356001600160401b0381111561321857600080fd5b6020830191508360208285010111156121a057600080fd5b60008060008060006080868803121561324857600080fd5b8535613253816131e0565b9450602086013561326381613187565b93506040860135925060608601356001600160401b0381111561328557600080fd5b613291888289016131ef565b969995985093965092949392505050565b6000806000604084860312156132b757600080fd5b83356132c2816131e0565b925060208401356001600160401b038111156132dd57600080fd5b6132e9868287016131ef565b9497909650939450505050565b60005b838110156133115781810151838201526020016132f9565b50506000910152565b600081518084526133328160208601602086016132f6565b601f01601f19169290920160200192915050565b60006020808352835160808285015261336260a085018261331a565b905081850151601f19604081878503016040880152613381848461331a565b9350604088015192508187850301606088015261339e848461331a565b6060890151888203840160808a015280518083529195508601935085850190600581901b8601870160005b828110156134105787820386018452865180516001600160e01b03191683528901518983018690526133fd8684018261331a565b978a0197948a01949250506001016133c9565b509a9950505050505050505050565b600080600080600085870361010081121561343957600080fd5b863561344481613158565b9550602087013561345481613158565b9450604087013561346481613187565b9350606087013592506080607f198201121561347f57600080fd5b506080860190509295509295909350565b602081526000613151602083018461331a565b600080600080606085870312156134b957600080fd5b84356134c481613158565b935060208501356134d481613187565b925060408501356001600160401b03808211156134f057600080fd5b818701915087601f83011261350457600080fd5b81358181111561351357600080fd5b8860208260051b850101111561352857600080fd5b95989497505060200194505050565b6000806020838503121561354a57600080fd5b82356001600160401b0381111561356057600080fd5b61356c858286016131ef565b90969095509350505050565b60008060006060848603121561358d57600080fd5b8335613598816131e0565b925060208401356001600160401b038111156135b357600080fd5b840161016081870312156135c657600080fd5b929592945050506040919091013590565b6000806000606084860312156135ec57600080fd5b83356135f781613158565b9250602084013561360781613187565b9150604084013561361781613187565b809150509250925092565b60008151808452602080850194506020840160005b8381101561365d5781516001600160e01b03191687529582019590820190600101613637565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b848110156124a157858303601f19018952815180516001600160a01b03168452848101511515858501526040908101516060918501829052906136ca81860183613622565b9a86019a9450505090830190600101613685565b634e487b7160e01b600052602160045260246000fd5b805160058110613706576137066136de565b825260208181015160ff1690830152604090810151910152565b60008151808452602080850194506020840160005b8381101561365d57815180516001600160e01b031916885283015161375c848901826136f4565b506080969096019590820190600101613735565b60008151808452602080850194506020840160005b8381101561365d57815180516001600160e01b0319168852838101516137ad858a01826136f4565b50604001516137bf60808901826136f4565b5060e0969096019590820190600101613785565b60208152600082516101808060208501526137f26101a0850183613622565b91506020850151601f19808685030160408701526138108483613622565b9350604087015191508086850301606087015261382d8483613622565b9350606087015191508086850301608087015261384a8483613622565b93506080870151915061386160a087018315159052565b60a087015180151560c0880152915060c08701519150808685030160e087015261388b8483613668565b935060e087015191506101008187860301818801526138aa8584613720565b9450808801519250506101208187860301818801526138c98584613720565b9450808801519250506101408187860301818801526138e88584613720565b9450808801519250506101608187860301818801526139078584613720565b9088015187820390920184880152935090506139238382613770565b9695505050505050565b6002811061393d5761393d6136de565b9052565b63ffffffff60e01b81511682526000602082015160a0602085015261396960a085018261331a565b905060018060a01b036040840151166040850152606083015160608501526080830151613999608086018261392d565b509392505050565b60008282518085526020808601955060208260051b8401016020860160005b848110156124a157601f198684030189526139dc838351613941565b988401989250908301906001016139c0565b602080825282516001600160a01b03168282015282810151604080840152805160608401819052600092916080919083019082860190600581901b87018401865b82811015613aa957607f198983030184528451805180516001600160a01b0316845260208082015163ffffffff169085015260408082015160ff90811691860191909152606091820151169084015287015160a0878401819052613a95818501836139a1565b968901969589019593505050600101613a2f565b5098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561047957610479613ab6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6001600160e01b031992909216825260ff16602082015260400190565b600060208284031215613b3a57600080fd5b813561315181613187565b8135613b5081613187565b81546001600160a01b031981166001600160a01b039290921691821783556020840135613b7c81613158565b63ffffffff60a01b60a09190911b166001600160c01b031982168317811784556040850135613baa816131e0565b60ff60c01b60c09190911b166001600160c81b0319831684178217811785556060860135613bd7816131e0565b6001600160d01b031993909316909317179190911760c89190911b60ff60c81b1617905550565b63ffffffff868116825285811660208301526101008201908535613c2181613187565b6001600160a01b039081166040850152602087013590613c4082613158565b9181166060850152604087013591613c57836131e0565b60ff8316608086015260608801359250613c70836131e0565b60ff9290921660a0850152509390931660c082015260e001529392505050565b60008235609e19833603018112613ca657600080fd5b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715613ce857613ce8613cb0565b60405290565b604080519081016001600160401b0381118282101715613ce857613ce8613cb0565b604051608081016001600160401b0381118282101715613ce857613ce8613cb0565b604051606081016001600160401b0381118282101715613ce857613ce8613cb0565b604051601f8201601f191681016001600160401b0381118282101715613d7c57613d7c613cb0565b604052919050565b60006001600160401b03821115613d9d57613d9d613cb0565b5060051b60200190565b60006001600160401b03821115613dc057613dc0613cb0565b50601f01601f191660200190565b80356002811061313157600080fd5b600082601f830112613dee57600080fd5b81356020613e03613dfe83613d84565b613d54565b82815260059290921b84018101918181019086841115613e2257600080fd5b8286015b84811015613f155780356001600160401b0380821115613e465760008081fd5b9088019060a0828b03601f1901811315613e605760008081fd5b613e68613cc6565b613e73888501613119565b815260408085013584811115613e895760008081fd5b85019350603f84018d13613e9d5760008081fd5b88840135613ead613dfe82613da7565b8181528e83838801011115613ec25760008081fd5b818387018c83013760008b8383010152808b850152505060609350613ee884860161319c565b9082015260808481013584830152613f01838601613dce565b908201528652505050918301918301613e26565b509695505050505050565b600081360360a0811215613f3357600080fd5b613f3b613cee565b6080821215613f4957600080fd5b613f51613d10565b91508335613f5e81613187565b82526020840135613f6e81613158565b60208301526040840135613f81816131e0565b60408301526060840135613f94816131e0565b60608301529081526080830135906001600160401b03821115613fb657600080fd5b613fc236838601613ddd565b60208201529392505050565b600181811c90821680613fe257607f821691505b60208210810361400257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115612667576000816000526020600020601f850160051c810160208610156140315750805b601f850160051c820191505b818110156126495782815560010161403d565b81516001600160401b0381111561406957614069613cb0565b61407d816140778454613fce565b84614008565b602080601f8311600181146140b2576000841561409a5750858301515b600019600386901b1c1916600185901b178555612649565b600085815260208120601f198616915b828110156140e1578886015182559484019460019091019084016140c2565b50858210156140ff5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff8416815260018060a01b03831660208201526060604082015260018060a01b03825416606082015260406080820152600060a08201600184015480825260c08401915060c08160051b85010160018601600052602060002060005b838110156142fc5760bf1980888503018652825460018060a01b038116855263ffffffff8160a01c16602086015260ff8160c01c16604086015260ff8160c81c1660608601525060a0608085015260a08401600184015480825260c08601915060c08160051b87010160018601600052602060002060005b838110156142df5788830386018552815460e01b6001600160e01b031916835260a06020840152600182015460009061421f81613fce565b8060a0870152600182166000811461423e576001811461425a57614291565b60ff19831660c088015260c082151560051b8801019350614291565b60018601600052602060002060005b8381101561428857815489820160c00152600190910190602001614269565b880160c0019450505b50505060028301546001600160a01b0316604085015260038301546060850152600483015460ff166142c6608086018261392d565b50602095909501949250600591909101906001016141e7565b50506020989098019795505050600292909201915060010161416f565b509098975050505050505050565b60018060a01b0384168152826020820152606060408201526000614331606083018461331a565b95945050505050565b600082601f83011261434b57600080fd5b8151614359613dfe82613da7565b81815284602083860101111561436e57600080fd5b61437f8260208301602087016132f6565b949350505050565b60006020828403121561439957600080fd5b81516001600160401b038111156143af57600080fd5b61437f8482850161433a565b8051801515811461313157600080fd5b6000602082840312156143dd57600080fd5b613151826143bb565b6000602082840312156143f857600080fd5b8151613151816131e0565b60006020828403121561441557600080fd5b5051919050565b8082018082111561047957610479613ab6565b63ffffffff8416815261ffff8316602082015260606040820152600061433160608301846139a1565b6001600160a01b03841681526001600160e01b0319831660208201526060604082018190526000906143319083018461331a565b6000806040838503121561449f57600080fd5b82516144aa81613187565b91506144b8602084016143bb565b90509250929050565b6000604082840312156144d357600080fd5b6144db613cee565b8251600381106144ea57600080fd5b81526020928301519281019290925250919050565b6020810160038310614513576145136136de565b91905290565b6020815260006131516020830184613941565b6001600160e01b031983168152815160009061454f8160048501602087016132f6565b919091016004019392505050565b60008251613ca68184602087016132f6565b6000602080838503121561458257600080fd5b82516001600160401b038082111561459957600080fd5b818501915085601f8301126145ad57600080fd5b81516145bb613dfe82613d84565b81815260059190911b830184019084810190888311156145da57600080fd5b8585015b83811015613aa9578051858111156145f65760008081fd5b86016060818c03601f190181131561460e5760008081fd5b614616613d32565b8983015161462381613187565b81526040838101518b8301529183015191888311156146425760008081fd5b6146508e8c8587010161433a565b90820152855250509186019186016145de56fea2646970667358221220b87fce9d5066f992db268cf286d0e28300bd5535e60f867cdd266b24f962292164736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onInstall(bytes)": {
        "details": "Called by the modular account during `installPlugin`.",
        "params": {
          "data": "Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the modular account."
        }
      },
      "onUninstall(bytes)": {
        "details": "Called by the modular account during `uninstallPlugin`.",
        "params": {
          "data": "Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular account."
        }
      },
      "pluginManifest()": {
        "details": "This manifest MUST stay constant over time.",
        "returns": {
          "_0": "A manifest describing the contents and intended configuration of the plugin."
        }
      },
      "pluginMetadata()": {
        "details": "This metadata MUST stay constant over time.",
        "returns": {
          "_0": "A metadata struct describing the plugin."
        }
      },
      "postExecutionHook(uint8,bytes)": {
        "details": "To indicate the entire call should revert, the function MUST revert.",
        "params": {
          "functionId": "An identifier that routes the call to different internal implementations, should there be more than one.",
          "preExecHookData": "The context returned by its associated pre execution hook."
        }
      },
      "preExecutionHook(uint8,address,uint256,bytes)": {
        "details": "To indicate the entire call should revert, the function MUST revert.",
        "params": {
          "data": "The calldata sent.",
          "functionId": "An identifier that routes the call to different internal implementations, should there be more than one.",
          "sender": "The caller address.",
          "value": "The call value."
        },
        "returns": {
          "_0": "Context to pass to a post execution hook, if present. An empty bytes array MAY be returned."
        }
      },
      "preRuntimeValidationHook(uint8,address,uint256,bytes)": {
        "details": "To indicate the entire call should revert, the function MUST revert.",
        "params": {
          "data": "The calldata sent.",
          "functionId": "An identifier that routes the call to different internal implementations, should there be more than one.",
          "sender": "The caller address.",
          "value": "The call value."
        }
      },
      "preUserOpValidationHook(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)": {
        "details": "Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.",
        "params": {
          "functionId": "An identifier that routes the call to different internal implementations, should there be more than one.",
          "userOp": "The user operation.",
          "userOpHash": "The user operation hash."
        },
        "returns": {
          "_0": "Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes)."
        }
      },
      "runtimeValidationFunction(uint8,address,uint256,bytes)": {
        "details": "To indicate the entire call should revert, the function MUST revert.",
        "params": {
          "data": "The calldata sent.",
          "functionId": "An identifier that routes the call to different internal implementations, should there be more than one.",
          "sender": "The caller address.",
          "value": "The call value."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas. Supporting the IPlugin interface is a requirement for plugin installation. This is also used by the modular account to prevent standard execution functions `execute`, `executeBatch`, and `executeFromPluginExternal` from making calls to plugins.",
        "params": {
          "interfaceId": "The interface ID to check for support."
        },
        "returns": {
          "_0": "True if the contract supports `interfaceId`."
        }
      },
      "userOpValidationFunction(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)": {
        "params": {
          "functionId": "An identifier that routes the call to different internal implementations, should there be more than one.",
          "userOp": "The user operation.",
          "userOpHash": "The user operation hash."
        },
        "returns": {
          "_0": "Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes)."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "onInstall(bytes)": {
        "notice": "Initialize plugin data for the modular account."
      },
      "onUninstall(bytes)": {
        "notice": "Clear plugin data for the modular account."
      },
      "pluginManifest()": {
        "notice": "Describe the contents and intended configuration of the plugin."
      },
      "pluginMetadata()": {
        "notice": "Describe the metadata of the plugin."
      },
      "postExecutionHook(uint8,bytes)": {
        "notice": "Run the post execution hook specified by the `functionId`."
      },
      "preExecutionHook(uint8,address,uint256,bytes)": {
        "notice": "Run the pre execution hook specified by the `functionId`."
      },
      "preRuntimeValidationHook(uint8,address,uint256,bytes)": {
        "notice": "Run the pre runtime validation hook specified by the `functionId`."
      },
      "preUserOpValidationHook(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)": {
        "notice": "Run the pre user operation validation hook specified by the `functionId`."
      },
      "runtimeValidationFunction(uint8,address,uint256,bytes)": {
        "notice": "Run the runtime validationFunction specified by the `functionId`."
      },
      "userOpValidationFunction(uint8,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32)": {
        "notice": "Run the user operation validationFunction specified by the `functionId`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5538,
        "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
        "label": "strategies",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Strategy)11593_storage)"
      },
      {
        "astId": 5543,
        "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
        "label": "strategiesUsed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_array(t_uint32)dyn_storage)"
      },
      {
        "astId": 5547,
        "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
        "label": "automationsToIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint32)"
      },
      {
        "astId": 5552,
        "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
        "label": "automations",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(Automation)11603_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Action)11569_storage)dyn_storage": {
        "base": "t_struct(Action)11569_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyBuilderPlugin.Action[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StrategyStep)11586_storage)dyn_storage": {
        "base": "t_struct(StrategyStep)11586_storage",
        "encoding": "dynamic_array",
        "label": "struct IStrategyBuilderPlugin.StrategyStep[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ActionType)11557": {
        "encoding": "inplace",
        "label": "enum IStrategyBuilderPlugin.ActionType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(Automation)11603_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IStrategyBuilderPlugin.Automation)",
        "numberOfBytes": "32",
        "value": "t_struct(Automation)11603_storage"
      },
      "t_mapping(t_bytes32,t_struct(Strategy)11593_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IStrategyBuilderPlugin.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)11593_storage"
      },
      "t_mapping(t_bytes32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(Action)11569_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyBuilderPlugin.Action",
        "members": [
          {
            "astId": 11559,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "selector",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes4"
          },
          {
            "astId": 11561,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "parameter",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 11563,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11565,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "value",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11568,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "actionType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ActionType)11557"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Automation)11603_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyBuilderPlugin.Automation",
        "members": [
          {
            "astId": 11596,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "condition",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Condition)11578_storage"
          },
          {
            "astId": 11598,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "strategyId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 11600,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "paymentToken",
            "offset": 4,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11602,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "maxFeeAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Condition)11578_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyBuilderPlugin.Condition",
        "members": [
          {
            "astId": 11571,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "conditionAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11573,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "id",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11575,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "result1",
            "offset": 24,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 11577,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "result0",
            "offset": 25,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)11593_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyBuilderPlugin.Strategy",
        "members": [
          {
            "astId": 11588,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11592,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "steps",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(StrategyStep)11586_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyStep)11586_storage": {
        "encoding": "inplace",
        "label": "struct IStrategyBuilderPlugin.StrategyStep",
        "members": [
          {
            "astId": 11581,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "condition",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Condition)11578_storage"
          },
          {
            "astId": 11585,
            "contract": "src/StrategyBuilderPlugin.sol:StrategyBuilderPlugin",
            "label": "actions",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Action)11569_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}