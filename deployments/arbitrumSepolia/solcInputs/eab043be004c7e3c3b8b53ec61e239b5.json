{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "modular-account-libs/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n// Ported from @openzeppelin/contracts@v5.0.2\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "modular-account-libs/interfaces/IPlugin.sol": {
      "content": "// This work is marked with CC0 1.0 Universal.\n//\n// SPDX-License-Identifier: CC0-1.0\n//\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\n\npragma solidity ^0.8.20;\n\nimport {UserOperation} from \"./UserOperation.sol\";\n\nenum ManifestAssociatedFunctionType {\n    // Function is not defined.\n    NONE,\n    // Function belongs to this plugin.\n    SELF,\n    // Function belongs to an external plugin provided as a dependency during plugin installation. Plugins MAY depend\n    // on external validation functions. It MUST NOT depend on external hooks, or installation will fail.\n    DEPENDENCY,\n    // Resolves to a magic value to always bypass runtime validation for a given function.\n    // This is only assignable on runtime validation functions. If it were to be used on a user op validation function,\n    // it would risk burning gas from the account. When used as a hook in any hook location, it is equivalent to not\n    // setting a hook and is therefore disallowed.\n    RUNTIME_VALIDATION_ALWAYS_ALLOW,\n    // Resolves to a magic value to always fail in a hook for a given function.\n    // This is only assignable to pre hooks (pre validation and pre execution). It should not be used on\n    // validation functions themselves, because this is equivalent to leaving the validation functions unset.\n    // It should not be used in post-exec hooks, because if it is known to always revert, that should happen\n    // as early as possible to save gas.\n    PRE_HOOK_ALWAYS_DENY\n}\n\n/// @dev For functions of type `ManifestAssociatedFunctionType.DEPENDENCY`, the MSCA MUST find the plugin address\n/// of the function at `dependencies[dependencyIndex]` during the call to `installPlugin(config)`.\nstruct ManifestFunction {\n    ManifestAssociatedFunctionType functionType;\n    uint8 functionId;\n    uint256 dependencyIndex;\n}\n\nstruct ManifestAssociatedFunction {\n    bytes4 executionSelector;\n    ManifestFunction associatedFunction;\n}\n\nstruct ManifestExecutionHook {\n    bytes4 executionSelector;\n    ManifestFunction preExecHook;\n    ManifestFunction postExecHook;\n}\n\nstruct ManifestExternalCallPermission {\n    address externalAddress;\n    bool permitAnySelector;\n    bytes4[] selectors;\n}\n\nstruct SelectorPermission {\n    bytes4 functionSelector;\n    string permissionDescription;\n}\n\n/// @dev A struct holding fields to describe the plugin in a purely view context. Intended for front end clients.\nstruct PluginMetadata {\n    // A human-readable name of the plugin.\n    string name;\n    // The version of the plugin, following the semantic versioning scheme.\n    string version;\n    // The author field SHOULD be a username representing the identity of the user or organization\n    // that created this plugin.\n    string author;\n    // String descriptions of the relative sensitivity of specific functions. The selectors MUST be selectors for\n    // functions implemented by this plugin.\n    SelectorPermission[] permissionDescriptors;\n}\n\n/// @dev A struct describing how the plugin should be installed on a modular account.\nstruct PluginManifest {\n    // List of ERC-165 interface IDs to add to account to support introspection checks. This MUST NOT include\n    // IPlugin's interface ID.\n    bytes4[] interfaceIds;\n    // If this plugin depends on other plugins' validation functions, the interface IDs of those plugins MUST be\n    // provided here, with its position in the array matching the `dependencyIndex` members of `ManifestFunction`\n    // structs used in the manifest.\n    bytes4[] dependencyInterfaceIds;\n    // Execution functions defined in this plugin to be installed on the MSCA.\n    bytes4[] executionFunctions;\n    // Plugin execution functions already installed on the MSCA that this plugin will be able to call.\n    bytes4[] permittedExecutionSelectors;\n    // Boolean to indicate whether the plugin can call any external address.\n    bool permitAnyExternalAddress;\n    // Boolean to indicate whether the plugin needs access to spend native tokens of the account. If false, the\n    // plugin MUST still be able to spend up to the balance that it sends to the account in the same call.\n    bool canSpendNativeToken;\n    ManifestExternalCallPermission[] permittedExternalCalls;\n    ManifestAssociatedFunction[] userOpValidationFunctions;\n    ManifestAssociatedFunction[] runtimeValidationFunctions;\n    ManifestAssociatedFunction[] preUserOpValidationHooks;\n    ManifestAssociatedFunction[] preRuntimeValidationHooks;\n    ManifestExecutionHook[] executionHooks;\n}\n\n/// @title Plugin Interface\ninterface IPlugin {\n    /// @notice Initialize plugin data for the modular account.\n    /// @dev Called by the modular account during `installPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\n    /// modular account.\n    function onInstall(bytes calldata data) external;\n\n    /// @notice Clear plugin data for the modular account.\n    /// @dev Called by the modular account during `uninstallPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular\n    /// account.\n    function onUninstall(bytes calldata data) external;\n\n    /// @notice Run the pre user operation validation hook specified by the `functionId`.\n    /// @dev Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function preUserOpValidationHook(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        returns (uint256);\n\n    /// @notice Run the user operation validationFunction specified by the `functionId`.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function userOpValidationFunction(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        returns (uint256);\n\n    /// @notice Run the pre runtime validation hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function preRuntimeValidationHook(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\n\n    /// @notice Run the runtime validationFunction specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function runtimeValidationFunction(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\n\n    /// @notice Run the pre execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    /// @return Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\n    function preExecutionHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        returns (bytes memory);\n\n    /// @notice Run the post execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param preExecHookData The context returned by its associated pre execution hook.\n    function postExecutionHook(uint8 functionId, bytes calldata preExecHookData) external;\n\n    /// @notice Describe the contents and intended configuration of the plugin.\n    /// @dev This manifest MUST stay constant over time.\n    /// @return A manifest describing the contents and intended configuration of the plugin.\n    function pluginManifest() external pure returns (PluginManifest memory);\n\n    /// @notice Describe the metadata of the plugin.\n    /// @dev This metadata MUST stay constant over time.\n    /// @return A metadata struct describing the plugin.\n    function pluginMetadata() external pure returns (PluginMetadata memory);\n}\n"
    },
    "modular-account-libs/interfaces/IPluginExecutor.sol": {
      "content": "// This work is marked with CC0 1.0 Universal.\n//\n// SPDX-License-Identifier: CC0-1.0\n//\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\n\npragma solidity ^0.8.20;\n\n/// @title Plugin Executor Interface\ninterface IPluginExecutor {\n    /// @notice Execute a call from a plugin through the account.\n    /// @dev Permissions must be granted to the calling plugin for the call to go through.\n    /// @param data The calldata to send to the account.\n    /// @return The return data from the call.\n    function executeFromPlugin(bytes calldata data) external payable returns (bytes memory);\n\n    /// @notice Execute a call from a plugin to a non-plugin address.\n    /// @dev If the target is a plugin, the call SHOULD revert. Permissions must be granted to the calling plugin\n    /// for the call to go through.\n    /// @param target The address to be called.\n    /// @param value The value to send with the call.\n    /// @param data The calldata to send to the target.\n    /// @return The return data from the call.\n    function executeFromPluginExternal(address target, uint256 value, bytes calldata data)\n        external\n        payable\n        returns (bytes memory);\n}\n"
    },
    "modular-account-libs/interfaces/UserOperation.sol": {
      "content": "// This work is marked with CC0 1.0 Universal.\n//\n// SPDX-License-Identifier: CC0-1.0\n//\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\n\npragma solidity ^0.8.20;\n\n/// @notice User Operation struct as defined in ERC-4337 v0.6\nstruct UserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    uint256 callGasLimit;\n    uint256 verificationGasLimit;\n    uint256 preVerificationGas;\n    uint256 maxFeePerGas;\n    uint256 maxPriorityFeePerGas;\n    bytes paymasterAndData;\n    bytes signature;\n}\n"
    },
    "modular-account-libs/plugins/BasePlugin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n// See LICENSE-MIT file for more information\n\npragma solidity ^0.8.20;\n\nimport {ERC165} from \"./ERC165.sol\";\n\nimport {UserOperation} from \"../interfaces/UserOperation.sol\";\nimport {IPlugin, PluginManifest, PluginMetadata} from \"../interfaces/IPlugin.sol\";\n\n/// @title Base contract for plugins\n/// @dev Implements ERC-165 to support IPlugin's interface, which is a requirement\n/// for plugin installation. This also ensures that plugin interactions cannot\n/// happen via the standard execution funtions `execute`, `executeBatch`, and `executeFromPluginExternal`.\n/// Note that the plugins implementing BasePlugin cannot be installed within the account constructor. unless\n/// `onInstall` is overriden to not check the codesize of caller. The codesize check is done to prevent an EOA\n/// from accidentally calling the plugin and initiating state, which will make it unusable in the future when EOAs\n/// can be upgraded to smart contract accounts.\nabstract contract BasePlugin is ERC165, IPlugin {\n    error AlreadyInitialized();\n    error InvalidAction();\n    error NotContractCaller(address caller);\n    error NotImplemented(bytes4 selector, uint8 functionId);\n    error NotInitialized();\n\n    modifier isNotInitialized(address account) {\n        if (_isInitialized(account)) {\n            revert AlreadyInitialized();\n        }\n        _;\n    }\n\n    modifier isInitialized(address account) {\n        if (!_isInitialized(account)) {\n            revert NotInitialized();\n        }\n        _;\n    }\n\n    modifier staysInitialized(address account) {\n        if (!_isInitialized(account)) {\n            revert NotInitialized();\n        }\n        _;\n        if (!_isInitialized(account)) {\n            revert InvalidAction();\n        }\n    }\n\n    /// @notice Initialize plugin data for the modular account.\n    /// @dev Called by the modular account during `installPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\n    /// modular account.\n    function onInstall(bytes calldata data) external virtual {\n        if (msg.sender.code.length == 0) {\n            revert NotContractCaller(msg.sender);\n        }\n        _onInstall(data);\n    }\n\n    /// @notice Clear plugin data for the modular account.\n    /// @dev Called by the modular account during `uninstallPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular\n    /// account.\n    function onUninstall(bytes calldata data) external virtual {\n        (data);\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @notice Run the pre user operation validation hook specified by the `functionId`.\n    /// @dev Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function preUserOpValidationHook(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        virtual\n        returns (uint256)\n    {\n        (functionId, userOp, userOpHash);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the user operation validationFunction specified by the `functionId`.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function userOpValidationFunction(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        virtual\n        returns (uint256)\n    {\n        (functionId, userOp, userOpHash);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the pre runtime validation hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function preRuntimeValidationHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        virtual\n    {\n        (functionId, sender, value, data);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the runtime validationFunction specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function runtimeValidationFunction(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        virtual\n    {\n        (functionId, sender, value, data);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the pre execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    /// @return Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\n    function preExecutionHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        virtual\n        returns (bytes memory)\n    {\n        (functionId, sender, value, data);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the post execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param preExecHookData The context returned by its associated pre execution hook.\n    function postExecutionHook(uint8 functionId, bytes calldata preExecHookData) external virtual {\n        (functionId, preExecHookData);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Describe the contents and intended configuration of the plugin.\n    /// @dev This manifest MUST stay constant over time.\n    /// @return A manifest describing the contents and intended configuration of the plugin.\n    function pluginManifest() external pure virtual returns (PluginManifest memory) {\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @notice Describe the metadata of the plugin.\n    /// @dev This metadata MUST stay constant over time.\n    /// @return A metadata struct describing the plugin.\n    function pluginMetadata() external pure virtual returns (PluginMetadata memory) {\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by\n    /// `interfaceId`. See the corresponding\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    /// to learn more about how these ids are created.\n    ///\n    /// This function call must use less than 30 000 gas.\n    ///\n    /// Supporting the IPlugin interface is a requirement for plugin installation. This is also used\n    /// by the modular account to prevent standard execution functions `execute`, `executeBatch`, and\n    /// `executeFromPluginExternal` from making calls to plugins.\n    /// @param interfaceId The interface ID to check for support.\n    /// @return True if the contract supports `interfaceId`.\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IPlugin).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Initialize plugin data for the modular account.\n    /// @dev Called by the modular account during `installPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\n    /// modular account.\n    function _onInstall(bytes calldata data) internal virtual {\n        (data);\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @notice Check if the account has initialized this plugin yet\n    /// @dev This function should be overwritten for plugins that have state-changing onInstall's\n    /// @param account The account to check\n    /// @return True if the account has initialized this plugin\n    // solhint-disable-next-line no-empty-blocks\n    function _isInitialized(address account) internal view virtual returns (bool) {}\n}\n"
    },
    "modular-account-libs/plugins/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n// Ported from @openzeppelin/contracts@v5.0.2\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../interfaces/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "src/actions/uniswap-v2/interfaces/IUniswapV2Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IAction} from \"../../../interfaces/IAction.sol\";\nimport {ITokenGetter} from \"../../../interfaces/ITokenGetter.sol\";\n\ninterface IUniswapV2Base is IAction, ITokenGetter {\n    // ┏━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Errors       ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━┛\n    error FailedToApproveTokens();\n    error PoolPairDoesNotExist();\n    error NotZeroAmountForBothTokensAllowed();\n    error NoValidPercentageAmount();\n    error NoZeroAmountValid();\n    error InvalidTokenGetterID();\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃     View Functions     ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function uniswapV2RouterAddress() external view returns (address);\n}\n"
    },
    "src/actions/uniswap-v2/interfaces/IUniswapV2LPActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IAction} from \"../../../interfaces/IAction.sol\";\n\ninterface IUniswapV2LPActions is IAction {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Execution functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) external view returns (PluginExecution[] memory);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHDesired,\n        uint256 amountETHMin,\n        address to\n    ) external view returns (PluginExecution[] memory);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) external view returns (PluginExecution[] memory);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to\n    ) external view returns (PluginExecution[] memory);\n\n    function addLiqudityPercentage(address tokenA, address tokenB, uint256 percentage, address wallet)\n        external\n        view\n        returns (PluginExecution[] memory);\n\n    function addLiqudityPercentageETH(address token, uint256 percentage, address wallet)\n        external\n        view\n        returns (PluginExecution[] memory);\n\n    function removeLiquidityETHPercentage(address token, uint256 liquidityPercentage, address to)\n        external\n        view\n        returns (PluginExecution[] memory);\n\n    function removeLiquidityPercentage(address tokenA, address tokenB, uint256 percentageLiquidity, address to)\n        external\n        view\n        returns (PluginExecution[] memory);\n\n    function zap(address tokenA, address tokenB, uint256 amountIn, address to)\n        external\n        view\n        returns (PluginExecution[] memory);\n\n    function zapETH(address token, uint256 amountIn, bool inputETH, address to)\n        external\n        view\n        returns (PluginExecution[] memory);\n}\n"
    },
    "src/actions/uniswap-v2/UniswapV2Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Pair} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IUniswapV2Base} from \"./interfaces/IUniswapV2Base.sol\";\n\ncontract UniswapV2Base is IUniswapV2Base {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃     State Variables       ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    uint256 public constant DELTA_DEADLINE = 30 seconds;\n    uint256 public constant PERCENTAGE_FACTOR = 1000;\n\n    address public immutable router;\n    address public immutable factory;\n    address public immutable WETH;\n\n    mapping(bytes4 => uint8) public tokenGetterIDs;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Modifier            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    modifier validPercentage(uint256 percentage) {\n        if (percentage == 0 || percentage > PERCENTAGE_FACTOR) {\n            revert NoValidPercentageAmount();\n        }\n        _;\n    }\n\n    modifier nonZeroAmount(uint256 amount) {\n        if (amount == 0) {\n            revert NoZeroAmountValid();\n        }\n        _;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _router) {\n        router = _router;\n\n        WETH = IUniswapV2Router01(router).WETH();\n        factory = IUniswapV2Router01(router).factory();\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Internal functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _percentageShare(address token, uint256 percentage, address account) internal view returns (uint256) {\n        uint256 totalTokenAmount = IERC20(token).balanceOf(account);\n        return (percentage * totalTokenAmount) / PERCENTAGE_FACTOR;\n    }\n\n    function _percentageShareETH(uint256 percentage, address account) internal view returns (uint256) {\n        uint256 totalBalanceETH = account.balance;\n        return (totalBalanceETH * percentage) / PERCENTAGE_FACTOR;\n    }\n\n    function _approveToken(address token, uint256 amount) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(IERC20.approve, (address(router), amount));\n\n        return PluginExecution({target: token, value: 0, data: _data});\n    }\n\n    function _getMaxAmountIn(address[] memory path, uint256 amountOut) internal view returns (uint256) {\n        return IUniswapV2Router01(router).getAmountsIn(amountOut, path)[0];\n    }\n\n    function _deadline() internal view returns (uint256) {\n        return block.timestamp + DELTA_DEADLINE;\n    }\n\n    function _swap(address tokenIn, address tokenOut, uint256 amountIn, address to)\n        internal\n        view\n        returns (uint256, PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(tokenIn, amountIn);\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n\n        uint256[] memory amountsOut = IUniswapV2Router01(router).getAmountsOut(amountIn, path);\n        executions[1] = _swapExactTokensForTokens(amountIn, 0, path, to, _deadline());\n\n        return (amountsOut[1], executions);\n    }\n\n    function _swapETH(address token, uint256 amountIn, address to)\n        internal\n        view\n        returns (uint256, PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](1);\n\n        address[] memory path = new address[](2);\n        path[0] = WETH;\n        path[1] = token;\n\n        uint256[] memory amountsOut = IUniswapV2Router01(router).getAmountsOut(amountIn, path);\n        executions[0] = _swapExactETHForTokens(amountIn, 0, path, to, _deadline());\n\n        return (amountsOut[1], executions);\n    }\n\n    function _swapToETH(address token, uint256 amountIn, address to)\n        internal\n        view\n        returns (uint256, PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(token, amountIn);\n\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = WETH;\n\n        uint256[] memory amountsOut = IUniswapV2Router01(router).getAmountsOut(amountIn, path);\n        executions[1] = _swapExactTokensForETH(amountIn, 0, path, to, _deadline());\n\n        return (amountsOut[1], executions);\n    }\n\n    function _swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactTokensForTokens, (amountIn, amountOutMin, path, to, deadline));\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactTokensForETH, (amountIn, amountOutMin, path, to, deadline));\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _swapExactETHForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactETHForTokens, (amountOutMin, path, to, deadline));\n\n        return PluginExecution({target: router, value: amountIn, data: _data});\n    }\n\n    function _calculateSwapAmountForProvidingLiquidity(address pair, address tokenA, uint256 amountIn)\n        internal\n        view\n        returns (uint256)\n    {\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\n\n        if (IUniswapV2Pair(pair).token0() == tokenA) {\n            return _getSwapAmount(reserve0, amountIn);\n        } else {\n            return _getSwapAmount(reserve1, amountIn);\n        }\n    }\n\n    function uniswapV2RouterAddress() external view returns (address) {\n        return address(router);\n    }\n\n    function getTokenForSelector(bytes4, bytes memory) external view virtual returns (address) {\n        return address(0);\n    }\n\n    /*\n    s = optimal swap amount\n    r = amount of reserve for token a\n    a = amount of token a the user currently has (not added to reserve yet)\n    f = swap fee percent\n    s = (sqrt(((2 - f)r)^2 + 4(1 - f)ar) - (2 - f)r) / (2(1 - f))\n    */\n    function _getSwapAmount(uint256 r, uint256 a) public pure returns (uint256) {\n        return (sqrt(r * (r * 3988009 + a * 3988000)) - r * 1997) / 1994;\n    }\n\n    function sqrt(uint256 y) private pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "src/actions/uniswap-v2/UniswapV2LPActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {UniswapV2Base} from \"./UniswapV2Base.sol\";\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Pair} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IUniswapV2LPActions} from \"./interfaces/IUniswapV2LPActions.sol\";\n\ncontract UniswapV2LPActions is UniswapV2Base, IUniswapV2LPActions {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _router) UniswapV2Base(_router) {\n        tokenGetterIDs[IUniswapV2LPActions.addLiquidityETH.selector] = 1;\n        tokenGetterIDs[IUniswapV2LPActions.addLiqudityPercentageETH.selector] = 1;\n        tokenGetterIDs[IUniswapV2LPActions.removeLiquidityETH.selector] = 1;\n        tokenGetterIDs[IUniswapV2LPActions.removeLiquidityETHPercentage.selector] = 1;\n        tokenGetterIDs[IUniswapV2LPActions.zapETH.selector] = 1;\n\n        tokenGetterIDs[IUniswapV2LPActions.addLiquidity.selector] = 2;\n\n        tokenGetterIDs[IUniswapV2LPActions.removeLiquidity.selector] = 3;\n\n        tokenGetterIDs[IUniswapV2LPActions.zap.selector] = 4;\n        tokenGetterIDs[IUniswapV2LPActions.removeLiquidityPercentage.selector] = 4;\n        tokenGetterIDs[IUniswapV2LPActions.addLiqudityPercentage.selector] = 4;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Base LP PluginExecution Functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) public view returns (PluginExecution[] memory) {\n        if (amountADesired == 0 && amountBDesired == 0) {\n            revert NotZeroAmountForBothTokensAllowed();\n        }\n\n        if (amountADesired == 0) {\n            amountADesired = _calculateAmountForLP(tokenB, amountBDesired, _getPoolPair(tokenA, tokenB));\n        }\n\n        if (amountBDesired == 0) {\n            amountBDesired = _calculateAmountForLP(tokenA, amountADesired, _getPoolPair(tokenA, tokenB));\n        }\n\n        PluginExecution[] memory executions = new PluginExecution[](3);\n\n        executions[0] = _approveToken(tokenA, amountADesired);\n        executions[1] = _approveToken(tokenB, amountBDesired);\n\n        executions[2] =\n            _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, _deadline());\n\n        return executions;\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHDesired,\n        uint256 amountETHMin,\n        address to\n    ) public view returns (PluginExecution[] memory) {\n        if (amountTokenDesired == 0 && amountETHDesired == 0) {\n            revert NotZeroAmountForBothTokensAllowed();\n        }\n\n        if (amountTokenDesired == 0) {\n            amountTokenDesired = _calculateAmountForLP(WETH, amountETHDesired, _getPoolPair(token, WETH));\n        }\n\n        if (amountETHDesired == 0) {\n            amountETHDesired = _calculateAmountForLP(token, amountTokenDesired, _getPoolPair(token, WETH));\n        }\n\n        PluginExecution[] memory executions = new PluginExecution[](2);\n        executions[0] = _approveToken(token, amountTokenDesired);\n\n        executions[1] =\n            _addLiquidityETH(token, amountETHDesired, amountTokenDesired, amountTokenMin, amountETHMin, to, _deadline());\n\n        return executions;\n    }\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) public view nonZeroAmount(liquidity) returns (PluginExecution[] memory) {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(_getPoolPair(tokenA, tokenB), liquidity);\n\n        executions[1] = _removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, _deadline());\n\n        return executions;\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to\n    ) public view nonZeroAmount(liquidity) returns (PluginExecution[] memory) {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n        executions[0] = _approveToken(_getPoolPair(token, WETH), liquidity);\n\n        executions[1] = _removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, _deadline());\n\n        return executions;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃   Percentage LP PluginExecution Functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function addLiqudityPercentage(address tokenA, address tokenB, uint256 percentage, address wallet)\n        external\n        view\n        validPercentage(percentage)\n        returns (PluginExecution[] memory)\n    {\n        address pair = _getPoolPair(tokenA, tokenB);\n\n        (uint256 maxAmountA, uint256 maxAmountB) = _getMaxAmounts(tokenA, tokenB, pair, wallet);\n\n        return addLiquidity(\n            tokenA,\n            tokenB,\n            (maxAmountA * percentage) / PERCENTAGE_FACTOR,\n            (maxAmountB * percentage) / PERCENTAGE_FACTOR,\n            0,\n            0,\n            wallet\n        );\n    }\n\n    function addLiqudityPercentageETH(address token, uint256 percentage, address wallet)\n        external\n        view\n        validPercentage(percentage)\n        returns (PluginExecution[] memory)\n    {\n        address pair = _getPoolPair(token, WETH);\n\n        (uint256 maxAmountToken, uint256 maxAmountETH) = _getMaxAmountsETH(token, pair, wallet);\n\n        return addLiquidityETH(\n            token,\n            maxAmountToken * percentage / PERCENTAGE_FACTOR,\n            0,\n            maxAmountETH * percentage / PERCENTAGE_FACTOR,\n            0,\n            wallet\n        );\n    }\n\n    function removeLiquidityETHPercentage(address token, uint256 liquidityPercentage, address to)\n        external\n        view\n        validPercentage(liquidityPercentage)\n        returns (PluginExecution[] memory)\n    {\n        return removeLiquidityETH(token, _percentageShare(_getPoolPair(token, WETH), liquidityPercentage, to), 0, 0, to);\n    }\n\n    function removeLiquidityPercentage(address tokenA, address tokenB, uint256 percentageLiquidity, address to)\n        external\n        view\n        validPercentage(percentageLiquidity)\n        returns (PluginExecution[] memory)\n    {\n        return removeLiquidity(\n            tokenA, tokenB, _percentageShare(_getPoolPair(tokenA, tokenB), percentageLiquidity, to), 0, 0, to\n        );\n    }\n\n    function zap(address tokenA, address tokenB, uint256 amountIn, address to)\n        external\n        view\n        returns (PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](5);\n\n        address pair = _getPoolPair(tokenA, tokenB);\n\n        uint256 swapAmount = _calculateSwapAmountForProvidingLiquidity(pair, tokenA, amountIn);\n\n        (uint256 amountTokenB, PluginExecution[] memory swapExecutions) = _swap(tokenA, tokenB, swapAmount, to);\n        PluginExecution[] memory lpExecutions =\n            addLiquidity(tokenA, tokenB, amountIn - swapAmount, amountTokenB, 0, 0, to);\n\n        executions[0] = swapExecutions[0];\n        executions[1] = swapExecutions[1];\n        executions[2] = lpExecutions[0];\n        executions[3] = lpExecutions[1];\n        executions[4] = lpExecutions[2];\n\n        return executions;\n    }\n\n    function zapETH(address token, uint256 amountIn, bool inputETH, address to)\n        external\n        view\n        returns (PluginExecution[] memory)\n    {\n        (uint256 amountToken, uint256 amountETH, PluginExecution[] memory swapExecutions) =\n            _swapToETHorETH(token, amountIn, inputETH, to);\n\n        PluginExecution[] memory executions = new PluginExecution[](swapExecutions.length + 2);\n\n        PluginExecution[] memory lpExecutions = addLiquidityETH(token, amountToken, 0, amountETH, 0, to);\n\n        executions[0] = swapExecutions[0];\n\n        if (swapExecutions.length == 1) {\n            executions[1] = lpExecutions[0];\n            executions[2] = lpExecutions[1];\n        } else {\n            executions[1] = swapExecutions[1];\n            executions[2] = lpExecutions[0];\n            executions[3] = lpExecutions[1];\n        }\n\n        return executions;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃   Internal Functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _getPoolPair(address tokenA, address tokenB) internal view returns (address) {\n        address _poolPair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n\n        if (_poolPair == address(0)) {\n            revert PoolPairDoesNotExist();\n        }\n\n        return _poolPair;\n    }\n\n    function _calculateAmountForLP(address token, uint256 amount, address poolPair)\n        internal\n        view\n        returns (uint256 amountForLp)\n    {\n        address token0 = IUniswapV2Pair(poolPair).token0();\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(poolPair).getReserves();\n\n        if (token0 == token) {\n            amountForLp = (amount * reserve1) / reserve0;\n        } else {\n            amountForLp = (amount * reserve0) / reserve1;\n        }\n    }\n\n    function _getMaxAmounts(address tokenA, address tokenB, address pair, address account)\n        internal\n        view\n        returns (uint256 maxAmountA, uint256 maxAmountB)\n    {\n        (uint112 _reserveA, uint112 _reserveB,) = IUniswapV2Pair(pair).getReserves();\n\n        uint112 reserveA;\n        uint112 reserveB;\n        if (IUniswapV2Pair(pair).token0() == tokenA) {\n            reserveA = _reserveA;\n            reserveB = _reserveB;\n        } else {\n            reserveA = _reserveB;\n            reserveB = _reserveA;\n        }\n\n        uint256 balanceA = IERC20(tokenA).balanceOf(account);\n        uint256 balanceB = IERC20(tokenB).balanceOf(account);\n\n        (maxAmountA, maxAmountB) = _calculateMaxAmounts(reserveA, reserveB, balanceA, balanceB);\n    }\n\n    function _getMaxAmountsETH(address token, address pair, address account)\n        internal\n        view\n        returns (uint256 maxAmountToken, uint256 maxAmountETH)\n    {\n        (uint112 reserveA, uint112 reserveB,) = IUniswapV2Pair(pair).getReserves();\n\n        uint112 reserveToken;\n        uint112 reserveETH;\n        if (IUniswapV2Pair(pair).token0() == token) {\n            reserveToken = reserveA;\n            reserveETH = reserveB;\n        } else {\n            reserveToken = reserveB;\n            reserveETH = reserveA;\n        }\n\n        uint256 balanceToken = IERC20(token).balanceOf(account);\n        uint256 balanceETH = account.balance;\n\n        (maxAmountToken, maxAmountETH) = _calculateMaxAmounts(reserveToken, reserveETH, balanceToken, balanceETH);\n    }\n\n    function _calculateMaxAmounts(uint112 reserveA, uint112 reserveB, uint256 balanceA, uint256 balanceB)\n        internal\n        view\n        returns (uint256 maxAmountA, uint256 maxAmountB)\n    {\n        maxAmountA = balanceA;\n        maxAmountB = balanceB;\n\n        uint256 requiredB = (balanceA * reserveB) / reserveA;\n\n        if (requiredB > balanceB) {\n            maxAmountA = (balanceB * reserveA) / reserveB;\n        } else {\n            maxAmountB = requiredB;\n        }\n    }\n\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.addLiquidity,\n            (tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _addLiquidityETH(\n        address token,\n        uint256 amountETHDesired,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.addLiquidityETH, (token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: amountETHDesired, data: _data});\n    }\n\n    function _removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.removeLiquidity, (tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.removeLiquidityETH, (token, liquidity, amountTokenMin, amountETHMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _swapToETHorETH(address token, uint256 amountIn, bool inputETH, address to)\n        internal\n        view\n        returns (uint256 amountToken, uint256 amountETH, PluginExecution[] memory swapExecutions)\n    {\n        address pair = _getPoolPair(WETH, token);\n\n        address tokenA = inputETH ? WETH : token;\n\n        uint256 swapAmount = _calculateSwapAmountForProvidingLiquidity(pair, tokenA, amountIn);\n\n        if (inputETH) {\n            (amountToken, swapExecutions) = _swapETH(token, swapAmount, to);\n            amountETH = amountIn - swapAmount;\n        } else {\n            (amountETH, swapExecutions) = _swapToETH(token, swapAmount, to);\n            amountToken = amountIn - swapAmount;\n        }\n    }\n\n    function getTokenForSelector(bytes4 selector, bytes memory params) external view override returns (address) {\n        uint8 tokenGetterID = tokenGetterIDs[selector];\n\n        if (tokenGetterID == 0 || tokenGetterID > 4) {\n            revert InvalidTokenGetterID();\n        }\n\n        if (tokenGetterID == 1) {\n            return address(0);\n        }\n\n        if (tokenGetterID == 2) {\n            (address token,,,,,,) = abi.decode(params, (address, address, uint256, uint256, uint256, uint256, address));\n            return token;\n        }\n\n        if (tokenGetterID == 3) {\n            (address token,,,,,) = abi.decode(params, (address, address, uint256, uint256, uint256, address));\n            return token;\n        } else {\n            (address token,,,) = abi.decode(params, (address, address, uint256, address));\n            return token;\n        }\n    }\n}\n"
    },
    "src/FeeHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IFeeHandler} from \"./interfaces/IFeeHandler.sol\";\nimport {IFeeReduction} from \"./interfaces/IFeeReduction.sol\";\n\ncontract FeeHandler is Ownable, IFeeHandler {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant PERCENTAGE_DIVISOR = 10000;\n    uint256 public constant MAX_PRIMARY_TOKEN_DISCOUNT = 5000;\n\n    address public vault;\n    address public treasury;\n    address public primaryToken;\n    address public reduction;\n\n    uint256 public beneficiaryPercentage;\n    uint256 public creatorPercentage;\n    uint256 public vaultPercentage;\n    uint256 public primaryTokenDiscount = 2000; // 20% expressed as 2000 / 10000\n\n    mapping(address token => bool) private allowedTokens;\n\n    constructor(\n        address _vault,\n        uint256 _beneficaryPercentage,\n        uint256 _creatorPercentage,\n        uint256 _vaultPercentage,\n        address _owner\n    ) {\n        _updateVault(_vault);\n        _updatePercentages(_beneficaryPercentage, _creatorPercentage, _vaultPercentage); // Default percentages: 30% beneficiary, 20% creator, 50% vault\n\n        _transferOwnership(_owner);\n    }\n\n    function handleFee(address token, uint256 amount, address beneficiary, address creator) external {\n        _validateAmount(amount);\n        _validateBeneficiary(beneficiary);\n\n        if (!allowedTokens[token]) {\n            revert TokenNotAllowed();\n        }\n\n       \n        (uint256 totalFee, uint256 treasuryFee) = _feeCalculation(amount, token);\n\n        (uint256 beneficiaryAmount, uint256 creatorAmount, uint256 vaultAmount) = _tokenDistribution(totalFee);\n\n        IERC20(token).safeTransferFrom(msg.sender, beneficiary, beneficiaryAmount);\n\n        if(creator!= address(0)){\n            IERC20(token).safeTransferFrom(msg.sender, creator, creatorAmount);\n        IERC20(token).safeTransferFrom(msg.sender, vault, vaultAmount);\n        }else{\n            \n        IERC20(token).safeTransferFrom(msg.sender, vault, vaultAmount +creatorAmount);\n        }\n        \n        if (treasuryFee > 0) {\n            IERC20(token).safeTransferFrom(msg.sender, treasury, treasuryFee);\n        }\n\n        emit FeeHandled(token, amount);\n    }\n\n    function handleFeeETH(address beneficiary, address creator) external payable {\n        if (!allowedTokens[address(0)]) {\n            revert TokenNotAllowed();\n        }\n\n        _validateBeneficiary(beneficiary);\n\n        uint256 amount = msg.value;\n        _validateAmount(amount);\n\n        (uint256 totalFee, uint256 treasuryFee) = _feeCalculation(amount, address(0));\n        (uint256 beneficiaryAmount, uint256 creatorAmount, uint256 vaultAmount) = _tokenDistribution(totalFee);\n\n        payable(beneficiary).transfer(beneficiaryAmount);\n\n        if(creator != address(0)){\n            payable(creator).transfer(creatorAmount);\n            payable(vault).transfer(vaultAmount);\n        }else{\n            payable(vault).transfer(vaultAmount+ creatorAmount);\n        }\n\n        if (treasuryFee > 0) {\n            payable(treasury).transfer(treasuryFee);\n        }\n      \n\n        emit FeeHandledETH(msg.value);\n    }\n\n    function activatePrimaryToken(address _token, address _treasury) external onlyOwner {\n        if (primaryTokenActive()) revert PrimaryTokenAlreadyActivated();\n        _validateAddress(_token);\n        _validateAddress(_treasury);\n        primaryToken = _token;\n        treasury = _treasury;\n        emit PrimaryTokenActivated(_token, _treasury);\n    }\n\n    function updateVault(address _vault) external onlyOwner {\n        _updateVault(_vault);\n    }\n\n    function updateReduction(address _reduction) external onlyOwner {\n        _validateAddress(_reduction);\n        reduction = _reduction;\n        emit UpdatedReduction(_reduction);\n    }\n\n    function updatePercentages(uint256 _beneficiary, uint256 _creator, uint256 _vault) external onlyOwner {\n        _updatePercentages(_beneficiary, _creator, _vault);\n    }\n\n    function updatePrimaryTokenDiscount(uint256 _discount) external onlyOwner {\n        if (_discount > MAX_PRIMARY_TOKEN_DISCOUNT) {\n            revert InvalidPrimaryTokenDiscount();\n        }\n        primaryTokenDiscount = _discount;\n        emit UpdatedPrimaryTokenDiscount(_discount);\n    }\n\n    function updateTokenAllowance(address token, bool allowed) external onlyOwner {\n        allowedTokens[token] = allowed;\n\n        emit UpdatedTokenAllowance(token, allowed);\n    }\n\n    function _updateVault(address _vault) internal {\n        _validateAddress(_vault);\n        vault = _vault;\n        emit UpdatedVault(_vault);\n    }\n\n    function _updatePercentages(uint256 _beneficiary, uint256 _creator, uint256 _vault) internal {\n        if (_beneficiary + _creator + _vault != PERCENTAGE_DIVISOR) revert InvalidPercentageDistribution();\n        beneficiaryPercentage = _beneficiary;\n        creatorPercentage = _creator;\n        vaultPercentage = _vault;\n        emit UpdatedPercentages(_beneficiary, _creator, _vault);\n    }\n\n    function _tokenDistribution(uint256 amount) internal view returns (uint256, uint256, uint256) {\n        uint256 beneficiaryAmount = (amount * beneficiaryPercentage) / PERCENTAGE_DIVISOR;\n        uint256 creatorAmount = (amount * creatorPercentage) / PERCENTAGE_DIVISOR;\n        uint256 vaultAmount = (amount * vaultPercentage) / PERCENTAGE_DIVISOR;\n\n        return (beneficiaryAmount, creatorAmount, vaultAmount);\n    }\n\n    function _feeCalculation(uint256 amount,address token) internal view returns (uint256,  uint256) {\n        uint256 totalFee = amount;\n        uint256 treasuryFee = 0;\n\n        if (reduction != address(0)) {\n            uint256 reductionPercentage = IFeeReduction(reduction).getFeeReduction(msg.sender);\n            totalFee = totalFee - totalFee * reductionPercentage / PERCENTAGE_DIVISOR;\n        }\n\n        if (primaryTokenActive() && primaryToken == token) {\n            uint256 feeDiscount = (amount * primaryTokenDiscount) / PERCENTAGE_DIVISOR;     \n            totalFee -= feeDiscount;    \n        }else if (primaryTokenActive()) {\n            treasuryFee = (amount * primaryTokenDiscount) / PERCENTAGE_DIVISOR;\n            totalFee -= treasuryFee;\n        }\n        return (totalFee,  treasuryFee);\n    }\n\n    function _validateAddress(address _addr) internal pure {\n        if (_addr == address(0)) {\n            revert ZeroAddressNotValid();\n        }\n    }\n\n    function _validateAmount(uint256 amount) internal pure {\n        if (amount == 0) revert InvalidAmount();\n    }\n\n    function _validateBeneficiary(address beneficiary) internal pure {\n        if (beneficiary == address(0) ) revert InvalidBeneficiary();\n    }\n\n    function primaryTokenActive() public view returns (bool) {\n        return primaryToken != address(0);\n    }\n\n    function tokenAllowed(address token) external view returns (bool) {\n        return allowedTokens[token];\n    }\n}\n"
    },
    "src/interfaces/IAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IAction {\n    struct PluginExecution {\n        address target;\n        uint256 value;\n        bytes data;\n    }\n}\n"
    },
    "src/interfaces/ICondition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface ICondition {\n    function checkCondition(address wallet, uint32 id) external view returns (uint8);\n\n    function isUpdateable(address wallet, uint32 id) external view returns (bool);\n\n    function actionValid(address wallet, uint32 id, uint32 action) external view returns (bool);\n\n    function strategyValid(address wallet, uint32 id, uint32 strategy) external view returns (bool);\n\n    function updateCondition(uint32 id) external returns (bool);\n\n    function deleteCondition(uint32 id) external;\n\n    function addAutomationToCondition(uint32 id, uint32 action) external returns (bool);\n\n    function addStrategyToCondition(uint32 id, uint32 action) external returns (bool);\n\n    function removeAutomationFromCondition(uint32 id, uint32 automation) external returns (bool);\n\n    function removeStrategyFromCondition(uint32 id, uint32 strategy) external returns (bool);\n\n    function conditionActive(address wallet, uint32 id) external view returns (bool);\n}\n"
    },
    "src/interfaces/IFeeController.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.24;\n\ninterface IFeeController {\n    enum FeeType {\n        Deposit,\n        Withdraw,\n        Reward\n    }\n\n    struct FeeConfig {\n        FeeType feeType;\n        uint256 feePercentage; // e.g., 100 = 1% (basis points)\n    }\n\n    error FeePercentageExceedLimit();\n    error ZeroAddressNotValid();\n    error NoOracleExist();\n    error InvalidTokenWithPriceOfZero();\n    error InvalidArrayLength();\n\n    event FeeConfigSet(bytes4 indexed selector, FeeType feeType, uint256 feePercentage);\n    event TokenGetterSet(address indexed target, bytes4 indexed selector, address tokenGetter);\n    event GlobalTokenGetterSet(bytes4 indexed selector, address tokenGetter);\n    event MinFeeSet(FeeType feeType, uint256 minFeeUSD);\n\n    function setFunctionFeeConfig(bytes4 _selector, FeeType _feeType, uint256 _feePercentage) external;\n\n    function getTokenForAction(address _target, bytes4 _selector, bytes memory _params)\n        external\n        view\n        returns (address, bool);\n    function calculateFee(address _token, bytes4 _selector, uint256 _volume) external view returns (uint256);\n    function calculateTokenAmount(address token, uint256 feeInUSD) external view returns (uint256);\n    function functionFeeConfig(bytes4 _selector) external view returns (FeeConfig memory);\n    function maxFeeLimit(FeeType _type) external view returns (uint256);\n    function minFeeInUSD(FeeType _type) external view returns (uint256);\n    function hasOracle(address token) external view returns (bool);\n}\n"
    },
    "src/interfaces/IFeeHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IFeeHandler {\n    error InvalidAmount();\n    error ZeroAddressNotValid();\n    error InvalidBeneficiary();\n    error PrimaryTokenAlreadyActivated();\n    error InvalidPercentageDistribution();\n    error InvalidPrimaryTokenDiscount();\n    error TokenNotAllowed();\n\n    event FeeHandled(address indexed token, uint256 amount);\n    event FeeHandledETH(uint256 amount);\n    event PrimaryTokenActivated(address token, address treasury);\n    event UpdatedVault(address vault);\n    event UpdatedPercentages(uint256 beneficiary, uint256 creator, uint256 vault);\n    event UpdatedPrimaryTokenDiscount(uint256 discount);\n    event UpdatedTokenAllowance(address token, bool allowed);\n    event UpdatedReduction(address reduction);\n\n    function handleFee(address token, uint256 amount, address beneficiary, address creator) external;\n    function handleFeeETH(address beneficiary, address creator) external payable;\n    function activatePrimaryToken(address token, address _treasury) external;\n    function updateVault(address _vault) external;\n    function updatePercentages(uint256 _beneficiary, uint256 _creator, uint256 _vault) external;\n    function updatePrimaryTokenDiscount(uint256 _discount) external;\n    function updateTokenAllowance(address token, bool allowed) external;\n    function tokenAllowed(address token) external view returns (bool);\n}\n"
    },
    "src/interfaces/IFeeReduction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\n\ninterface IFeeReduction {\n    function getFeeReduction(address wallet) external view returns (uint256);\n}"
    },
    "src/interfaces/IStrategyBuilderPlugin.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.24;\n\ninterface IStrategyBuilderPlugin {\n    enum FunctionId {\n        USER_OP_VALIDATION_SESSION_KEY\n    }\n\n    enum ActionType {\n        EXTERNAL,\n        INTERNAL_ACTION\n    }\n\n    /* ====== Structs ====== */\n\n    struct Action {\n        bytes4 selector;\n        bytes parameter;\n        address target;\n        uint256 value;\n        ActionType actionType;\n    }\n\n    struct Condition {\n        address conditionAddress;\n        uint32 id;\n        uint8 result1; // If the condition returns 1 got to index result1. If index result1 is 0 then no next step\n        uint8 result0; // If the condtions returns 0 go to index result0. If index result0 is 0 then no next step\n    }\n\n    struct StrategyStep {\n        Condition condition;\n        Action[] actions;\n    }\n\n    struct Strategy {\n        address creator;\n        StrategyStep[] steps;\n    }\n\n    struct Automation {\n        Condition condition; // If the condition returns 1, the automation can be executed\n        uint32 strategyId;\n        address paymentToken;\n        uint256 maxFeeAmount;\n    }\n\n    error StrategyDoesNotExist();\n    error StrategyAlreadyExist();\n    error AutomationNotExecutable(address condition, uint32 id);\n    error FeeExceedMaxFee();\n    error AutomationNotExist();\n    error AutomationAlreadyExist();\n    error StrategyIsInUse();\n    error changeAutomationInConditionFailed();\n    error ChangeStrategyInConditionFailed();\n    error UpdateConditionFailed(address condition, uint32 id);\n    error PaymentTokenNotAllowed();\n\n    /* ====== Events ====== */\n\n    event StrategyCreated(address indexed wallet, uint32 strategyId, address creator, Strategy strategy);\n    event StrategyExecuted(address indexed wallet, uint32 strategyId);\n    event StrategyDeleted(address indexed wallet, uint32 strategyId);\n\n    event AutomationCreated(\n        address indexed wallet,\n        uint32 automationId,\n        uint32 strategyId,\n        Condition condition,\n        address paymentToken,\n        uint256 maxFeeAmount\n    );\n    event AutomationDeleted(address indexed wallet, uint32 automationId);\n    event AutomationExecuted(\n        address indexed wallet, uint32 automationId, address paymentToken, uint256 feeInToken, uint256 feeInUSD\n    );\n\n    event StrategyStepExecuted(address indexed wallet, uint32 strategyId, uint32 stepId, Action[] actions);\n    event ActionExecuted(address indexed wallet, Action action);\n\n    function createStrategy(uint32 id, address creator, StrategyStep[] calldata steps) external;\n    function createAutomation(\n        uint32 id,\n        uint32 strategyId,\n        address paymentToken,\n        uint256 maxFeeInUSD,\n        Condition calldata condition\n    ) external;\n    function executeAutomation(uint32 id, address wallet, address beneficary) external;\n    // function executeStrategy(uint16 id) external;\n\n    // function deleteStrategy(uint16 id) external;\n\n    // function activateAutomation(\n    //     uint16 id,\n    //     uint16 strategyId,\n    //     Condition calldata condition,\n    //     address paymentToken,\n    //     uint256 maxFeeAmount\n    // ) external;\n\n    // function executeAutomation(uint16 id, address beneficary) external;\n\n    // function strategy(uint16 strategyId) external view returns (Strategy memory);\n\n    // function automation(uint16 automationId) external view returns (Automation memory);\n}\n"
    },
    "src/interfaces/ITokenGetter.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.24;\n\ninterface ITokenGetter {\n    function getTokenForSelector(bytes4 selector, bytes memory params) external view returns (address);\n}\n"
    },
    "src/StrategyBuilderPlugin.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.24;\n\nimport {BasePlugin} from \"modular-account-libs/plugins/BasePlugin.sol\";\nimport {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\nimport {\n    ManifestFunction,\n    ManifestAssociatedFunctionType,\n    ManifestAssociatedFunction,\n    PluginManifest,\n    PluginMetadata,\n    IPlugin\n} from \"modular-account-libs/interfaces/IPlugin.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IStrategyBuilderPlugin} from \"./interfaces/IStrategyBuilderPlugin.sol\";\nimport {ICondition} from \"./interfaces/ICondition.sol\";\nimport {IFeeController} from \"./interfaces/IFeeController.sol\";\nimport {IFeeHandler} from \"./interfaces/IFeeHandler.sol\";\nimport {IAction} from \"./interfaces/IAction.sol\";\n\ncontract StrategyBuilderPlugin is BasePlugin, IStrategyBuilderPlugin {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       StateVariable       ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    // metadata used by the pluginMetadata() method down below\n    string public constant NAME = \"Strategy Builder Plugin\";\n    string public constant VERSION = \"0.0.1\";\n    string public constant AUTHOR = \"3Blocks\";\n\n    // this is a constant used in the manifest, to reference our only dependency: the single owner plugin\n    // since it is the first, and only, plugin the index 0 will reference the single owner plugin\n    // we can use this to tell the modular account that we should use the single owner plugin to validate our user op\n    // in other words, we'll say \"make sure the person calling increment is an owner of the account using our single plugin\"\n    uint256 internal constant _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION = 0;\n\n    IFeeController public immutable feeController;\n    IFeeHandler public immutable feeHandler;\n\n    mapping(bytes32 => Strategy) private strategies;\n    mapping(bytes32 => uint32[]) private strategiesUsed; //All automations where the strategy is used\n    mapping(bytes32 => uint32) private automationsToIndex; //Maps each automation ID to its index in the owner's used strategy array.\n    mapping(bytes32 => Automation) private automations;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Modifier            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    modifier strategyExist(address wallet, uint32 id) {\n        if (strategies[getStorageId(wallet, id)].steps.length == 0) {\n            revert StrategyDoesNotExist();\n        }\n        _;\n    }\n\n    modifier strategyDoesNotExist(address wallet, uint32 id) {\n        if (strategies[getStorageId(wallet, id)].steps.length > 0) {\n            revert StrategyAlreadyExist();\n        }\n        _;\n    }\n\n    modifier automationExist(address wallet, uint32 id) {\n        if (automations[getStorageId(wallet, id)].condition.conditionAddress == address(0)) {\n            revert AutomationNotExist();\n        }\n        _;\n    }\n\n    modifier automationDoesNotExist(address wallet, uint32 id) {\n        if (automations[getStorageId(wallet, id)].condition.conditionAddress != address(0)) {\n            revert AutomationAlreadyExist();\n        }\n        _;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _feeController, address _feeHandler) {\n        feeController = IFeeController(_feeController);\n        feeHandler = IFeeHandler(_feeHandler);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Execution functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function createStrategy(uint32 id, address creator, StrategyStep[] calldata steps)\n        external\n        strategyDoesNotExist(msg.sender, id)\n    {\n        //TODO: Validate steps\n\n        Strategy storage newStrategy = strategies[getStorageId(msg.sender, id)];\n\n        //TODO: Dont allow zero address!\n        newStrategy.creator = creator;\n\n        for (uint256 i = 0; i < steps.length; i++) {\n            StrategyStep memory step = steps[i];\n\n            // Create a new step in storage\n            StrategyStep storage newStep = newStrategy.steps.push();\n            newStep.condition = step.condition;\n\n            if (step.condition.conditionAddress != address(0)) {\n                _changeStrategyInCondition(msg.sender, step.condition.conditionAddress, step.condition.id, id, true);\n            }\n\n            // Loop through the actions and add them to the step\n            for (uint256 j = 0; j < step.actions.length; j++) {\n                //TODO: Validate each action!\n                newStep.actions.push(step.actions[j]);\n            }\n        }\n\n        emit StrategyCreated(msg.sender, id, creator, newStrategy);\n    }\n\n    function deleteStrategy(uint32 id) external strategyExist(msg.sender, id) {\n        bytes32 storageId = getStorageId(msg.sender, id);\n\n        if (strategiesUsed[storageId].length > 0) {\n            revert StrategyIsInUse();\n        }\n\n        Strategy memory _strategy = strategies[storageId];\n\n        for (uint256 i = 0; i < _strategy.steps.length; i++) {\n            Condition memory condition = _strategy.steps[i].condition;\n            if (condition.conditionAddress != address(0)) {\n                _changeStrategyInCondition(msg.sender, condition.conditionAddress, condition.id, id, false);\n            }\n        }\n\n        delete strategies[storageId];\n\n        emit StrategyDeleted(msg.sender, id);\n    }\n\n    function executeStrategy(uint32 id) external strategyExist(msg.sender, id) {\n        _executeStrategy(msg.sender, id);\n    }\n\n    function createAutomation(\n        uint32 id,\n        uint32 strategyId,\n        address paymentToken,\n        uint256 maxFeeInUSD,\n        Condition calldata condition\n    ) external automationDoesNotExist(msg.sender, id) strategyExist(msg.sender, strategyId) {\n        //Specific validations\n        _validatePaymentToken(paymentToken);\n\n        _changeAutomationInCondition(msg.sender, condition.conditionAddress, condition.id, id, true);\n\n        bytes32 automationSID = getStorageId(msg.sender, id);\n        Automation storage _newAutomation = automations[getStorageId(msg.sender, id)];\n\n        _newAutomation.condition = condition;\n        _newAutomation.strategyId = strategyId;\n        //TODO: Validate Payment token\n        _newAutomation.paymentToken = paymentToken;\n        //TODO: Validate maxFeeAmount\n        _newAutomation.maxFeeAmount = maxFeeInUSD;\n\n        bytes32 strategySID = getStorageId(msg.sender, strategyId);\n        strategiesUsed[strategySID].push(id);\n        automationsToIndex[automationSID] = uint32(strategiesUsed[strategySID].length - 1);\n\n        emit AutomationCreated(msg.sender, id, strategyId, condition, paymentToken, maxFeeInUSD);\n    }\n\n    function deleteAutomation(uint32 id) external automationExist(msg.sender, id) {\n        bytes32 automationSID = getStorageId(msg.sender, id);\n        Automation memory _automation = automations[automationSID];\n\n        uint32[] storage _usedInAutomations = strategiesUsed[getStorageId(msg.sender, _automation.strategyId)];\n\n        uint32 _actualAutomationIndex = automationsToIndex[automationSID];\n        uint256 _lastAutomationIndex = _usedInAutomations.length - 1;\n        if (_actualAutomationIndex != _lastAutomationIndex) {\n            uint32 _lastAutomation = _usedInAutomations[_lastAutomationIndex];\n            _usedInAutomations[_actualAutomationIndex] = _lastAutomation;\n            automationsToIndex[getStorageId(msg.sender, _lastAutomation)] = _actualAutomationIndex;\n        }\n        _usedInAutomations.pop();\n\n        _changeAutomationInCondition(\n            msg.sender, _automation.condition.conditionAddress, _automation.condition.id, id, false\n        );\n\n        delete automations[automationSID];\n\n        emit AutomationDeleted(msg.sender, id);\n    }\n\n    function executeAutomation(uint32 id, address wallet, address beneficary) external automationExist(wallet, id) {\n        bytes32 automationSID = getStorageId(wallet, id);\n        Automation memory _automation = automations[automationSID];\n\n        //Check the condition\n        (uint8 conditionResult,) = _checkCondition(wallet, _automation.condition);\n\n        if (conditionResult == 0) {\n            revert AutomationNotExecutable(_automation.condition.conditionAddress, _automation.condition.id);\n        }\n\n        uint256 feeInUSD = _executeStrategy(wallet, _automation.strategyId);\n\n        if (feeInUSD > _automation.maxFeeAmount) {\n            revert FeeExceedMaxFee();\n        }\n\n        address _strategyCreator = strategies[getStorageId(wallet, _automation.strategyId)].creator;\n        uint256 feeInToken =\n            feeInUSD > 0 ? _payAutomation(wallet, _automation.paymentToken, feeInUSD, beneficary, _strategyCreator) : 0;\n\n        _updateCondition(wallet, _automation.condition, id);\n\n        emit AutomationExecuted(wallet, id, _automation.paymentToken, feeInToken, feeInUSD);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Internal functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _executeStrategy(address wallet, uint32 id) internal returns (uint256 fee) {\n        fee = _executeStep(wallet, id, 0);\n\n        emit StrategyExecuted(wallet, id);\n    }\n\n    function _executeStep(address wallet, uint32 id, uint16 index) internal returns (uint256 fee) {\n        StrategyStep memory _step = strategies[getStorageId(wallet, id)].steps[index];\n\n        //Check Condition\n        (uint8 conditionResult, uint16 nextIndex) = _checkCondition(wallet, _step.condition);\n\n        if (conditionResult == 1) {\n            //Execute all actions from the step\n            for (uint256 i = 0; i < _step.actions.length; i++) {\n                uint256 _actionFee = _executeAction(wallet, _step.actions[i]);\n                fee += _actionFee;\n            }\n\n            emit StrategyStepExecuted(wallet, id, index, _step.actions);\n        }\n\n        if (nextIndex != 0) {\n            //if there is a next step go to it\n            uint256 _feeNextStep = _executeStep(wallet, id, nextIndex);\n            fee += _feeNextStep;\n        }\n    }\n\n    function _executeAction(address _wallet, Action memory _action) internal returns (uint256 feeInUSD) {\n        (address tokenToTrack, bool exist) =\n            feeController.getTokenForAction(_action.target, _action.selector, _action.parameter);\n        // If the volume token exist track the volume before and after the execution, else get the min fee\n\n        uint256 preExecBalance = exist ? IERC20(tokenToTrack).balanceOf(_wallet) : 0;\n\n        _execute(_wallet, _action);\n\n        IFeeController.FeeType feeType = feeController.functionFeeConfig(_action.selector).feeType;\n\n        if (exist) {\n            uint256 postExecBalance = IERC20(tokenToTrack).balanceOf(_wallet);\n            uint256 volume = feeType == IFeeController.FeeType.Deposit\n                ? preExecBalance - postExecBalance\n                : postExecBalance - preExecBalance;\n\n            feeInUSD = feeController.calculateFee(tokenToTrack, _action.selector, volume);\n        } else {\n            feeInUSD = feeController.minFeeInUSD(feeType);\n        }\n\n        emit ActionExecuted(_wallet, _action);\n    }\n\n    function _execute(address _wallet, Action memory _action) internal {\n        bytes memory data = abi.encodePacked(_action.selector, _action.parameter);\n        if (_action.actionType == ActionType.EXTERNAL) {\n            IPluginExecutor(_wallet).executeFromPluginExternal(_action.target, _action.value, data);\n        } else {\n            (, bytes memory _result) = _action.target.call(data);\n            IAction.PluginExecution[] memory executions = abi.decode(_result, (IAction.PluginExecution[]));\n            for (uint256 i = 0; i < executions.length; i++) {\n                //TODO: Check target is unequal zero\n                IPluginExecutor(_wallet).executeFromPluginExternal(\n                    executions[i].target, executions[i].value, executions[i].data\n                );\n            }\n        }\n    }\n\n    function _checkCondition(address _wallet, Condition memory _condition)\n        internal\n        view\n        returns (uint8 conditionResult, uint16 nextStep)\n    {\n        if (_condition.conditionAddress == address(0)) {\n            nextStep = _condition.result1;\n            conditionResult = 1;\n        } else {\n            conditionResult = ICondition(_condition.conditionAddress).checkCondition(_wallet, _condition.id);\n            if (conditionResult == 1) {\n                nextStep = _condition.result1;\n            } else {\n                nextStep = _condition.result0;\n            }\n        }\n    }\n\n    function _changeAutomationInCondition(\n        address _wallet,\n        address _condition,\n        uint32 _conditionId,\n        uint32 automationId,\n        bool _add\n    ) internal {\n        bytes memory data = _add\n            ? abi.encodeCall(ICondition.addAutomationToCondition, (_conditionId, automationId))\n            : abi.encodeCall(ICondition.removeAutomationFromCondition, (_conditionId, automationId));\n\n        bytes memory result = IPluginExecutor(_wallet).executeFromPluginExternal(_condition, 0, data);\n        bool _success = abi.decode(result, (bool));\n        if (!_success) {\n            revert changeAutomationInConditionFailed();\n        }\n    }\n\n    function _changeStrategyInCondition(\n        address _wallet,\n        address _condition,\n        uint32 _conditionId,\n        uint32 _strategy,\n        bool _add\n    ) internal {\n        bytes memory data = _add\n            ? abi.encodeCall(ICondition.addStrategyToCondition, (_conditionId, _strategy))\n            : abi.encodeCall(ICondition.removeStrategyFromCondition, (_conditionId, _strategy));\n\n        bytes memory result = IPluginExecutor(_wallet).executeFromPluginExternal(_condition, 0, data);\n        bool _success = abi.decode(result, (bool));\n        if (!_success) {\n            revert ChangeStrategyInConditionFailed();\n        }\n    }\n\n    function _payAutomation(\n        address wallet,\n        address paymentToken,\n        uint256 feeInUSD,\n        address beneficiary,\n        address creator\n    ) internal returns (uint256) {\n        //calculate the token amount\n        uint256 feeInToken = feeController.calculateTokenAmount(paymentToken, feeInUSD);\n\n        //If payment with ERC20 token approve first\n        if (paymentToken != address(0)) {\n            bytes memory _approveData = abi.encodeCall(IERC20.approve, (address(feeHandler), feeInToken));\n            IPluginExecutor(wallet).executeFromPluginExternal(paymentToken, 0, _approveData);\n        }\n\n        bytes memory _handleFeeData = paymentToken != address(0)\n            ? abi.encodeCall(IFeeHandler.handleFee, (paymentToken, feeInToken, beneficiary, creator))\n            : abi.encodeCall(IFeeHandler.handleFeeETH, (beneficiary, creator));\n\n        IPluginExecutor(wallet).executeFromPluginExternal(\n            address(feeHandler), paymentToken == address(0) ? feeInToken : 0, _handleFeeData\n        );\n\n        return feeInToken;\n    }\n\n    function _updateCondition(address _wallet, Condition memory _condition, uint32 _actionId) internal {\n        if (ICondition(_condition.conditionAddress).isUpdateable(_wallet, _condition.id)) {\n            bytes memory _data = abi.encodeCall(ICondition.updateCondition, (_condition.id));\n            bytes memory _result =\n                IPluginExecutor(_wallet).executeFromPluginExternal(_condition.conditionAddress, 0, _data);\n            bool _success = abi.decode(_result, (bool));\n            if (!_success) {\n                revert UpdateConditionFailed(_condition.conditionAddress, _condition.id);\n            }\n        } else {\n            _changeAutomationInCondition(_wallet, _condition.conditionAddress, _condition.id, _actionId, false);\n        }\n    }\n\n    function _validatePaymentToken(address token) internal view {\n        bool valid = true;\n        if (!feeController.hasOracle(token)) {\n            valid = false;\n        }\n\n        if (!feeHandler.tokenAllowed(token)) {\n            valid = false;\n        }\n\n        if (!valid) {\n            revert PaymentTokenNotAllowed();\n        }\n    }\n\n    function _decodePluginExecutions(bytes memory encodedData)\n        private\n        pure\n        returns (IAction.PluginExecution[] memory)\n    {\n        return abi.decode(encodedData, (IAction.PluginExecution[]));\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Plugin interface functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    /// @inheritdoc BasePlugin\n    function onInstall(bytes calldata) external pure override {}\n\n    /// @inheritdoc BasePlugin\n    function onUninstall(bytes calldata) external pure override {}\n\n    /// @inheritdoc BasePlugin\n    function pluginManifest() external pure override returns (PluginManifest memory) {\n        PluginManifest memory manifest;\n\n        // since we are using the modular account, we will specify one depedency\n        // which will handle the user op validation for ownership\n        // you can find this depedency specified in the installPlugin call in the tests\n        manifest.dependencyInterfaceIds = new bytes4[](1);\n        manifest.dependencyInterfaceIds[0] = type(IPlugin).interfaceId;\n\n        manifest.executionFunctions = new bytes4[](5);\n        manifest.executionFunctions[0] = this.createStrategy.selector;\n        manifest.executionFunctions[1] = this.executeStrategy.selector;\n        manifest.executionFunctions[2] = this.createAutomation.selector;\n        manifest.executionFunctions[3] = this.deleteStrategy.selector;\n        manifest.executionFunctions[4] = this.deleteAutomation.selector;\n\n        // you can think of ManifestFunction as a reference to a function somewhere,\n        // we want to say \"use this function\" for some purpose - in this case,\n        // we'll be using the user op validation function from the single owner dependency\n        // and this is specified by the depdendency index\n        ManifestFunction memory ownerUserOpValidationFunction = ManifestFunction({\n            functionType: ManifestAssociatedFunctionType.DEPENDENCY,\n            functionId: 0, // unused since it's a dependency\n            dependencyIndex: _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION\n        });\n\n        // here we will link together the increment function with the single owner user op validation\n        // this basically says \"use this user op validation function and make sure everythings okay before calling increment\"\n        // this will ensure that only an owner of the account can call increment\n        manifest.userOpValidationFunctions = new ManifestAssociatedFunction[](5);\n        manifest.userOpValidationFunctions[0] = ManifestAssociatedFunction({\n            executionSelector: this.createStrategy.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[1] = ManifestAssociatedFunction({\n            executionSelector: this.executeStrategy.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[2] = ManifestAssociatedFunction({\n            executionSelector: this.createAutomation.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[3] = ManifestAssociatedFunction({\n            executionSelector: this.deleteStrategy.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[4] = ManifestAssociatedFunction({\n            executionSelector: this.deleteAutomation.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        // finally here we will always deny runtime calls to the increment function as we will only call it through user ops\n        // this avoids a potential issue where a future plugin may define\n        // a runtime validation function for it and unauthorized calls may occur due to that\n        manifest.preRuntimeValidationHooks = new ManifestAssociatedFunction[](5);\n        manifest.preRuntimeValidationHooks[0] = ManifestAssociatedFunction({\n            executionSelector: this.createStrategy.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[1] = ManifestAssociatedFunction({\n            executionSelector: this.executeStrategy.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[2] = ManifestAssociatedFunction({\n            executionSelector: this.createAutomation.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[3] = ManifestAssociatedFunction({\n            executionSelector: this.deleteAutomation.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[4] = ManifestAssociatedFunction({\n            executionSelector: this.deleteStrategy.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.permitAnyExternalAddress = true;\n        manifest.canSpendNativeToken = true;\n\n        return manifest;\n    }\n\n    /// @inheritdoc BasePlugin\n    function pluginMetadata() external pure virtual override returns (PluginMetadata memory) {\n        PluginMetadata memory metadata;\n        metadata.name = NAME;\n        metadata.version = VERSION;\n        metadata.author = AUTHOR;\n        return metadata;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    External View Functions       ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function strategy(address wallet, uint32 id) external view returns (Strategy memory) {\n        return strategies[getStorageId(wallet, id)];\n    }\n\n    function automation(address wallet, uint32 id) external view returns (Automation memory) {\n        return automations[getStorageId(wallet, id)];\n    }\n\n    function getStorageId(address wallet, uint32 id) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(wallet, id));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}