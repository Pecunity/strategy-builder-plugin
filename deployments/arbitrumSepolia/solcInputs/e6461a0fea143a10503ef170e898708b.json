{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "src/actions/aave-v3/AaveV3Base.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.19;\n\n// import {IPool} from \"@aave/core-v3/contracts/interfaces/IPool.sol\";\n// import {IPriceOracleGetter} from \"@aave/core-v3/contracts/interfaces/IPriceOracleGetter.sol\";\n// import {IWETH} from \"@aave/core-v3/contracts/misc/interfaces/IWETH.sol\";\n// import {ERC20PluginLib} from \"../lib/ERC20PluginLib.sol\";\n// import {AaveV3ExecutionLib} from \"./lib/AaveV3ExecutionLib.sol\";\n// import {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n// error AaveV3Base__ZeroAmountNotValid();\n// error AaveV3Base__HealthFactorNotValid();\n\n// contract AaveV3Base {\n//     using ERC20PluginLib for address;\n//     using AaveV3ExecutionLib for address;\n\n//     // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n//     // ┃       StateVariable       ┃\n//     // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n//     uint256 private constant PERCENTAGE_FACTOR = 10000;\n\n//     IPool public immutable pool;\n//     IWETH public immutable WETH;\n//     IPriceOracleGetter public immutable oracle;\n\n//     // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n//     // ┃       Modifier            ┃\n//     // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n//     modifier nonZeroAmount(uint256 amount) {\n//         if (amount == 0) {\n//             revert AaveV3Base__ZeroAmountNotValid();\n//         }\n//         _;\n//     }\n\n//     modifier noValidHealthFactor(uint256 hFactor) {\n//         if (hFactor < 1e18) {\n//             revert AaveV3Base__HealthFactorNotValid();\n//         }\n//         _;\n//     }\n\n//     // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n//     // ┃       Constructor         ┃\n//     // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n//     constructor(address _aaveV3Pool, address _WETH, address _priceOracle) {}\n\n//     // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n//     // ┃    Execution functions    ┃\n//     // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n//     /* ====== Base AAVE V3 Functions ====== */\n\n//     function supply(address asset, uint256 amount) public nonZeroAmount(amount) {\n//         msg.sender.approveToken(address(pool), asset, amount);\n\n//         msg.sender.supply(address(pool), asset, amount);\n//     }\n\n//     function supplyETH(uint256 amount) public nonZeroAmount(amount) {\n//         msg.sender.depositETH(address(WETH), amount);\n\n//         supply(address(WETH), amount);\n//     }\n\n//     function withdraw(address asset, uint256 amount) public nonZeroAmount(amount) {}\n\n//     function withdrawETH(uint256 amount) public nonZeroAmount(amount) {}\n\n//     function borrow(address asset, uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n//     function borrowETH(uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n//     function repay(address asset, uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n//     function repayETH(uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n//     /* ====== Internal Functions ====== */\n\n//     function _calculateBorrowAmount(address wallet, address asset, uint256 percentage)\n//         internal\n//         view\n//         returns (uint256)\n//     {\n//         (,, uint256 availableBorrowsBase,,,) = pool.getUserAccountData(wallet);\n\n//         uint256 price = oracle.getAssetPrice(asset);\n//         uint256 baseCurrencyDecimals = oracle.BASE_CURRENCY_UNIT();\n//         uint256 decimals = IERC20Metadata(asset).decimals();\n\n//         uint256 maxBorrowAmount = availableBorrowsBase * baseCurrencyDecimals / price;\n//         return (maxBorrowAmount * 10 ** decimals / baseCurrencyDecimals) * percentage / PERCENTAGE_FACTOR;\n//     }\n\n//     function _calculateAdditionalCollateral(address wallet, address asset, uint256 targetHealthFactor)\n//         internal\n//         view\n//         returns (uint256)\n//     {\n//         (uint256 currentCol, uint256 currentDebt,, uint256 currentLT,,) = pool.getUserAccountData(wallet);\n\n//         uint256 targetCollateral = (targetHealthFactor * currentDebt / 1e18) * PERCENTAGE_FACTOR / currentLT;\n\n//         if (targetCollateral < currentCol) {\n//             return 0;\n//         }\n\n//         uint256 additionalCollateral = targetCollateral - currentCol;\n\n//         uint256 assetPrice = oracle.getAssetPrice(asset);\n//         uint256 decimals = IERC20Metadata(asset).decimals();\n\n//         return assetPrice > 0 ? (additionalCollateral * 10 ** decimals) / assetPrice : 0;\n//     }\n// }\n"
    },
    "src/actions/aave-v3/lib/AaveV3ExecutionLib.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.19;\n\n// import {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\n// import {IPool} from \"@aave/core-v3/contracts/interfaces/IPool.sol\";\n\n// library AaveV3ExecutionLib {\n//     function supply(address wallet, address pool, address asset, uint256 amount) internal {\n//         bytes memory _data = abi.encodeCall(IPool.supply, (asset, amount, wallet, 0));\n\n//         IPluginExecutor(wallet).executeFromPluginExternal(pool, 0, _data);\n//     }\n\n//     function borrow(address wallet, address pool, address asset, uint256 amount, uint256 interestRateMode) internal {\n//         bytes memory _data = abi.encodeCall(IPool.borrow, (asset, amount, interestRateMode, 0, msg.sender));\n//         IPluginExecutor(wallet).executeFromPluginExternal(pool, 0, _data);\n//     }\n\n//     function depositETH(address wallet, address _WETH, uint256 amount) internal {}\n\n//     function withdrawETH(address wallet, address _WETH, uint256 amount) internal {}\n// }\n"
    },
    "src/actions/lib/ERC20PluginLib.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.19;\n\n// import {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// error ERC20PluginLib__FailedToApproveTokens();\n\n// library ERC20PluginLib {\n//     function approveToken(address wallet, address spender, address token, uint256 amount) internal {\n//         bytes memory _data = abi.encodeCall(IERC20.approve, (spender, amount));\n//         bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(token, 0, _data);\n//         bool success = abi.decode(_res, (bool));\n\n//         if (!success) {\n//             revert ERC20PluginLib__FailedToApproveTokens();\n//         }\n//     }\n// }\n"
    },
    "src/actions/uniswap-v2/interfaces/IUniswapV2Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IAction} from \"../../../interfaces/IAction.sol\";\nimport {ITokenGetter} from \"../../../interfaces/ITokenGetter.sol\";\n\ninterface IUniswapV2Base is IAction, ITokenGetter {\n    error FailedToApproveTokens();\n    error PoolPairDoesNotExist();\n    error NotZeroAmountForBothTokensAllowed();\n    error NoValidPercentageAmount();\n    error NoZeroAmountValid();\n    error InvalidTokenGetterID();\n}\n"
    },
    "src/actions/uniswap-v2/interfaces/IUniswapV2SwapActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IAction} from \"../../../interfaces/IAction.sol\";\n\ninterface IUniswapV2SwapActions {\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapExactETHForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapETHForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapPercentageTokensForTokens(uint256 percentage, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapPercentageTokensForETH(uint256 percentage, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n\n    function swapPercentageETHForTokens(uint256 percentage, address[] calldata path, address to)\n        external\n        view\n        returns (IAction.PluginExecution[] memory);\n}\n"
    },
    "src/actions/uniswap-v2/UniswapV2Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Pair} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IUniswapV2Base} from \"./interfaces/IUniswapV2Base.sol\";\n\ncontract UniswapV2Base is IUniswapV2Base {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃     State Variables       ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    uint256 public constant DELTA_DEADLINE = 30 seconds;\n    uint256 public constant PERCENTAGE_FACTOR = 1000;\n\n    address public immutable router;\n    address public immutable factory;\n    address public immutable WETH;\n\n    mapping(bytes4 => uint8) public tokenGetterIDs;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Modifier            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    modifier validPercentage(uint256 percentage) {\n        if (percentage == 0 || percentage > PERCENTAGE_FACTOR) {\n            revert NoValidPercentageAmount();\n        }\n        _;\n    }\n\n    modifier nonZeroAmount(uint256 amount) {\n        if (amount == 0) {\n            revert NoZeroAmountValid();\n        }\n        _;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _router) {\n        router = _router;\n\n        WETH = IUniswapV2Router01(router).WETH();\n        factory = IUniswapV2Router01(router).factory();\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Internal functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _percentageShare(address token, uint256 percentage, address account) internal view returns (uint256) {\n        uint256 totalTokenAmount = IERC20(token).balanceOf(account);\n        return (percentage * totalTokenAmount) / PERCENTAGE_FACTOR;\n    }\n\n    function _percentageShareETH(uint256 percentage, address account) internal view returns (uint256) {\n        uint256 totalBalanceETH = account.balance;\n        return (totalBalanceETH * percentage) / PERCENTAGE_FACTOR;\n    }\n\n    function _calculateMaxAmounts(address tokenA, address tokenB, address pair, address account)\n        internal\n        view\n        returns (uint256 maxAmountA, uint256 maxAmountB)\n    {\n        (uint112 reserveA, uint112 reserveB,) = IUniswapV2Pair(pair).getReserves();\n\n        uint256 balanceTokenA = IERC20(tokenA).balanceOf(account);\n        uint256 balanceTokenB = IERC20(tokenB).balanceOf(account);\n\n        maxAmountA = balanceTokenA;\n        maxAmountB = balanceTokenB;\n\n        uint256 requiredB = (balanceTokenA * reserveB) / reserveA;\n\n        if (requiredB > balanceTokenB) {\n            maxAmountA = (balanceTokenB * reserveA) / reserveB;\n        } else {\n            maxAmountB = requiredB;\n        }\n    }\n\n    function _approveToken(address token, uint256 amount) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(IERC20.approve, (address(router), amount));\n\n        return PluginExecution({target: token, value: 0, data: _data});\n    }\n\n    function _getMaxAmountIn(address[] memory path, uint256 amountOut) internal view returns (uint256) {\n        return IUniswapV2Router01(router).getAmountsIn(amountOut, path)[0];\n    }\n\n    function _deadline() internal view returns (uint256) {\n        return block.timestamp + DELTA_DEADLINE;\n    }\n\n    function _swap(address tokenIn, address tokenOut, uint256 amountIn, address to)\n        internal\n        view\n        returns (uint256, PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(tokenIn, amountIn);\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n\n        uint256[] memory amountsOut = IUniswapV2Router01(router).getAmountsOut(amountIn, path);\n        executions[1] = _swapExactTokensForTokens(amountIn, 0, path, to, _deadline());\n\n        return (amountsOut[1], executions);\n    }\n\n    function _swapETH(address token, uint256 amountIn, address to)\n        internal\n        view\n        returns (uint256, PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](1);\n\n        address[] memory path = new address[](2);\n        path[0] = WETH;\n        path[1] = token;\n\n        uint256[] memory amountsOut = IUniswapV2Router01(router).getAmountsOut(amountIn, path);\n        executions[0] = _swapExactETHForTokens(amountIn, 0, path, to, _deadline());\n\n        return (amountsOut[1], executions);\n    }\n\n    function _swapToETH(address token, uint256 amountIn, address to)\n        internal\n        view\n        returns (uint256, PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(token, amountIn);\n\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = WETH;\n\n        uint256[] memory amountsOut = IUniswapV2Router01(router).getAmountsOut(amountIn, path);\n        executions[1] = _swapExactTokensForETH(amountIn, 0, path, to, _deadline());\n\n        return (amountsOut[1], executions);\n    }\n\n    function _swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactTokensForTokens, (amountIn, amountOutMin, path, to, deadline));\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactTokensForETH, (amountIn, amountOutMin, path, to, deadline));\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _swapExactETHForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactETHForTokens, (amountOutMin, path, to, deadline));\n\n        return PluginExecution({target: router, value: amountIn, data: _data});\n    }\n\n    function _calculateSwapAmountForProvidingLiquidity(address pair, address tokenA, uint256 amountIn)\n        internal\n        view\n        returns (uint256)\n    {\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\n\n        if (IUniswapV2Pair(pair).token0() == tokenA) {\n            return _getSwapAmount(reserve0, amountIn);\n        } else {\n            return _getSwapAmount(reserve1, amountIn);\n        }\n    }\n\n    function uniswapV2RouterAddress() external view returns (address) {\n        return address(router);\n    }\n\n    function getTokenForSelector(bytes4, bytes memory) external view virtual returns (address) {\n        return address(0);\n    }\n\n    /*\n    s = optimal swap amount\n    r = amount of reserve for token a\n    a = amount of token a the user currently has (not added to reserve yet)\n    f = swap fee percent\n    s = (sqrt(((2 - f)r)^2 + 4(1 - f)ar) - (2 - f)r) / (2(1 - f))\n    */\n    function _getSwapAmount(uint256 r, uint256 a) public pure returns (uint256) {\n        return (sqrt(r * (r * 3988009 + a * 3988000)) - r * 1997) / 1994;\n    }\n\n    function sqrt(uint256 y) private pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "src/actions/uniswap-v2/UniswapV2LPActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {UniswapV2Base} from \"./UniswapV2Base.sol\";\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Pair} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror UniswapV2LPActions__PoolPairDoesNotExist();\nerror UniswapV2LPActions__NotZeroAmountForBothTokensAllowed();\n\ncontract UniswapV2LPActions is UniswapV2Base {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _router) UniswapV2Base(_router) {}\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Base LP PluginExecution Functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) public view returns (PluginExecution[] memory) {\n        if (amountADesired == 0 && amountBDesired == 0) {\n            revert UniswapV2LPActions__NotZeroAmountForBothTokensAllowed();\n        }\n\n        if (amountADesired == 0) {\n            amountADesired = _calculateAmountForLP(tokenB, amountBDesired, _getPoolPair(tokenA, tokenB));\n        }\n\n        if (amountBDesired == 0) {\n            amountBDesired = _calculateAmountForLP(tokenA, amountADesired, _getPoolPair(tokenA, tokenB));\n        }\n\n        PluginExecution[] memory executions = new PluginExecution[](3);\n\n        executions[0] = _approveToken(tokenA, amountADesired);\n        executions[1] = _approveToken(tokenB, amountBDesired);\n\n        executions[2] =\n            _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, _deadline());\n\n        return executions;\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHDesired,\n        uint256 amountETHMin,\n        address to\n    ) public view returns (PluginExecution[] memory) {\n        if (amountTokenDesired == 0 && amountETHDesired == 0) {\n            revert UniswapV2LPActions__NotZeroAmountForBothTokensAllowed();\n        }\n\n        if (amountTokenDesired == 0) {\n            amountTokenDesired = _calculateAmountForLP(WETH, amountETHDesired, _getPoolPair(token, WETH));\n        }\n\n        if (amountETHDesired == 0) {\n            amountETHDesired = _calculateAmountForLP(token, amountTokenDesired, _getPoolPair(token, WETH));\n        }\n\n        PluginExecution[] memory executions = new PluginExecution[](2);\n        executions[0] = _approveToken(token, amountTokenDesired);\n\n        executions[1] =\n            _addLiquidityETH(token, amountETHDesired, amountTokenDesired, amountTokenMin, amountETHMin, to, _deadline());\n\n        return executions;\n    }\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to\n    ) public view nonZeroAmount(liquidity) returns (PluginExecution[] memory) {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(_getPoolPair(tokenA, tokenB), liquidity);\n\n        executions[1] = _removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, _deadline());\n\n        return executions;\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to\n    ) public view nonZeroAmount(liquidity) returns (PluginExecution[] memory) {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n        executions[0] = _approveToken(_getPoolPair(token, WETH), liquidity);\n\n        executions[1] = _removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, _deadline());\n\n        return executions;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃   Percentage LP PluginExecution Functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function addLiquidityETHPercentage(address token, uint256 percentageETHDesired, address to)\n        public\n        view\n        validPercentage(percentageETHDesired)\n        returns (PluginExecution[] memory)\n    {\n        uint256 amountETHDesired = _percentageShareETH(percentageETHDesired, to);\n\n        uint256 amountTokenDesired = _calculateAmountForLP(WETH, amountETHDesired, _getPoolPair(token, WETH));\n\n        return addLiquidityETH(token, amountTokenDesired, 0, amountETHDesired, 0, to);\n    }\n\n    function addLiquidityETHPercentageToken(address token, uint256 percentageTokenDesired, address to)\n        external\n        view\n        validPercentage(percentageTokenDesired)\n        returns (PluginExecution[] memory)\n    {\n        uint256 amountTokenDesired = _percentageShare(token, percentageTokenDesired, to);\n        uint256 amountETHDesired = _calculateAmountForLP(token, amountTokenDesired, _getPoolPair(token, WETH));\n\n        return addLiquidityETH(token, amountTokenDesired, 0, amountETHDesired, 0, to);\n    }\n\n    function addLiquidityPercentage(uint256 percentageADesired, address tokenA, address tokenB, address to)\n        external\n        view\n        validPercentage(percentageADesired)\n        returns (PluginExecution[] memory)\n    {\n        uint256 amountADesired = _percentageShare(tokenA, percentageADesired, to);\n        uint256 amountBDesired = _calculateAmountForLP(tokenA, amountADesired, _getPoolPair(tokenA, tokenB));\n\n        return addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, 0, 0, to);\n    }\n\n    function addLiqudityPercentageOfMaxPossible(address tokenA, address tokenB, uint256 percentage, address to)\n        external\n        view\n        validPercentage(percentage)\n        returns (PluginExecution[] memory)\n    {\n        address pair = _getPoolPair(tokenA, tokenB);\n\n        address _tokenA = tokenA;\n        address _tokenB = tokenB;\n        if (IUniswapV2Pair(pair).token0() != tokenA) {\n            _tokenA = tokenB;\n            _tokenB = tokenA;\n        }\n\n        (uint256 maxAmountA, uint256 maxAmountB) = _calculateMaxAmounts(_tokenA, _tokenB, pair, to);\n\n        return addLiquidity(\n            _tokenA,\n            _tokenB,\n            (maxAmountA * percentage) / PERCENTAGE_FACTOR,\n            (maxAmountB * percentage) / PERCENTAGE_FACTOR,\n            0,\n            0,\n            to\n        );\n    }\n\n    function removeLiquidityETHPercentage(address token, uint256 liquidityPercentage, address to)\n        external\n        view\n        validPercentage(liquidityPercentage)\n        returns (PluginExecution[] memory)\n    {\n        return removeLiquidityETH(token, _percentageShare(_getPoolPair(token, WETH), liquidityPercentage, to), 0, 0, to);\n    }\n\n    function removeLiquidityPercentage(address tokenA, address tokenB, uint256 percentageLiquidity, address to)\n        external\n        view\n        validPercentage(percentageLiquidity)\n        returns (PluginExecution[] memory)\n    {\n        return removeLiquidity(\n            tokenA, tokenB, _percentageShare(_getPoolPair(tokenA, tokenB), percentageLiquidity, to), 0, 0, to\n        );\n    }\n\n    function zap(address tokenA, address tokenB, uint256 amountIn, address to)\n        external\n        view\n        returns (PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](4);\n\n        address pair = _getPoolPair(tokenA, tokenB);\n\n        uint256 swapAmount = _calculateSwapAmountForProvidingLiquidity(pair, tokenA, amountIn);\n\n        (uint256 amountTokenB, PluginExecution[] memory swapExecutions) = _swap(tokenA, tokenB, swapAmount, to);\n        PluginExecution[] memory lpExecutions =\n            addLiquidity(tokenA, tokenB, amountIn - swapAmount, amountTokenB, 0, 0, to);\n\n        executions[0] = swapExecutions[0];\n        executions[1] = swapExecutions[1];\n        executions[2] = lpExecutions[0];\n        executions[3] = lpExecutions[1];\n\n        return executions;\n    }\n\n    function zapETH(address token, uint256 amountIn, bool inputETH, address to)\n        external\n        returns (PluginExecution[] memory)\n    {\n        address pair = _getPoolPair(WETH, token);\n\n        address tokenA = inputETH ? WETH : token;\n\n        uint256 swapAmount = _calculateSwapAmountForProvidingLiquidity(pair, tokenA, amountIn);\n\n        uint256 amountToken;\n        uint256 amountETH;\n        uint8 executionAmount;\n        PluginExecution[] memory swapExecutions;\n        if (inputETH) {\n            (amountToken, swapExecutions) = _swapETH(token, swapAmount, to);\n            amountETH = amountIn - swapAmount;\n            executionAmount = 1;\n        } else {\n            (amountETH, swapExecutions) = _swapToETH(token, swapAmount, to);\n            amountToken = amountIn - swapAmount;\n            executionAmount = 2;\n        }\n\n        PluginExecution[] memory executions = new PluginExecution[](executionAmount+2);\n\n        // addLiquidityETH(token, amountToken, 0, amountETH, 0);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃   Internal Functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _getPoolPair(address tokenA, address tokenB) internal view returns (address) {\n        address _poolPair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n\n        if (_poolPair == address(0)) {\n            revert UniswapV2LPActions__PoolPairDoesNotExist();\n        }\n\n        return _poolPair;\n    }\n\n    function _calculateAmountForLP(address token, uint256 amount, address poolPair)\n        internal\n        view\n        returns (uint256 amountForLp)\n    {\n        address token0 = IUniswapV2Pair(poolPair).token0();\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(poolPair).getReserves();\n\n        if (token0 == token) {\n            amountForLp = (amount * reserve1) / reserve0;\n        } else {\n            amountForLp = (amount * reserve0) / reserve1;\n        }\n    }\n\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.addLiquidity,\n            (tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _addLiquidityETH(\n        address token,\n        uint256 amountETHDesired,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.addLiquidityETH, (token, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: amountETHDesired, data: _data});\n    }\n\n    function _removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.removeLiquidity, (tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.removeLiquidityETH, (token, liquidity, amountTokenMin, amountETHMin, to, deadline)\n        );\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n}\n"
    },
    "src/actions/uniswap-v2/UniswapV2SwapActions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {UniswapV2Base} from \"./UniswapV2Base.sol\";\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Pair} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IUniswapV2SwapActions} from \"./interfaces/IUniswapV2SwapActions.sol\";\n\ncontract UniswapV2SwapActions is UniswapV2Base, IUniswapV2SwapActions {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _router) UniswapV2Base(_router) {\n        tokenGetterIDs[IUniswapV2SwapActions.swapPercentageETHForTokens.selector] = 1;\n        tokenGetterIDs[IUniswapV2SwapActions.swapExactETHForTokens.selector] = 1;\n        tokenGetterIDs[IUniswapV2SwapActions.swapETHForExactTokens.selector] = 1;\n\n        tokenGetterIDs[IUniswapV2SwapActions.swapExactTokensForETH.selector] = 2;\n        tokenGetterIDs[IUniswapV2SwapActions.swapTokensForExactETH.selector] = 2;\n        tokenGetterIDs[IUniswapV2SwapActions.swapExactTokensForTokens.selector] = 2;\n        tokenGetterIDs[IUniswapV2SwapActions.swapTokensForExactTokens.selector] = 2;\n\n        tokenGetterIDs[IUniswapV2SwapActions.swapPercentageTokensForETH.selector] = 3;\n        tokenGetterIDs[IUniswapV2SwapActions.swapPercentageTokensForTokens.selector] = 3;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃  Base Swap PluginExecution Functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to)\n        public\n        view\n        nonZeroAmount(amountIn)\n        returns (PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n        executions[0] = _approveToken(path[0], amountIn);\n\n        executions[1] = _swapExactTokensForTokens(amountIn, amountOutMin, path, to, _deadline());\n        return executions;\n    }\n\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to)\n        public\n        view\n        nonZeroAmount(amountOut)\n        returns (PluginExecution[] memory)\n    {\n        uint256 modAmountInMax;\n        if (amountInMax == 0) {\n            modAmountInMax = _getMaxAmountIn(path, amountOut);\n        } else {\n            modAmountInMax = amountInMax;\n        }\n\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(path[0], modAmountInMax);\n\n        executions[1] = _swapTokensForExactTokens(amountOut, modAmountInMax, path, to, _deadline());\n\n        return executions;\n    }\n\n    function swapExactETHForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to)\n        public\n        view\n        nonZeroAmount(amountIn)\n        returns (PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](1);\n        executions[0] = _swapExactETHForTokens(amountIn, amountOutMin, path, to, _deadline());\n\n        return executions;\n    }\n\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to)\n        public\n        view\n        nonZeroAmount(amountOut)\n        returns (PluginExecution[] memory)\n    {\n        uint256 modAmountInMax;\n        if (amountInMax == 0) {\n            modAmountInMax = _getMaxAmountIn(path, amountOut);\n        } else {\n            modAmountInMax = amountInMax;\n        }\n\n        PluginExecution[] memory executions = new PluginExecution[](2);\n\n        executions[0] = _approveToken(path[0], modAmountInMax);\n\n        executions[1] = _swapTokensForExactETH(amountOut, modAmountInMax, path, to, _deadline());\n\n        return executions;\n    }\n\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to)\n        public\n        view\n        nonZeroAmount(amountIn)\n        returns (PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](2);\n        executions[0] = _approveToken(path[0], amountIn);\n\n        executions[1] = _swapExactTokensForETH(amountIn, amountOutMin, path, to, _deadline());\n\n        return executions;\n    }\n\n    function swapETHForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to)\n        public\n        view\n        nonZeroAmount(amountOut)\n        returns (PluginExecution[] memory)\n    {\n        PluginExecution[] memory executions = new PluginExecution[](1);\n\n        uint256 modAmountInMax;\n        if (amountInMax == 0) {\n            modAmountInMax = _getMaxAmountIn(path, amountOut);\n        } else {\n            modAmountInMax = amountInMax;\n        }\n\n        executions[0] = _swapETHForExactTokens(modAmountInMax, amountOut, path, to, _deadline());\n\n        return executions;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃  Percentage Swap PluginExecution Functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function swapPercentageTokensForTokens(uint256 percentage, address[] calldata path, address to)\n        external\n        view\n        validPercentage(percentage)\n        returns (PluginExecution[] memory)\n    {\n        return swapExactTokensForTokens(_percentageShare(path[0], percentage, to), 0, path, to);\n    }\n\n    function swapPercentageTokensForETH(uint256 percentage, address[] calldata path, address to)\n        external\n        view\n        validPercentage(percentage)\n        returns (PluginExecution[] memory)\n    {\n        return swapExactTokensForETH(_percentageShare(path[0], percentage, to), 0, path, to);\n    }\n\n    function swapPercentageETHForTokens(uint256 percentage, address[] calldata path, address to)\n        external\n        view\n        validPercentage(percentage)\n        returns (PluginExecution[] memory)\n    {\n        return swapExactETHForTokens(_percentageShareETH(percentage, to), 0, path, to);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃   Internal Functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapTokensForExactTokens, (amountOut, amountInMax, path, to, deadline));\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function _swapETHForExactTokens(\n        uint256 amountInMax,\n        uint256 amountOut,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data = abi.encodeCall(IUniswapV2Router01.swapETHForExactTokens, (amountOut, path, to, deadline));\n\n        return PluginExecution({target: router, value: amountInMax, data: _data});\n    }\n\n    function _swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal view returns (PluginExecution memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapTokensForExactETH, (amountOut, amountInMax, path, to, deadline));\n\n        return PluginExecution({target: router, value: 0, data: _data});\n    }\n\n    function getTokenForSelector(bytes4 selector, bytes memory params) external view override returns (address) {\n        uint8 tokenGetterID = tokenGetterIDs[selector];\n\n        if (tokenGetterID == 0 || tokenGetterID > 3) {\n            revert InvalidTokenGetterID();\n        }\n\n        if (tokenGetterID == 1) {\n            return address(0);\n        }\n\n        if (tokenGetterID == 2) {\n            (,, address[] memory _path,) = abi.decode(params, (uint256, uint256, address[], address));\n            return _path[0];\n        } else {\n            (, address[] memory path,) = abi.decode(params, (uint256, address[], address));\n            return path[0];\n        }\n    }\n}\n"
    },
    "src/interfaces/IAction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IAction {\n    struct PluginExecution {\n        address target;\n        uint256 value;\n        bytes data;\n    }\n}\n"
    },
    "src/interfaces/ITokenGetter.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.19;\n\ninterface ITokenGetter {\n    function getTokenForSelector(bytes4 selector, bytes memory params) external view returns (address);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}