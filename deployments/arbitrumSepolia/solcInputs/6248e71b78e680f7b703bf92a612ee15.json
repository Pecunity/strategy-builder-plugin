{
  "language": "Solidity",
  "sources": {
    "@aave/core-v3/contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\n\n/**\n * @title IPool\n * @author Aave\n * @notice Defines the basic interface for an Aave Pool.\n */\ninterface IPool {\n  /**\n   * @dev Emitted on mintUnbacked()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address initiating the supply\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\n   * @param amount The amount of supplied assets\n   * @param referralCode The referral code used\n   */\n  event MintUnbacked(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted on backUnbacked()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param backer The address paying for the backing\n   * @param amount The amount added as backing\n   * @param fee The amount paid in fees\n   */\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\n\n  /**\n   * @dev Emitted on supply()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address initiating the supply\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\n   * @param amount The amount supplied\n   * @param referralCode The referral code used\n   */\n  event Supply(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted on withdraw()\n   * @param reserve The address of the underlying asset being withdrawn\n   * @param user The address initiating the withdrawal, owner of aTokens\n   * @param to The address that will receive the underlying\n   * @param amount The amount to be withdrawn\n   */\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n\n  /**\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n   * @param reserve The address of the underlying asset being borrowed\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n   * initiator of the transaction on flashLoan()\n   * @param onBehalfOf The address that will be getting the debt\n   * @param amount The amount borrowed out\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\n   * @param referralCode The referral code used\n   */\n  event Borrow(\n    address indexed reserve,\n    address user,\n    address indexed onBehalfOf,\n    uint256 amount,\n    DataTypes.InterestRateMode interestRateMode,\n    uint256 borrowRate,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted on repay()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The beneficiary of the repayment, getting his debt reduced\n   * @param repayer The address of the user initiating the repay(), providing the funds\n   * @param amount The amount repaid\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\n   */\n  event Repay(\n    address indexed reserve,\n    address indexed user,\n    address indexed repayer,\n    uint256 amount,\n    bool useATokens\n  );\n\n  /**\n   * @dev Emitted on swapBorrowRateMode()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user swapping his rate mode\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n   */\n  event SwapBorrowRateMode(\n    address indexed reserve,\n    address indexed user,\n    DataTypes.InterestRateMode interestRateMode\n  );\n\n  /**\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\n   * @param asset The address of the underlying asset of the reserve\n   * @param totalDebt The total isolation mode debt for the reserve\n   */\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\n\n  /**\n   * @dev Emitted when the user selects a certain asset category for eMode\n   * @param user The address of the user\n   * @param categoryId The category id\n   */\n  event UserEModeSet(address indexed user, uint8 categoryId);\n\n  /**\n   * @dev Emitted on setUserUseReserveAsCollateral()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user enabling the usage as collateral\n   */\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on setUserUseReserveAsCollateral()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user enabling the usage as collateral\n   */\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on rebalanceStableBorrowRate()\n   * @param reserve The address of the underlying asset of the reserve\n   * @param user The address of the user for which the rebalance has been executed\n   */\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n\n  /**\n   * @dev Emitted on flashLoan()\n   * @param target The address of the flash loan receiver contract\n   * @param initiator The address initiating the flash loan\n   * @param asset The address of the asset being flash borrowed\n   * @param amount The amount flash borrowed\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\n   * @param premium The fee flash borrowed\n   * @param referralCode The referral code used\n   */\n  event FlashLoan(\n    address indexed target,\n    address initiator,\n    address indexed asset,\n    uint256 amount,\n    DataTypes.InterestRateMode interestRateMode,\n    uint256 premium,\n    uint16 indexed referralCode\n  );\n\n  /**\n   * @dev Emitted when a borrower is liquidated.\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\n   * @param liquidator The address of the liquidator\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   */\n  event LiquidationCall(\n    address indexed collateralAsset,\n    address indexed debtAsset,\n    address indexed user,\n    uint256 debtToCover,\n    uint256 liquidatedCollateralAmount,\n    address liquidator,\n    bool receiveAToken\n  );\n\n  /**\n   * @dev Emitted when the state of a reserve is updated.\n   * @param reserve The address of the underlying asset of the reserve\n   * @param liquidityRate The next liquidity rate\n   * @param stableBorrowRate The next stable borrow rate\n   * @param variableBorrowRate The next variable borrow rate\n   * @param liquidityIndex The next liquidity index\n   * @param variableBorrowIndex The next variable borrow index\n   */\n  event ReserveDataUpdated(\n    address indexed reserve,\n    uint256 liquidityRate,\n    uint256 stableBorrowRate,\n    uint256 variableBorrowRate,\n    uint256 liquidityIndex,\n    uint256 variableBorrowIndex\n  );\n\n  /**\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\n   * @param reserve The address of the reserve\n   * @param amountMinted The amount minted to the treasury\n   */\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\n\n  /**\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\n   * @param asset The address of the underlying asset to mint\n   * @param amount The amount to mint\n   * @param onBehalfOf The address that will receive the aTokens\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function mintUnbacked(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\n   * @param asset The address of the underlying asset to back\n   * @param amount The amount to back\n   * @param fee The amount paid in fees\n   * @return The backed amount\n   */\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\n\n  /**\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n\n  /**\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   */\n  function supplyWithPermit(\n    address asset,\n    uint256 amount,\n    address onBehalfOf,\n    uint16 referralCode,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  ) external;\n\n  /**\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n   * @param asset The address of the underlying asset to withdraw\n   * @param amount The underlying amount to be withdrawn\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n   * @param to The address that will receive the underlying, same as msg.sender if the user\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n   *   different wallet\n   * @return The final amount withdrawn\n   */\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n\n  /**\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n   * @param asset The address of the underlying asset to borrow\n   * @param amount The amount to be borrowed\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n   * if he has been given credit delegation allowance\n   */\n  function borrow(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    uint16 referralCode,\n    address onBehalfOf\n  ) external;\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @return The final amount repaid\n   */\n  function repay(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    address onBehalfOf\n  ) external returns (uint256);\n\n  /**\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n   * other borrower whose debt should be removed\n   * @param deadline The deadline timestamp that the permit is valid\n   * @param permitV The V parameter of ERC712 permit sig\n   * @param permitR The R parameter of ERC712 permit sig\n   * @param permitS The S parameter of ERC712 permit sig\n   * @return The final amount repaid\n   */\n  function repayWithPermit(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode,\n    address onBehalfOf,\n    uint256 deadline,\n    uint8 permitV,\n    bytes32 permitR,\n    bytes32 permitS\n  ) external returns (uint256);\n\n  /**\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n   * equivalent debt tokens\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n   * balance is not enough to cover the whole debt\n   * @param asset The address of the borrowed underlying asset previously borrowed\n   * @param amount The amount to repay\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n   * @return The final amount repaid\n   */\n  function repayWithATokens(\n    address asset,\n    uint256 amount,\n    uint256 interestRateMode\n  ) external returns (uint256);\n\n  /**\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n   * @param asset The address of the underlying asset borrowed\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n   */\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\n\n  /**\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n   * - Users can be rebalanced if the following conditions are satisfied:\n   *     1. Usage ratio is above 95%\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\n   * @param asset The address of the underlying asset borrowed\n   * @param user The address of the user to be rebalanced\n   */\n  function rebalanceStableBorrowRate(address asset, address user) external;\n\n  /**\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\n   * @param asset The address of the underlying asset supplied\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n   */\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n\n  /**\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n   * @param user The address of the borrower getting liquidated\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n   * to receive the underlying collateral asset directly\n   */\n  function liquidationCall(\n    address collateralAsset,\n    address debtAsset,\n    address user,\n    uint256 debtToCover,\n    bool receiveAToken\n  ) external;\n\n  /**\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned.\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n   * into consideration. For further details please visit https://docs.aave.com/developers/\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n   * @param assets The addresses of the assets being flash-borrowed\n   * @param amounts The amounts of the assets being flash-borrowed\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n   * @param params Variadic packed params to pass to the receiver as extra information\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function flashLoan(\n    address receiverAddress,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata interestRateModes,\n    address onBehalfOf,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n   * as long as the amount taken plus a fee is returned.\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n   * into consideration. For further details please visit https://docs.aave.com/developers/\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n   * @param asset The address of the asset being flash-borrowed\n   * @param amount The amount of the asset being flash-borrowed\n   * @param params Variadic packed params to pass to the receiver as extra information\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function flashLoanSimple(\n    address receiverAddress,\n    address asset,\n    uint256 amount,\n    bytes calldata params,\n    uint16 referralCode\n  ) external;\n\n  /**\n   * @notice Returns the user account data across all the reserves\n   * @param user The address of the user\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n   * @return currentLiquidationThreshold The liquidation threshold of the user\n   * @return ltv The loan to value of The user\n   * @return healthFactor The current health factor of the user\n   */\n  function getUserAccountData(\n    address user\n  )\n    external\n    view\n    returns (\n      uint256 totalCollateralBase,\n      uint256 totalDebtBase,\n      uint256 availableBorrowsBase,\n      uint256 currentLiquidationThreshold,\n      uint256 ltv,\n      uint256 healthFactor\n    );\n\n  /**\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n   * interest rate strategy\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\n   */\n  function initReserve(\n    address asset,\n    address aTokenAddress,\n    address stableDebtAddress,\n    address variableDebtAddress,\n    address interestRateStrategyAddress\n  ) external;\n\n  /**\n   * @notice Drop a reserve\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   */\n  function dropReserve(address asset) external;\n\n  /**\n   * @notice Updates the address of the interest rate strategy contract\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param rateStrategyAddress The address of the interest rate strategy contract\n   */\n  function setReserveInterestRateStrategyAddress(\n    address asset,\n    address rateStrategyAddress\n  ) external;\n\n  /**\n   * @notice Sets the configuration bitmap of the reserve as a whole\n   * @dev Only callable by the PoolConfigurator contract\n   * @param asset The address of the underlying asset of the reserve\n   * @param configuration The new configuration bitmap\n   */\n  function setConfiguration(\n    address asset,\n    DataTypes.ReserveConfigurationMap calldata configuration\n  ) external;\n\n  /**\n   * @notice Returns the configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The configuration of the reserve\n   */\n  function getConfiguration(\n    address asset\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\n\n  /**\n   * @notice Returns the configuration of the user across all the reserves\n   * @param user The user address\n   * @return The configuration of the user\n   */\n  function getUserConfiguration(\n    address user\n  ) external view returns (DataTypes.UserConfigurationMap memory);\n\n  /**\n   * @notice Returns the normalized income of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve's normalized income\n   */\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the normalized variable debt per unit of asset\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\n   * \"dynamic\" variable index based on time, current stored index and virtual rate at the current\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\n   * combination with variable debt supply/balances.\n   * If using this function externally, consider that is possible to have an increasing normalized\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\n   * (e.g. only updates with non-zero variable debt supply)\n   * @param asset The address of the underlying asset of the reserve\n   * @return The reserve normalized variable debt\n   */\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n\n  /**\n   * @notice Returns the state and configuration of the reserve\n   * @param asset The address of the underlying asset of the reserve\n   * @return The state and configuration data of the reserve\n   */\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n\n  /**\n   * @notice Validates and finalizes an aToken transfer\n   * @dev Only callable by the overlying aToken of the `asset`\n   * @param asset The address of the underlying asset of the aToken\n   * @param from The user from which the aTokens are transferred\n   * @param to The user receiving the aTokens\n   * @param amount The amount being transferred/withdrawn\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\n   */\n  function finalizeTransfer(\n    address asset,\n    address from,\n    address to,\n    uint256 amount,\n    uint256 balanceFromBefore,\n    uint256 balanceToBefore\n  ) external;\n\n  /**\n   * @notice Returns the list of the underlying assets of all the initialized reserves\n   * @dev It does not include dropped reserves\n   * @return The addresses of the underlying assets of the initialized reserves\n   */\n  function getReservesList() external view returns (address[] memory);\n\n  /**\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\n   * @return The address of the reserve associated with id\n   */\n  function getReserveAddressById(uint16 id) external view returns (address);\n\n  /**\n   * @notice Returns the PoolAddressesProvider connected to this contract\n   * @return The address of the PoolAddressesProvider\n   */\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\n\n  /**\n   * @notice Updates the protocol fee on the bridging\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\n   */\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\n\n  /**\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n   * - A part is sent to aToken holders as extra, one time accumulated interest\n   * - A part is collected by the protocol treasury\n   * @dev The total premium is calculated on the total borrowed amount\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n   * @dev Only callable by the PoolConfigurator contract\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n   */\n  function updateFlashloanPremiums(\n    uint128 flashLoanPremiumTotal,\n    uint128 flashLoanPremiumToProtocol\n  ) external;\n\n  /**\n   * @notice Configures a new category for the eMode.\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n   * The category 0 is reserved as it's the default for volatile assets\n   * @param id The id of the category\n   * @param config The configuration of the category\n   */\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\n\n  /**\n   * @notice Returns the data of an eMode category\n   * @param id The id of the category\n   * @return The configuration data of the category\n   */\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\n\n  /**\n   * @notice Allows a user to use the protocol in eMode\n   * @param categoryId The id of the category\n   */\n  function setUserEMode(uint8 categoryId) external;\n\n  /**\n   * @notice Returns the eMode the user is using\n   * @param user The address of the user\n   * @return The eMode id\n   */\n  function getUserEMode(address user) external view returns (uint256);\n\n  /**\n   * @notice Resets the isolation mode total debt of the given asset to zero\n   * @dev It requires the given asset has zero debt ceiling\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n   */\n  function resetIsolationModeTotalDebt(address asset) external;\n\n  /**\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\n   * @return The percentage of available liquidity to borrow, expressed in bps\n   */\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\n\n  /**\n   * @notice Returns the total fee on flash loans\n   * @return The total fee on flashloans\n   */\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n  /**\n   * @notice Returns the part of the bridge fees sent to protocol\n   * @return The bridge fee sent to the protocol treasury\n   */\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n  /**\n   * @notice Returns the part of the flashloan fees sent to protocol\n   * @return The flashloan fee sent to the protocol treasury\n   */\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n  /**\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\n   * @return The maximum number of reserves supported\n   */\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n  /**\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n   * @param assets The list of reserves for which the minting needs to be executed\n   */\n  function mintToTreasury(address[] calldata assets) external;\n\n  /**\n   * @notice Rescue and transfer tokens locked in this contract\n   * @param token The address of the token\n   * @param to The address of the recipient\n   * @param amount The amount of token to transfer\n   */\n  function rescueTokens(address token, address to, uint256 amount) external;\n\n  /**\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n   * @dev Deprecated: Use the `supply` function instead\n   * @param asset The address of the underlying asset to supply\n   * @param amount The amount to be supplied\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n   *   is a different wallet\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n   *   0 if the action is executed directly by the user, without any middle-man\n   */\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n */\ninterface IPoolAddressesProvider {\n  /**\n   * @dev Emitted when the market identifier is updated.\n   * @param oldMarketId The old id of the market\n   * @param newMarketId The new id of the market\n   */\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n  /**\n   * @dev Emitted when the pool is updated.\n   * @param oldAddress The old address of the Pool\n   * @param newAddress The new address of the Pool\n   */\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool configurator is updated.\n   * @param oldAddress The old address of the PoolConfigurator\n   * @param newAddress The new address of the PoolConfigurator\n   */\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle is updated.\n   * @param oldAddress The old address of the PriceOracle\n   * @param newAddress The new address of the PriceOracle\n   */\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL manager is updated.\n   * @param oldAddress The old address of the ACLManager\n   * @param newAddress The new address of the ACLManager\n   */\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the ACL admin is updated.\n   * @param oldAddress The old address of the ACLAdmin\n   * @param newAddress The new address of the ACLAdmin\n   */\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the price oracle sentinel is updated.\n   * @param oldAddress The old address of the PriceOracleSentinel\n   * @param newAddress The new address of the PriceOracleSentinel\n   */\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the pool data provider is updated.\n   * @param oldAddress The old address of the PoolDataProvider\n   * @param newAddress The new address of the PoolDataProvider\n   */\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when a new proxy is created.\n   * @param id The identifier of the proxy\n   * @param proxyAddress The address of the created proxy contract\n   * @param implementationAddress The address of the implementation contract\n   */\n  event ProxyCreated(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address indexed implementationAddress\n  );\n\n  /**\n   * @dev Emitted when a new non-proxied contract address is registered.\n   * @param id The identifier of the contract\n   * @param oldAddress The address of the old contract\n   * @param newAddress The address of the new contract\n   */\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\n\n  /**\n   * @dev Emitted when the implementation of the proxy registered with id is updated\n   * @param id The identifier of the contract\n   * @param proxyAddress The address of the proxy contract\n   * @param oldImplementationAddress The address of the old implementation contract\n   * @param newImplementationAddress The address of the new implementation contract\n   */\n  event AddressSetAsProxy(\n    bytes32 indexed id,\n    address indexed proxyAddress,\n    address oldImplementationAddress,\n    address indexed newImplementationAddress\n  );\n\n  /**\n   * @notice Returns the id of the Aave market to which this contract points to.\n   * @return The market id\n   */\n  function getMarketId() external view returns (string memory);\n\n  /**\n   * @notice Associates an id with a specific PoolAddressesProvider.\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n   * identify and validate multiple Aave markets.\n   * @param newMarketId The market id\n   */\n  function setMarketId(string calldata newMarketId) external;\n\n  /**\n   * @notice Returns an address by its identifier.\n   * @dev The returned address might be an EOA or a contract, potentially proxied\n   * @dev It returns ZERO if there is no registered address with the given id\n   * @param id The id\n   * @return The address of the registered for the specified id\n   */\n  function getAddress(bytes32 id) external view returns (address);\n\n  /**\n   * @notice General function to update the implementation of a proxy registered with\n   * certain `id`. If there is no proxy registered, it will instantiate one and\n   * set as implementation the `newImplementationAddress`.\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n   * setter function, in order to avoid unexpected consequences\n   * @param id The id\n   * @param newImplementationAddress The address of the new implementation\n   */\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\n\n  /**\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n   * @param id The id\n   * @param newAddress The address to set\n   */\n  function setAddress(bytes32 id, address newAddress) external;\n\n  /**\n   * @notice Returns the address of the Pool proxy.\n   * @return The Pool proxy address\n   */\n  function getPool() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the Pool, or creates a proxy\n   * setting the new `pool` implementation when the function is called for the first time.\n   * @param newPoolImpl The new Pool implementation\n   */\n  function setPoolImpl(address newPoolImpl) external;\n\n  /**\n   * @notice Returns the address of the PoolConfigurator proxy.\n   * @return The PoolConfigurator proxy address\n   */\n  function getPoolConfigurator() external view returns (address);\n\n  /**\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n   */\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n  /**\n   * @notice Returns the address of the price oracle.\n   * @return The address of the PriceOracle\n   */\n  function getPriceOracle() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle.\n   * @param newPriceOracle The address of the new PriceOracle\n   */\n  function setPriceOracle(address newPriceOracle) external;\n\n  /**\n   * @notice Returns the address of the ACL manager.\n   * @return The address of the ACLManager\n   */\n  function getACLManager() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL manager.\n   * @param newAclManager The address of the new ACLManager\n   */\n  function setACLManager(address newAclManager) external;\n\n  /**\n   * @notice Returns the address of the ACL admin.\n   * @return The address of the ACL admin\n   */\n  function getACLAdmin() external view returns (address);\n\n  /**\n   * @notice Updates the address of the ACL admin.\n   * @param newAclAdmin The address of the new ACL admin\n   */\n  function setACLAdmin(address newAclAdmin) external;\n\n  /**\n   * @notice Returns the address of the price oracle sentinel.\n   * @return The address of the PriceOracleSentinel\n   */\n  function getPriceOracleSentinel() external view returns (address);\n\n  /**\n   * @notice Updates the address of the price oracle sentinel.\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n   */\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n  /**\n   * @notice Returns the address of the data provider.\n   * @return The address of the DataProvider\n   */\n  function getPoolDataProvider() external view returns (address);\n\n  /**\n   * @notice Updates the address of the data provider.\n   * @param newDataProvider The address of the new DataProvider\n   */\n  function setPoolDataProvider(address newDataProvider) external;\n}\n"
    },
    "@aave/core-v3/contracts/interfaces/IPriceOracleGetter.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\n/**\n * @title IPriceOracleGetter\n * @author Aave\n * @notice Interface for the Aave price oracle.\n */\ninterface IPriceOracleGetter {\n  /**\n   * @notice Returns the base currency address\n   * @dev Address 0x0 is reserved for USD as base currency.\n   * @return Returns the base currency address.\n   */\n  function BASE_CURRENCY() external view returns (address);\n\n  /**\n   * @notice Returns the base currency unit\n   * @dev 1 ether for ETH, 1e8 for USD.\n   * @return Returns the base currency unit.\n   */\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\n\n  /**\n   * @notice Returns the asset price in the base currency\n   * @param asset The address of the asset\n   * @return The price of the asset\n   */\n  function getAssetPrice(address asset) external view returns (uint256);\n}\n"
    },
    "@aave/core-v3/contracts/misc/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.0;\n\ninterface IWETH {\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\n}\n"
    },
    "@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nlibrary DataTypes {\n  struct ReserveData {\n    //stores the reserve configuration\n    ReserveConfigurationMap configuration;\n    //the liquidity index. Expressed in ray\n    uint128 liquidityIndex;\n    //the current supply rate. Expressed in ray\n    uint128 currentLiquidityRate;\n    //variable borrow index. Expressed in ray\n    uint128 variableBorrowIndex;\n    //the current variable borrow rate. Expressed in ray\n    uint128 currentVariableBorrowRate;\n    //the current stable borrow rate. Expressed in ray\n    uint128 currentStableBorrowRate;\n    //timestamp of last update\n    uint40 lastUpdateTimestamp;\n    //the id of the reserve. Represents the position in the list of the active reserves\n    uint16 id;\n    //aToken address\n    address aTokenAddress;\n    //stableDebtToken address\n    address stableDebtTokenAddress;\n    //variableDebtToken address\n    address variableDebtTokenAddress;\n    //address of the interest rate strategy\n    address interestRateStrategyAddress;\n    //the current treasury balance, scaled\n    uint128 accruedToTreasury;\n    //the outstanding unbacked aTokens minted through the bridging feature\n    uint128 unbacked;\n    //the outstanding debt borrowed against this asset in isolation mode\n    uint128 isolationModeTotalDebt;\n  }\n\n  struct ReserveConfigurationMap {\n    //bit 0-15: LTV\n    //bit 16-31: Liq. threshold\n    //bit 32-47: Liq. bonus\n    //bit 48-55: Decimals\n    //bit 56: reserve is active\n    //bit 57: reserve is frozen\n    //bit 58: borrowing is enabled\n    //bit 59: stable rate borrowing enabled\n    //bit 60: asset is paused\n    //bit 61: borrowing in isolation mode is enabled\n    //bit 62: siloed borrowing enabled\n    //bit 63: flashloaning enabled\n    //bit 64-79: reserve factor\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n    //bit 152-167 liquidation protocol fee\n    //bit 168-175 eMode category\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n    //bit 252-255 unused\n\n    uint256 data;\n  }\n\n  struct UserConfigurationMap {\n    /**\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\n     * asset is borrowed by the user.\n     */\n    uint256 data;\n  }\n\n  struct EModeCategory {\n    // each eMode category has a custom ltv and liquidation threshold\n    uint16 ltv;\n    uint16 liquidationThreshold;\n    uint16 liquidationBonus;\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n    address priceSource;\n    string label;\n  }\n\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\n\n  struct ReserveCache {\n    uint256 currScaledVariableDebt;\n    uint256 nextScaledVariableDebt;\n    uint256 currPrincipalStableDebt;\n    uint256 currAvgStableBorrowRate;\n    uint256 currTotalStableDebt;\n    uint256 nextAvgStableBorrowRate;\n    uint256 nextTotalStableDebt;\n    uint256 currLiquidityIndex;\n    uint256 nextLiquidityIndex;\n    uint256 currVariableBorrowIndex;\n    uint256 nextVariableBorrowIndex;\n    uint256 currLiquidityRate;\n    uint256 currVariableBorrowRate;\n    uint256 reserveFactor;\n    ReserveConfigurationMap reserveConfiguration;\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    uint40 reserveLastUpdateTimestamp;\n    uint40 stableDebtLastUpdateTimestamp;\n  }\n\n  struct ExecuteLiquidationCallParams {\n    uint256 reservesCount;\n    uint256 debtToCover;\n    address collateralAsset;\n    address debtAsset;\n    address user;\n    bool receiveAToken;\n    address priceOracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteSupplyParams {\n    address asset;\n    uint256 amount;\n    address onBehalfOf;\n    uint16 referralCode;\n  }\n\n  struct ExecuteBorrowParams {\n    address asset;\n    address user;\n    address onBehalfOf;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint16 referralCode;\n    bool releaseUnderlying;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n  }\n\n  struct ExecuteRepayParams {\n    address asset;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    address onBehalfOf;\n    bool useATokens;\n  }\n\n  struct ExecuteWithdrawParams {\n    address asset;\n    uint256 amount;\n    address to;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ExecuteSetUserEModeParams {\n    uint256 reservesCount;\n    address oracle;\n    uint8 categoryId;\n  }\n\n  struct FinalizeTransferParams {\n    address asset;\n    address from;\n    address to;\n    uint256 amount;\n    uint256 balanceFromBefore;\n    uint256 balanceToBefore;\n    uint256 reservesCount;\n    address oracle;\n    uint8 fromEModeCategory;\n  }\n\n  struct FlashloanParams {\n    address receiverAddress;\n    address[] assets;\n    uint256[] amounts;\n    uint256[] interestRateModes;\n    address onBehalfOf;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n    uint256 maxStableRateBorrowSizePercent;\n    uint256 reservesCount;\n    address addressesProvider;\n    uint8 userEModeCategory;\n    bool isAuthorizedFlashBorrower;\n  }\n\n  struct FlashloanSimpleParams {\n    address receiverAddress;\n    address asset;\n    uint256 amount;\n    bytes params;\n    uint16 referralCode;\n    uint256 flashLoanPremiumToProtocol;\n    uint256 flashLoanPremiumTotal;\n  }\n\n  struct FlashLoanRepaymentParams {\n    uint256 amount;\n    uint256 totalPremium;\n    uint256 flashLoanPremiumToProtocol;\n    address asset;\n    address receiverAddress;\n    uint16 referralCode;\n  }\n\n  struct CalculateUserAccountDataParams {\n    UserConfigurationMap userConfig;\n    uint256 reservesCount;\n    address user;\n    address oracle;\n    uint8 userEModeCategory;\n  }\n\n  struct ValidateBorrowParams {\n    ReserveCache reserveCache;\n    UserConfigurationMap userConfig;\n    address asset;\n    address userAddress;\n    uint256 amount;\n    InterestRateMode interestRateMode;\n    uint256 maxStableLoanPercent;\n    uint256 reservesCount;\n    address oracle;\n    uint8 userEModeCategory;\n    address priceOracleSentinel;\n    bool isolationModeActive;\n    address isolationModeCollateralAddress;\n    uint256 isolationModeDebtCeiling;\n  }\n\n  struct ValidateLiquidationCallParams {\n    ReserveCache debtReserveCache;\n    uint256 totalDebt;\n    uint256 healthFactor;\n    address priceOracleSentinel;\n  }\n\n  struct CalculateInterestRatesParams {\n    uint256 unbacked;\n    uint256 liquidityAdded;\n    uint256 liquidityTaken;\n    uint256 totalStableDebt;\n    uint256 totalVariableDebt;\n    uint256 averageStableBorrowRate;\n    uint256 reserveFactor;\n    address reserve;\n    address aToken;\n  }\n\n  struct InitReserveParams {\n    address asset;\n    address aTokenAddress;\n    address stableDebtAddress;\n    address variableDebtAddress;\n    address interestRateStrategyAddress;\n    uint16 reservesCount;\n    uint16 maxNumberReserves;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "modular-account-libs/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n// Ported from @openzeppelin/contracts@v5.0.2\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "modular-account-libs/interfaces/IPlugin.sol": {
      "content": "// This work is marked with CC0 1.0 Universal.\n//\n// SPDX-License-Identifier: CC0-1.0\n//\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\n\npragma solidity ^0.8.20;\n\nimport {UserOperation} from \"./UserOperation.sol\";\n\nenum ManifestAssociatedFunctionType {\n    // Function is not defined.\n    NONE,\n    // Function belongs to this plugin.\n    SELF,\n    // Function belongs to an external plugin provided as a dependency during plugin installation. Plugins MAY depend\n    // on external validation functions. It MUST NOT depend on external hooks, or installation will fail.\n    DEPENDENCY,\n    // Resolves to a magic value to always bypass runtime validation for a given function.\n    // This is only assignable on runtime validation functions. If it were to be used on a user op validation function,\n    // it would risk burning gas from the account. When used as a hook in any hook location, it is equivalent to not\n    // setting a hook and is therefore disallowed.\n    RUNTIME_VALIDATION_ALWAYS_ALLOW,\n    // Resolves to a magic value to always fail in a hook for a given function.\n    // This is only assignable to pre hooks (pre validation and pre execution). It should not be used on\n    // validation functions themselves, because this is equivalent to leaving the validation functions unset.\n    // It should not be used in post-exec hooks, because if it is known to always revert, that should happen\n    // as early as possible to save gas.\n    PRE_HOOK_ALWAYS_DENY\n}\n\n/// @dev For functions of type `ManifestAssociatedFunctionType.DEPENDENCY`, the MSCA MUST find the plugin address\n/// of the function at `dependencies[dependencyIndex]` during the call to `installPlugin(config)`.\nstruct ManifestFunction {\n    ManifestAssociatedFunctionType functionType;\n    uint8 functionId;\n    uint256 dependencyIndex;\n}\n\nstruct ManifestAssociatedFunction {\n    bytes4 executionSelector;\n    ManifestFunction associatedFunction;\n}\n\nstruct ManifestExecutionHook {\n    bytes4 executionSelector;\n    ManifestFunction preExecHook;\n    ManifestFunction postExecHook;\n}\n\nstruct ManifestExternalCallPermission {\n    address externalAddress;\n    bool permitAnySelector;\n    bytes4[] selectors;\n}\n\nstruct SelectorPermission {\n    bytes4 functionSelector;\n    string permissionDescription;\n}\n\n/// @dev A struct holding fields to describe the plugin in a purely view context. Intended for front end clients.\nstruct PluginMetadata {\n    // A human-readable name of the plugin.\n    string name;\n    // The version of the plugin, following the semantic versioning scheme.\n    string version;\n    // The author field SHOULD be a username representing the identity of the user or organization\n    // that created this plugin.\n    string author;\n    // String descriptions of the relative sensitivity of specific functions. The selectors MUST be selectors for\n    // functions implemented by this plugin.\n    SelectorPermission[] permissionDescriptors;\n}\n\n/// @dev A struct describing how the plugin should be installed on a modular account.\nstruct PluginManifest {\n    // List of ERC-165 interface IDs to add to account to support introspection checks. This MUST NOT include\n    // IPlugin's interface ID.\n    bytes4[] interfaceIds;\n    // If this plugin depends on other plugins' validation functions, the interface IDs of those plugins MUST be\n    // provided here, with its position in the array matching the `dependencyIndex` members of `ManifestFunction`\n    // structs used in the manifest.\n    bytes4[] dependencyInterfaceIds;\n    // Execution functions defined in this plugin to be installed on the MSCA.\n    bytes4[] executionFunctions;\n    // Plugin execution functions already installed on the MSCA that this plugin will be able to call.\n    bytes4[] permittedExecutionSelectors;\n    // Boolean to indicate whether the plugin can call any external address.\n    bool permitAnyExternalAddress;\n    // Boolean to indicate whether the plugin needs access to spend native tokens of the account. If false, the\n    // plugin MUST still be able to spend up to the balance that it sends to the account in the same call.\n    bool canSpendNativeToken;\n    ManifestExternalCallPermission[] permittedExternalCalls;\n    ManifestAssociatedFunction[] userOpValidationFunctions;\n    ManifestAssociatedFunction[] runtimeValidationFunctions;\n    ManifestAssociatedFunction[] preUserOpValidationHooks;\n    ManifestAssociatedFunction[] preRuntimeValidationHooks;\n    ManifestExecutionHook[] executionHooks;\n}\n\n/// @title Plugin Interface\ninterface IPlugin {\n    /// @notice Initialize plugin data for the modular account.\n    /// @dev Called by the modular account during `installPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\n    /// modular account.\n    function onInstall(bytes calldata data) external;\n\n    /// @notice Clear plugin data for the modular account.\n    /// @dev Called by the modular account during `uninstallPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular\n    /// account.\n    function onUninstall(bytes calldata data) external;\n\n    /// @notice Run the pre user operation validation hook specified by the `functionId`.\n    /// @dev Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function preUserOpValidationHook(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        returns (uint256);\n\n    /// @notice Run the user operation validationFunction specified by the `functionId`.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function userOpValidationFunction(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        returns (uint256);\n\n    /// @notice Run the pre runtime validation hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function preRuntimeValidationHook(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\n\n    /// @notice Run the runtime validationFunction specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function runtimeValidationFunction(uint8 functionId, address sender, uint256 value, bytes calldata data) external;\n\n    /// @notice Run the pre execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    /// @return Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\n    function preExecutionHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        returns (bytes memory);\n\n    /// @notice Run the post execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param preExecHookData The context returned by its associated pre execution hook.\n    function postExecutionHook(uint8 functionId, bytes calldata preExecHookData) external;\n\n    /// @notice Describe the contents and intended configuration of the plugin.\n    /// @dev This manifest MUST stay constant over time.\n    /// @return A manifest describing the contents and intended configuration of the plugin.\n    function pluginManifest() external pure returns (PluginManifest memory);\n\n    /// @notice Describe the metadata of the plugin.\n    /// @dev This metadata MUST stay constant over time.\n    /// @return A metadata struct describing the plugin.\n    function pluginMetadata() external pure returns (PluginMetadata memory);\n}\n"
    },
    "modular-account-libs/interfaces/IPluginExecutor.sol": {
      "content": "// This work is marked with CC0 1.0 Universal.\n//\n// SPDX-License-Identifier: CC0-1.0\n//\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\n\npragma solidity ^0.8.20;\n\n/// @title Plugin Executor Interface\ninterface IPluginExecutor {\n    /// @notice Execute a call from a plugin through the account.\n    /// @dev Permissions must be granted to the calling plugin for the call to go through.\n    /// @param data The calldata to send to the account.\n    /// @return The return data from the call.\n    function executeFromPlugin(bytes calldata data) external payable returns (bytes memory);\n\n    /// @notice Execute a call from a plugin to a non-plugin address.\n    /// @dev If the target is a plugin, the call SHOULD revert. Permissions must be granted to the calling plugin\n    /// for the call to go through.\n    /// @param target The address to be called.\n    /// @param value The value to send with the call.\n    /// @param data The calldata to send to the target.\n    /// @return The return data from the call.\n    function executeFromPluginExternal(address target, uint256 value, bytes calldata data)\n        external\n        payable\n        returns (bytes memory);\n}\n"
    },
    "modular-account-libs/interfaces/UserOperation.sol": {
      "content": "// This work is marked with CC0 1.0 Universal.\n//\n// SPDX-License-Identifier: CC0-1.0\n//\n// To view a copy of this license, visit http://creativecommons.org/publicdomain/zero/1.0\n\npragma solidity ^0.8.20;\n\n/// @notice User Operation struct as defined in ERC-4337 v0.6\nstruct UserOperation {\n    address sender;\n    uint256 nonce;\n    bytes initCode;\n    bytes callData;\n    uint256 callGasLimit;\n    uint256 verificationGasLimit;\n    uint256 preVerificationGas;\n    uint256 maxFeePerGas;\n    uint256 maxPriorityFeePerGas;\n    bytes paymasterAndData;\n    bytes signature;\n}\n"
    },
    "modular-account-libs/plugins/BasePlugin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n// See LICENSE-MIT file for more information\n\npragma solidity ^0.8.20;\n\nimport {ERC165} from \"./ERC165.sol\";\n\nimport {UserOperation} from \"../interfaces/UserOperation.sol\";\nimport {IPlugin, PluginManifest, PluginMetadata} from \"../interfaces/IPlugin.sol\";\n\n/// @title Base contract for plugins\n/// @dev Implements ERC-165 to support IPlugin's interface, which is a requirement\n/// for plugin installation. This also ensures that plugin interactions cannot\n/// happen via the standard execution funtions `execute`, `executeBatch`, and `executeFromPluginExternal`.\n/// Note that the plugins implementing BasePlugin cannot be installed within the account constructor. unless\n/// `onInstall` is overriden to not check the codesize of caller. The codesize check is done to prevent an EOA\n/// from accidentally calling the plugin and initiating state, which will make it unusable in the future when EOAs\n/// can be upgraded to smart contract accounts.\nabstract contract BasePlugin is ERC165, IPlugin {\n    error AlreadyInitialized();\n    error InvalidAction();\n    error NotContractCaller(address caller);\n    error NotImplemented(bytes4 selector, uint8 functionId);\n    error NotInitialized();\n\n    modifier isNotInitialized(address account) {\n        if (_isInitialized(account)) {\n            revert AlreadyInitialized();\n        }\n        _;\n    }\n\n    modifier isInitialized(address account) {\n        if (!_isInitialized(account)) {\n            revert NotInitialized();\n        }\n        _;\n    }\n\n    modifier staysInitialized(address account) {\n        if (!_isInitialized(account)) {\n            revert NotInitialized();\n        }\n        _;\n        if (!_isInitialized(account)) {\n            revert InvalidAction();\n        }\n    }\n\n    /// @notice Initialize plugin data for the modular account.\n    /// @dev Called by the modular account during `installPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\n    /// modular account.\n    function onInstall(bytes calldata data) external virtual {\n        if (msg.sender.code.length == 0) {\n            revert NotContractCaller(msg.sender);\n        }\n        _onInstall(data);\n    }\n\n    /// @notice Clear plugin data for the modular account.\n    /// @dev Called by the modular account during `uninstallPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to clear plugin data for the modular\n    /// account.\n    function onUninstall(bytes calldata data) external virtual {\n        (data);\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @notice Run the pre user operation validation hook specified by the `functionId`.\n    /// @dev Pre user operation validation hooks MUST NOT return an authorizer value other than 0 or 1.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function preUserOpValidationHook(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        virtual\n        returns (uint256)\n    {\n        (functionId, userOp, userOpHash);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the user operation validationFunction specified by the `functionId`.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param userOp The user operation.\n    /// @param userOpHash The user operation hash.\n    /// @return Packed validation data for validAfter (6 bytes), validUntil (6 bytes), and authorizer (20 bytes).\n    function userOpValidationFunction(uint8 functionId, UserOperation calldata userOp, bytes32 userOpHash)\n        external\n        virtual\n        returns (uint256)\n    {\n        (functionId, userOp, userOpHash);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the pre runtime validation hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function preRuntimeValidationHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        virtual\n    {\n        (functionId, sender, value, data);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the runtime validationFunction specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    function runtimeValidationFunction(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        virtual\n    {\n        (functionId, sender, value, data);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the pre execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param sender The caller address.\n    /// @param value The call value.\n    /// @param data The calldata sent.\n    /// @return Context to pass to a post execution hook, if present. An empty bytes array MAY be returned.\n    function preExecutionHook(uint8 functionId, address sender, uint256 value, bytes calldata data)\n        external\n        virtual\n        returns (bytes memory)\n    {\n        (functionId, sender, value, data);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Run the post execution hook specified by the `functionId`.\n    /// @dev To indicate the entire call should revert, the function MUST revert.\n    /// @param functionId An identifier that routes the call to different internal implementations, should there be\n    /// more than one.\n    /// @param preExecHookData The context returned by its associated pre execution hook.\n    function postExecutionHook(uint8 functionId, bytes calldata preExecHookData) external virtual {\n        (functionId, preExecHookData);\n        revert NotImplemented(msg.sig, functionId);\n    }\n\n    /// @notice Describe the contents and intended configuration of the plugin.\n    /// @dev This manifest MUST stay constant over time.\n    /// @return A manifest describing the contents and intended configuration of the plugin.\n    function pluginManifest() external pure virtual returns (PluginManifest memory) {\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @notice Describe the metadata of the plugin.\n    /// @dev This metadata MUST stay constant over time.\n    /// @return A metadata struct describing the plugin.\n    function pluginMetadata() external pure virtual returns (PluginMetadata memory) {\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @dev Returns true if this contract implements the interface defined by\n    /// `interfaceId`. See the corresponding\n    /// https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    /// to learn more about how these ids are created.\n    ///\n    /// This function call must use less than 30 000 gas.\n    ///\n    /// Supporting the IPlugin interface is a requirement for plugin installation. This is also used\n    /// by the modular account to prevent standard execution functions `execute`, `executeBatch`, and\n    /// `executeFromPluginExternal` from making calls to plugins.\n    /// @param interfaceId The interface ID to check for support.\n    /// @return True if the contract supports `interfaceId`.\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IPlugin).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /// @notice Initialize plugin data for the modular account.\n    /// @dev Called by the modular account during `installPlugin`.\n    /// @param data Optional bytes array to be decoded and used by the plugin to setup initial plugin data for the\n    /// modular account.\n    function _onInstall(bytes calldata data) internal virtual {\n        (data);\n        revert NotImplemented(msg.sig, 0);\n    }\n\n    /// @notice Check if the account has initialized this plugin yet\n    /// @dev This function should be overwritten for plugins that have state-changing onInstall's\n    /// @param account The account to check\n    /// @return True if the account has initialized this plugin\n    // solhint-disable-next-line no-empty-blocks\n    function _isInitialized(address account) internal view virtual returns (bool) {}\n}\n"
    },
    "modular-account-libs/plugins/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n// Ported from @openzeppelin/contracts@v5.0.2\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../interfaces/IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "src/actions/aave-v3/AaveV3Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IPool} from \"@aave/core-v3/contracts/interfaces/IPool.sol\";\nimport {IPriceOracleGetter} from \"@aave/core-v3/contracts/interfaces/IPriceOracleGetter.sol\";\nimport {IWETH} from \"@aave/core-v3/contracts/misc/interfaces/IWETH.sol\";\nimport {ERC20PluginLib} from \"../lib/ERC20PluginLib.sol\";\nimport {AaveV3ExecutionLib} from \"./lib/AaveV3ExecutionLib.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nerror AaveV3Base__ZeroAmountNotValid();\nerror AaveV3Base__HealthFactorNotValid();\n\ncontract AaveV3Base {\n    using ERC20PluginLib for address;\n    using AaveV3ExecutionLib for address;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       StateVariable       ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    uint256 private constant PERCENTAGE_FACTOR = 10000;\n\n    IPool public immutable pool;\n    IWETH public immutable WETH;\n    IPriceOracleGetter public immutable oracle;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Modifier            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    modifier nonZeroAmount(uint256 amount) {\n        if (amount == 0) {\n            revert AaveV3Base__ZeroAmountNotValid();\n        }\n        _;\n    }\n\n    modifier noValidHealthFactor(uint256 hFactor) {\n        if (hFactor < 1e18) {\n            revert AaveV3Base__HealthFactorNotValid();\n        }\n        _;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _aaveV3Pool, address _WETH, address _priceOracle) {}\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Execution functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    /* ====== Base AAVE V3 Functions ====== */\n\n    function supply(address asset, uint256 amount) public nonZeroAmount(amount) {\n        msg.sender.approveToken(address(pool), asset, amount);\n\n        msg.sender.supply(address(pool), asset, amount);\n    }\n\n    function supplyETH(uint256 amount) public nonZeroAmount(amount) {\n        msg.sender.depositETH(address(WETH), amount);\n\n        supply(address(WETH), amount);\n    }\n\n    function withdraw(address asset, uint256 amount) public nonZeroAmount(amount) {}\n\n    function withdrawETH(uint256 amount) public nonZeroAmount(amount) {}\n\n    function borrow(address asset, uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n    function borrowETH(uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n    function repay(address asset, uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n    function repayETH(uint256 amount, uint256 interestRateMode) public nonZeroAmount(amount) {}\n\n    /* ====== Internal Functions ====== */\n\n    function _calculateBorrowAmount(address wallet, address asset, uint256 percentage)\n        internal\n        view\n        returns (uint256)\n    {\n        (,, uint256 availableBorrowsBase,,,) = pool.getUserAccountData(wallet);\n\n        uint256 price = oracle.getAssetPrice(asset);\n        uint256 baseCurrencyDecimals = oracle.BASE_CURRENCY_UNIT();\n        uint256 decimals = IERC20Metadata(asset).decimals();\n\n        uint256 maxBorrowAmount = availableBorrowsBase * baseCurrencyDecimals / price;\n        return (maxBorrowAmount * 10 ** decimals / baseCurrencyDecimals) * percentage / PERCENTAGE_FACTOR;\n    }\n\n    function _calculateAdditionalCollateral(address wallet, address asset, uint256 targetHealthFactor)\n        internal\n        view\n        returns (uint256)\n    {\n        (uint256 currentCol, uint256 currentDebt,, uint256 currentLT,,) = pool.getUserAccountData(wallet);\n\n        uint256 targetCollateral = (targetHealthFactor * currentDebt / 1e18) * PERCENTAGE_FACTOR / currentLT;\n\n        if (targetCollateral < currentCol) {\n            return 0;\n        }\n\n        uint256 additionalCollateral = targetCollateral - currentCol;\n\n        uint256 assetPrice = oracle.getAssetPrice(asset);\n        uint256 decimals = IERC20Metadata(asset).decimals();\n\n        return assetPrice > 0 ? (additionalCollateral * 10 ** decimals) / assetPrice : 0;\n    }\n}\n"
    },
    "src/actions/aave-v3/lib/AaveV3ExecutionLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\nimport {IPool} from \"@aave/core-v3/contracts/interfaces/IPool.sol\";\n\nlibrary AaveV3ExecutionLib {\n    function supply(address wallet, address pool, address asset, uint256 amount) internal {\n        bytes memory _data = abi.encodeCall(IPool.supply, (asset, amount, wallet, 0));\n\n        IPluginExecutor(wallet).executeFromPluginExternal(pool, 0, _data);\n    }\n\n    function borrow(address wallet, address pool, address asset, uint256 amount, uint256 interestRateMode) internal {\n        bytes memory _data = abi.encodeCall(IPool.borrow, (asset, amount, interestRateMode, 0, msg.sender));\n        IPluginExecutor(wallet).executeFromPluginExternal(pool, 0, _data);\n    }\n\n    function depositETH(address wallet, address _WETH, uint256 amount) internal {}\n\n    function withdrawETH(address wallet, address _WETH, uint256 amount) internal {}\n}\n"
    },
    "src/actions/lib/ERC20PluginLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror ERC20PluginLib__FailedToApproveTokens();\n\nlibrary ERC20PluginLib {\n    function approveToken(address wallet, address spender, address token, uint256 amount) internal {\n        bytes memory _data = abi.encodeCall(IERC20.approve, (spender, amount));\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(token, 0, _data);\n        bool success = abi.decode(_res, (bool));\n\n        if (!success) {\n            revert ERC20PluginLib__FailedToApproveTokens();\n        }\n    }\n}\n"
    },
    "src/actions/uniswap-v2/lib/UniswapV2RouterExecutionLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\n\nlibrary UniswapV2RouterExecutionLib {\n    function swapExactTokensForTokens(\n        address wallet,\n        address router,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal returns (uint256[] memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactTokensForTokens, (amountIn, amountOutMin, path, to, deadline));\n\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(router, 0, _data);\n\n        return abi.decode(_res, (uint256[]));\n    }\n\n    function swapExactTokensForETH(\n        address wallet,\n        address router,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal returns (uint256[] memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactTokensForETH, (amountIn, amountOutMin, path, to, deadline));\n\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(router, 0, _data);\n\n        return abi.decode(_res, (uint256[]));\n    }\n\n    function swapTokensForExactTokens(\n        address wallet,\n        address router,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal returns (uint256[] memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapTokensForExactTokens, (amountOut, amountInMax, path, to, deadline));\n\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(router, 0, _data);\n\n        return abi.decode(_res, (uint256[]));\n    }\n\n    function swapExactETHForTokens(\n        address wallet,\n        address router,\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal returns (uint256[] memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapExactETHForTokens, (amountOutMin, path, to, deadline));\n\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(router, amountIn, _data);\n\n        return abi.decode(_res, (uint256[]));\n    }\n\n    function swapETHForExactTokens(\n        address wallet,\n        address router,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal returns (uint256[] memory) {\n        bytes memory _data = abi.encodeCall(IUniswapV2Router01.swapETHForExactTokens, (amountOut, path, to, deadline));\n\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(router, amountInMax, _data);\n\n        return abi.decode(_res, (uint256[]));\n    }\n\n    function swapTokensForExactETH(\n        address wallet,\n        address router,\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] memory path,\n        address to,\n        uint256 deadline\n    ) internal returns (uint256[] memory) {\n        bytes memory _data =\n            abi.encodeCall(IUniswapV2Router01.swapTokensForExactETH, (amountOut, amountInMax, path, to, deadline));\n\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(router, 0, _data);\n\n        return abi.decode(_res, (uint256[]));\n    }\n\n    function addLiquidity(\n        address wallet,\n        address router,\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) internal returns (uint256, uint256, uint256) {\n        bytes memory _data = abi.encodeCall(\n            IUniswapV2Router01.addLiquidity,\n            (tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin, to, deadline)\n        );\n\n        bytes memory _res = IPluginExecutor(wallet).executeFromPluginExternal(router, 0, _data);\n\n        return abi.decode(_res, (uint256, uint256, uint256));\n    }\n\n    function addLiquidityETH(\n        address wallet,\n        address router,\n        address token,\n        uint256 amountETHDesired,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH, uint256 liquidity) {}\n\n    function removeLiquidity(\n        address wallet,\n        address router,\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB) {}\n\n    function removeLiquidityETH(\n        address wallet,\n        address router,\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH) {}\n}\n"
    },
    "src/actions/uniswap-v2/UniswapV2Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\nimport {UniswapV2RouterExecutionLib} from \"./lib/UniswapV2RouterExecutionLib.sol\";\nimport {IUniswapV2Router01} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Pair} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror UniswapV2Base__FailedToApproveTokens();\nerror UniswapV2Base__PoolPairDoesNotExist();\nerror UniswapV2Base__NotZeroAmountForBothTokensAllowed();\nerror UniswapV2Base__NoValidPercentageAmount();\nerror UniswapV2Base__NoZeroAmountValid();\n\ncontract UniswapV2Base {\n    using UniswapV2RouterExecutionLib for address;\n\n    uint256 constant DELTA_DEADLINE = 30 seconds;\n    uint256 constant PERCENTAGE_FACTOR = 1000;\n\n    IUniswapV2Router01 public immutable router;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃         Events            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n    event TokenSwap(address[] path, uint256[] amountsOut);\n    event LiquidityAdded(address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint256 liquidity);\n    event LiquidiyRemoved(address tokenA, address tokenB, uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Modifier            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    modifier validPercentage(uint256 percentage) {\n        if (percentage == 0 || percentage > PERCENTAGE_FACTOR) {\n            revert UniswapV2Base__NoValidPercentageAmount();\n        }\n        _;\n    }\n\n    modifier nonZeroAmount(uint256 amount) {\n        if (amount == 0) {\n            revert UniswapV2Base__NoZeroAmountValid();\n        }\n        _;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _router) {\n        router = IUniswapV2Router01(_router);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Execution functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    /* ====== Base Swap Functions ====== */\n\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path)\n        public\n        nonZeroAmount(amountIn)\n    {\n        _approveToken(path[0], amountIn);\n\n        uint256[] memory amountsOut =\n            msg.sender.swapExactTokensForTokens(address(router), amountIn, amountOutMin, path, msg.sender, _deadline());\n        // router.swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), _deadline());\n\n        emit TokenSwap(path, amountsOut);\n    }\n\n    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path)\n        external\n        nonZeroAmount(amountOut)\n    {\n        _approveToken(path[0], amountInMax);\n\n        uint256[] memory amountsOut =\n            msg.sender.swapTokensForExactTokens(address(router), amountOut, amountInMax, path, msg.sender, _deadline());\n\n        uint256 allowance = IERC20(path[0]).allowance(msg.sender, address(router));\n\n        if (allowance > 0) {\n            _approveToken(path[0], 0);\n        }\n\n        emit TokenSwap(path, amountsOut);\n    }\n\n    function swapExactETHForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path)\n        public\n        nonZeroAmount(amountIn)\n    {\n        uint256[] memory amountsOut =\n            msg.sender.swapExactETHForTokens(address(router), amountIn, amountOutMin, path, msg.sender, _deadline());\n\n        emit TokenSwap(path, amountsOut);\n    }\n\n    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path)\n        external\n        nonZeroAmount(amountOut)\n    {\n        _approveToken(path[0], amountInMax);\n\n        uint256[] memory amountsOut =\n            msg.sender.swapTokensForExactETH(address(router), amountOut, amountInMax, path, msg.sender, _deadline());\n\n        uint256 allowance = IERC20(path[0]).allowance(msg.sender, address(router));\n\n        if (allowance > 0) {\n            _approveToken(path[0], 0);\n        }\n\n        emit TokenSwap(path, amountsOut);\n    }\n\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path)\n        public\n        nonZeroAmount(amountIn)\n    {\n        _approveToken(path[0], amountIn);\n\n        uint256[] memory amountsOut =\n            msg.sender.swapExactTokensForETH(address(router), amountIn, amountOutMin, path, msg.sender, _deadline());\n\n        emit TokenSwap(path, amountsOut);\n    }\n\n    function swapETHForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path)\n        external\n        nonZeroAmount(amountOut)\n    {\n        if (amountInMax == 0) {\n            amountInMax = _getMaxAmountIn(path, amountOut);\n        }\n\n        uint256[] memory amountsOut =\n            msg.sender.swapETHForExactTokens(address(router), amountInMax, amountOut, path, msg.sender, _deadline());\n\n        emit TokenSwap(path, amountsOut);\n    }\n\n    /* ====== Base LP Functions ====== */\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) public {\n        if (amountADesired == 0 && amountBDesired == 0) {\n            revert UniswapV2Base__NotZeroAmountForBothTokensAllowed();\n        }\n\n        if (amountADesired == 0) {\n            amountADesired = _calculateAmountForLP(tokenB, amountBDesired, _getPoolPair(tokenA, tokenB));\n        }\n\n        if (amountBDesired == 0) {\n            amountBDesired = _calculateAmountForLP(tokenA, amountADesired, _getPoolPair(tokenA, tokenB));\n        }\n\n        _approveToken(tokenA, amountADesired);\n        _approveToken(tokenB, amountBDesired);\n\n        (uint256 amountA, uint256 amountB, uint256 liquidity) = msg.sender.addLiquidity(\n            address(router),\n            tokenA,\n            tokenB,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin,\n            msg.sender,\n            _deadline()\n        );\n\n        emit LiquidityAdded(tokenA, tokenB, amountA, amountB, liquidity);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHDesired,\n        uint256 amountETHMin\n    ) public {\n        if (amountTokenDesired == 0 && amountETHDesired == 0) {\n            revert UniswapV2Base__NotZeroAmountForBothTokensAllowed();\n        }\n\n        if (amountTokenDesired == 0) {\n            amountTokenDesired =\n                _calculateAmountForLP(router.WETH(), amountETHDesired, _getPoolPair(token, router.WETH()));\n        }\n\n        if (amountETHDesired == 0) {\n            amountETHDesired = _calculateAmountForLP(token, amountTokenDesired, _getPoolPair(token, router.WETH()));\n        }\n\n        _approveToken(token, amountTokenDesired);\n\n        (uint256 amountToken, uint256 amountETH, uint256 liquidity) = msg.sender.addLiquidityETH(\n            address(router),\n            token,\n            amountETHDesired,\n            amountTokenDesired,\n            amountTokenMin,\n            amountETHMin,\n            msg.sender,\n            _deadline()\n        );\n\n        emit LiquidityAdded(address(0), token, amountETH, amountToken, liquidity);\n    }\n\n    function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin)\n        public\n        nonZeroAmount(liquidity)\n    {\n        _approveToken(_getPoolPair(tokenA, tokenB), liquidity);\n\n        (uint256 amountA, uint256 amountB) = msg.sender.removeLiquidity(\n            address(router), tokenA, tokenB, liquidity, amountAMin, amountBMin, msg.sender, _deadline()\n        );\n\n        emit LiquidiyRemoved(tokenA, tokenB, amountA, amountB, liquidity);\n    }\n\n    function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin)\n        public\n        nonZeroAmount(liquidity)\n    {\n        _approveToken(_getPoolPair(token, router.WETH()), liquidity);\n\n        (uint256 amountToken, uint256 amountETH) = msg.sender.removeLiquidityETH(\n            address(router), token, liquidity, amountTokenMin, amountETHMin, msg.sender, _deadline()\n        );\n\n        emit LiquidiyRemoved(token, address(0), amountToken, amountETH, liquidity);\n    }\n\n    /* ====== Percentage Swap Functions ====== */\n\n    function swapPercentageTokensForTokens(uint256 percentage, address[] calldata path)\n        external\n        validPercentage(percentage)\n    {\n        swapExactTokensForTokens(_percentageShare(path[0], percentage), 0, path);\n    }\n\n    function swapPercentageTokensForETH(uint256 percentage, address[] calldata path)\n        external\n        validPercentage(percentage)\n    {\n        swapExactTokensForETH(_percentageShare(path[0], percentage), 0, path);\n    }\n\n    function swapPercentageETHForTokens(uint256 percentage, address[] calldata path)\n        external\n        validPercentage(percentage)\n    {\n        swapExactETHForTokens(_percentageShareETH(percentage), 0, path);\n    }\n\n    /* ====== Percentage LP Functions ====== */\n\n    function addLiquidityETHPercentage(address token, uint256 percentageETHDesired)\n        public\n        validPercentage(percentageETHDesired)\n    {\n        uint256 amountETHDesired = _percentageShareETH(percentageETHDesired);\n        // // uint256 amountETHDesired = 1;\n        // address _poolPair = _getPoolPair(token, router.WETH());\n        // address _WETH = router.WETH();\n        uint256 amountTokenDesired =\n            _calculateAmountForLP(router.WETH(), amountETHDesired, _getPoolPair(token, router.WETH()));\n        // uint256 amountTokenDesired = _calculateAmountForLP(_WETH, amountETHDesired, _poolPair);\n        addLiquidityETH(token, amountTokenDesired, 0, amountETHDesired, 0);\n    }\n\n    function addLiquidityETHPercentageToken(address token, uint256 percentageTokenDesired)\n        external\n        validPercentage(percentageTokenDesired)\n    {\n        uint256 amountTokenDesired = _percentageShare(token, percentageTokenDesired);\n        uint256 amountETHDesired = _calculateAmountForLP(token, amountTokenDesired, _getPoolPair(token, router.WETH()));\n\n        addLiquidityETH(token, amountTokenDesired, 0, amountETHDesired, 0);\n    }\n\n    function addLiquidityPercentage(uint256 percentageADesired, address tokenA, address tokenB)\n        external\n        validPercentage(percentageADesired)\n    {\n        uint256 amountADesired = _percentageShare(tokenA, percentageADesired);\n        uint256 amountBDesired = _calculateAmountForLP(tokenA, amountADesired, _getPoolPair(tokenA, tokenB));\n\n        _approveToken(tokenA, amountADesired);\n        _approveToken(tokenB, amountBDesired);\n\n        (uint256 amountA, uint256 amountB, uint256 liquidity) = msg.sender.addLiquidity(\n            address(router), tokenA, tokenB, amountADesired, amountBDesired, 0, 0, msg.sender, _deadline()\n        );\n\n        emit LiquidityAdded(tokenA, tokenB, amountA, amountB, liquidity);\n    }\n\n    function addLiqudityPercentageOfMaxPossible(address tokenA, address tokenB, uint256 percentage)\n        external\n        validPercentage(percentage)\n    {\n        address pair = _getPoolPair(tokenA, tokenB);\n\n        address _tokenA = tokenA;\n        address _tokenB = tokenB;\n        if (IUniswapV2Pair(pair).token0() != tokenA) {\n            _tokenA = tokenB;\n            _tokenB = tokenA;\n        }\n\n        (uint256 maxAmountA, uint256 maxAmountB) = _calculateMaxAmounts(_tokenA, _tokenB, pair);\n\n        uint256 percentageAmountA = (maxAmountA * percentage) / PERCENTAGE_FACTOR;\n        uint256 percentageAmountB = (maxAmountB * percentage) / PERCENTAGE_FACTOR;\n\n        addLiquidity(_tokenA, _tokenB, percentageAmountA, percentageAmountB, 0, 0);\n    }\n\n    function removeLiquidityETHPercentage(address token, uint256 liquidityPercentage)\n        external\n        validPercentage(liquidityPercentage)\n    {\n        removeLiquidityETH(token, _percentageShare(_getPoolPair(token, router.WETH()), liquidityPercentage), 0, 0);\n    }\n\n    function removeLiquidityPercentage(address tokenA, address tokenB, uint256 percentageLiquidity)\n        external\n        validPercentage(percentageLiquidity)\n    {\n        removeLiquidity(tokenA, tokenB, _percentageShare(_getPoolPair(tokenA, tokenB), percentageLiquidity), 0, 0);\n    }\n\n    function zap(address tokenA, address tokenB, uint256 amountIn) external {\n        address pair = _getPoolPair(tokenA, tokenB);\n\n        uint256 swapAmount = _calculateSwapAmountForProvidingLiquidity(pair, tokenA, amountIn);\n\n        uint256 amountTokenB = _swap(tokenA, tokenB, swapAmount);\n        addLiquidity(tokenA, tokenB, amountIn - swapAmount, amountTokenB, 0, 0);\n    }\n\n    function zapETH(address token, uint256 amountIn, bool inputETH) external {\n        address WETH = router.WETH();\n        address pair = _getPoolPair(WETH, token);\n\n        address tokenA = inputETH ? WETH : token;\n\n        uint256 swapAmount = _calculateSwapAmountForProvidingLiquidity(pair, tokenA, amountIn);\n\n        uint256 amountToken;\n        uint256 amountETH;\n        if (inputETH) {\n            amountToken = _swapETH(token, swapAmount);\n            amountETH = amountIn - swapAmount;\n        } else {\n            amountETH = _swapToETH(token, swapAmount);\n            amountToken = amountIn - swapAmount;\n        }\n\n        addLiquidityETH(token, amountToken, 0, amountETH, 0);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Internal functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _calculateMaxAmounts(address tokenA, address tokenB, address pair)\n        internal\n        returns (uint256 maxAmountA, uint256 maxAmountB)\n    {\n        (uint112 reserveA, uint112 reserveB,) = IUniswapV2Pair(pair).getReserves();\n\n        uint256 balanceTokenA = IERC20(tokenA).balanceOf(msg.sender);\n        uint256 balanceTokenB = IERC20(tokenB).balanceOf(msg.sender);\n\n        maxAmountA = balanceTokenA;\n        maxAmountB = balanceTokenB;\n\n        uint256 requiredB = (balanceTokenA * reserveB) / reserveA;\n\n        if (requiredB > balanceTokenB) {\n            maxAmountA = (balanceTokenB * reserveA) / reserveB;\n        } else {\n            maxAmountB = requiredB;\n        }\n    }\n\n    function _percentageShare(address token, uint256 percentage) internal view returns (uint256) {\n        uint256 totalTokenAmount = IERC20(token).balanceOf(msg.sender);\n        return (percentage * totalTokenAmount) / PERCENTAGE_FACTOR;\n    }\n\n    function _percentageShareETH(uint256 percentage) internal view returns (uint256) {\n        uint256 totalBalanceETH = msg.sender.balance;\n        return (totalBalanceETH * percentage) / PERCENTAGE_FACTOR;\n    }\n\n    function _approveToken(address token, uint256 amount) internal {\n        bytes memory _data = abi.encodeCall(IERC20.approve, (address(router), amount));\n        bytes memory _res = IPluginExecutor(msg.sender).executeFromPluginExternal(token, 0, _data);\n        bool success = abi.decode(_res, (bool));\n\n        if (!success) {\n            revert UniswapV2Base__FailedToApproveTokens();\n        }\n    }\n\n    function _getPoolPair(address tokenA, address tokenB) internal view returns (address) {\n        address _factory = router.factory();\n        address _poolPair = IUniswapV2Factory(_factory).getPair(tokenA, tokenB);\n\n        if (_poolPair == address(0)) {\n            revert UniswapV2Base__PoolPairDoesNotExist();\n        }\n\n        return _poolPair;\n    }\n\n    function _calculateAmountForLP(address token, uint256 amount, address poolPair)\n        internal\n        view\n        returns (uint256 amountForLp)\n    {\n        address token0 = IUniswapV2Pair(poolPair).token0();\n        (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(poolPair).getReserves();\n\n        if (token0 == token) {\n            amountForLp = (amount * reserve1) / reserve0;\n        } else {\n            amountForLp = (amount * reserve0) / reserve1;\n        }\n    }\n\n    function _getMaxAmountIn(address[] memory path, uint256 amountOut) internal view returns (uint256) {\n        return router.getAmountsIn(amountOut, path)[0];\n    }\n\n    function _deadline() internal view returns (uint256) {\n        return block.timestamp + DELTA_DEADLINE;\n    }\n\n    function _swap(address tokenIn, address tokenOut, uint256 amountIn) internal returns (uint256) {\n        _approveToken(tokenIn, amountIn);\n\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n\n        uint256[] memory amountsOut =\n            msg.sender.swapExactTokensForTokens(address(router), amountIn, 0, path, msg.sender, _deadline());\n\n        emit TokenSwap(path, amountsOut);\n\n        return amountsOut[1];\n    }\n\n    function _swapETH(address token, uint256 amountIn) internal returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = router.WETH();\n        path[1] = token;\n\n        uint256[] memory amountsOut =\n            msg.sender.swapExactETHForTokens(address(router), amountIn, 0, path, msg.sender, _deadline());\n        emit TokenSwap(path, amountsOut);\n\n        return amountsOut[1];\n    }\n\n    function _swapToETH(address token, uint256 amountIn) internal returns (uint256) {\n        _approveToken(token, amountIn);\n\n        address[] memory path = new address[](2);\n        path[0] = token;\n        path[1] = router.WETH();\n\n        uint256[] memory amountsOut =\n            msg.sender.swapExactTokensForETH(address(router), amountIn, 0, path, msg.sender, _deadline());\n\n        emit TokenSwap(path, amountsOut);\n\n        return amountsOut[1];\n    }\n\n    function _calculateSwapAmountForProvidingLiquidity(address pair, address tokenA, uint256 amountIn)\n        internal\n        view\n        returns (uint256)\n    {\n        (uint256 reserve0, uint256 reserve1,) = IUniswapV2Pair(pair).getReserves();\n\n        if (IUniswapV2Pair(pair).token0() == tokenA) {\n            return _getSwapAmount(reserve0, amountIn);\n        } else {\n            return _getSwapAmount(reserve1, amountIn);\n        }\n    }\n\n    function uniswapV2RouterAddress() external view returns (address) {\n        return address(router);\n    }\n\n    /*\n    s = optimal swap amount\n    r = amount of reserve for token a\n    a = amount of token a the user currently has (not added to reserve yet)\n    f = swap fee percent\n    s = (sqrt(((2 - f)r)^2 + 4(1 - f)ar) - (2 - f)r) / (2(1 - f))\n    */\n    function _getSwapAmount(uint256 r, uint256 a) public pure returns (uint256) {\n        return (sqrt(r * (r * 3988009 + a * 3988000)) - r * 1997) / 1994;\n    }\n\n    function sqrt(uint256 y) private pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "src/actions/uniswap-v2/UniswapV2Plugin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {BasePlugin} from \"modular-account-libs/plugins/BasePlugin.sol\";\nimport {\n    ManifestFunction,\n    ManifestAssociatedFunctionType,\n    ManifestAssociatedFunction,\n    PluginManifest,\n    PluginMetadata,\n    IPlugin\n} from \"modular-account-libs/interfaces/IPlugin.sol\";\nimport {UniswapV2Base} from \"./UniswapV2Base.sol\";\n\ncontract UniswapV2Plugin is UniswapV2Base, BasePlugin {\n    // metadata used by the pluginMetadata() method down below\n    string public constant NAME = \"UniswapV2 Plugin\";\n    string public constant VERSION = \"0.0.1\";\n    string public constant AUTHOR = \"3Blocks\";\n\n    // this is a constant used in the manifest, to reference our only dependency: the single owner plugin\n    // since it is the first, and only, plugin the index 0 will reference the single owner plugin\n    // we can use this to tell the modular account that we should use the single owner plugin to validate our user op\n    // in other words, we'll say \"make sure the person calling increment is an owner of the account using our single plugin\"\n    uint256 internal constant _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION = 0;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _router) UniswapV2Base(_router) {}\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Plugin interface functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    /// @inheritdoc BasePlugin\n    function onInstall(bytes calldata) external pure override {}\n\n    /// @inheritdoc BasePlugin\n    function onUninstall(bytes calldata) external pure override {}\n\n    /// @inheritdoc BasePlugin\n    function pluginManifest() external pure override returns (PluginManifest memory) {\n        PluginManifest memory manifest;\n\n        // since we are using the modular account, we will specify one depedency\n        // which will handle the user op validation for ownership\n        // you can find this depedency specified in the installPlugin call in the tests\n        manifest.dependencyInterfaceIds = new bytes4[](1);\n        manifest.dependencyInterfaceIds[0] = type(IPlugin).interfaceId;\n\n        manifest.executionFunctions = new bytes4[](4);\n        manifest.executionFunctions[0] = this.swapExactTokensForTokens.selector;\n        manifest.executionFunctions[1] = this.swapPercentageTokensForTokens.selector;\n        manifest.executionFunctions[2] = this.swapTokensForExactTokens.selector;\n        manifest.executionFunctions[3] = this.addLiquidity.selector;\n\n        ManifestFunction memory ownerUserOpValidationFunction = ManifestFunction({\n            functionType: ManifestAssociatedFunctionType.DEPENDENCY,\n            functionId: 0, // unused since it's a dependency\n            dependencyIndex: _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION\n        });\n\n        manifest.userOpValidationFunctions = new ManifestAssociatedFunction[](4);\n        manifest.userOpValidationFunctions[0] = ManifestAssociatedFunction({\n            executionSelector: this.swapExactTokensForTokens.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[1] = ManifestAssociatedFunction({\n            executionSelector: this.swapPercentageTokensForTokens.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[2] = ManifestAssociatedFunction({\n            executionSelector: this.swapTokensForExactTokens.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[3] = ManifestAssociatedFunction({\n            executionSelector: this.addLiquidity.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        // finally here we will always deny runtime calls to the increment function as we will only call it through user ops\n        // this avoids a potential issue where a future plugin may define\n        // a runtime validation function for it and unauthorized calls may occur due to that\n        manifest.preRuntimeValidationHooks = new ManifestAssociatedFunction[](4);\n        manifest.preRuntimeValidationHooks[0] = ManifestAssociatedFunction({\n            executionSelector: this.swapExactTokensForTokens.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[1] = ManifestAssociatedFunction({\n            executionSelector: this.swapPercentageTokensForTokens.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[2] = ManifestAssociatedFunction({\n            executionSelector: this.swapTokensForExactTokens.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[3] = ManifestAssociatedFunction({\n            executionSelector: this.addLiquidity.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.permitAnyExternalAddress = true;\n        manifest.canSpendNativeToken = true;\n\n        return manifest;\n    }\n\n    /// @inheritdoc BasePlugin\n    function pluginMetadata() external pure virtual override returns (PluginMetadata memory) {\n        PluginMetadata memory metadata;\n        metadata.name = NAME;\n        metadata.version = VERSION;\n        metadata.author = AUTHOR;\n        return metadata;\n    }\n}\n"
    },
    "src/condition/BaseCondition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {ICondition} from \"../interfaces/ICondition.sol\";\n\nerror BaseCondition__ConditionDoesNotExist();\nerror BaseCondition__ConditionAlreadyExist();\nerror BaseCondition__ConditionIsInUse();\n\nabstract contract BaseCondition is ICondition {\n    // Storage for conditions, strategies, and automations\n    mapping(address => mapping(uint16 => uint16[])) private conditionStrategies; // (wallet => (id => strategies))\n    mapping(address => mapping(uint16 => uint16[])) private conditionAutomations; // (wallet => (id => automations))\n    mapping(address => mapping(uint16 => uint16)) private strategyConditionIndex;\n    mapping(address => mapping(uint16 => uint16)) private automationConditionIndex;\n\n    modifier conditionExist(uint16 id) {\n        if (!_isConditionActive(msg.sender, id)) {\n            revert BaseCondition__ConditionDoesNotExist();\n        }\n        _;\n    }\n\n    modifier conditionDoesNotExist(uint16 id) {\n        if (_isConditionActive(msg.sender, id)) {\n            revert BaseCondition__ConditionAlreadyExist();\n        }\n        _;\n    }\n\n    function checkCondition(address, uint16) public view virtual returns (uint8) {\n        return 0;\n    }\n\n    function isUpdateable(address, uint16) public view virtual returns (bool) {\n        return false;\n    }\n\n    function updateCondition(uint16) public virtual returns (bool) {\n        // Default implementation for updateCondition (override in derived contracts)\n        return false;\n    }\n\n    function conditionActive(address _wallet, uint16 _id) external view returns (bool) {\n        return _isConditionActive(_wallet, _id);\n    }\n\n    function _isConditionActive(address, uint16) internal view virtual returns (bool) {\n        return false;\n    }\n\n    function deleteCondition(uint16 _id) public virtual {\n        if (conditionAutomations[msg.sender][_id].length > 0 || conditionStrategies[msg.sender][_id].length > 0) {\n            revert BaseCondition__ConditionIsInUse();\n        }\n    }\n\n    function actionValid(address wallet, uint16 id, uint16 action) public view returns (bool) {\n        // Validate the action (placeholder implementation)\n        return automationConditionIndex[wallet][action] == id;\n    }\n\n    function strategyValid(address wallet, uint16 id, uint16 strategy) public view returns (bool) {\n        // Validate the strategy (placeholder implementation)\n        return strategyConditionIndex[wallet][strategy] == id;\n    }\n\n    function addAutomationToCondition(uint16 id, uint16 action) public returns (bool) {\n        conditionAutomations[msg.sender][id].push(action);\n        automationConditionIndex[msg.sender][action] = uint16(conditionAutomations[msg.sender][id].length - 1);\n        return true;\n    }\n\n    function addStrategyToCondition(uint16 id, uint16 strategy) public returns (bool) {\n        conditionStrategies[msg.sender][id].push(strategy);\n        strategyConditionIndex[msg.sender][strategy] = uint16(conditionStrategies[msg.sender][id].length - 1);\n        return true;\n    }\n\n    function removeAutomationFromCondition(uint16 id, uint16 automation) public returns (bool) {\n        uint16[] storage _automations = conditionAutomations[msg.sender][id];\n\n        uint16 _actualAutomationIndex = automationConditionIndex[msg.sender][automation];\n\n        if (_automations[_actualAutomationIndex] != automation) {\n            return false;\n        }\n\n        uint256 _lastAutomationIndex = _automations.length - 1;\n\n        if (_lastAutomationIndex != _actualAutomationIndex) {\n            uint16 _lastAutomationId = _automations[_lastAutomationIndex];\n            automationConditionIndex[msg.sender][_lastAutomationId] = _actualAutomationIndex;\n            _automations[_actualAutomationIndex] = _lastAutomationId;\n        }\n\n        _automations.pop();\n\n        return true;\n    }\n\n    function removeStrategyFromCondition(uint16 id, uint16 strategy) public returns (bool) {\n        uint16[] storage _strategies = conditionStrategies[msg.sender][id];\n\n        uint16 _actualStrategyIndex = strategyConditionIndex[msg.sender][strategy];\n\n        if (_strategies[_actualStrategyIndex] != strategy) {\n            return false;\n        }\n\n        uint256 _lastStrategyIndex = _strategies.length - 1;\n\n        if (_lastStrategyIndex != _actualStrategyIndex) {\n            uint16 _lastStrategyId = _strategies[_lastStrategyIndex];\n            strategyConditionIndex[msg.sender][_lastStrategyId] = _actualStrategyIndex;\n            _strategies[_actualStrategyIndex] = _lastStrategyId;\n        }\n\n        _strategies.pop();\n\n        return true;\n    }\n\n    function strategies(address wallet, uint16 id) external view returns (uint16[] memory) {\n        return conditionStrategies[wallet][id];\n    }\n\n    function automations(address wallet, uint16 id) external view returns (uint16[] memory) {\n        return conditionAutomations[wallet][id];\n    }\n}\n"
    },
    "src/condition/TimeCondition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {BaseCondition} from \"./BaseCondition.sol\";\n\nerror TimeCondition__ExecutionTimeNotValid();\nerror TimeCondition__DeltaNotValid();\nerror TimeCondition__ConditionsIsNotUpdateable();\n\ncontract TimeCondition is BaseCondition {\n    uint256 constant MINIMUM_DELTA = 3600;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃           Structs                ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    struct Condition {\n        uint256 execution;\n        uint256 delta;\n        bool updateable;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃        State Variables           ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n    mapping(address wallet => mapping(uint16 id => Condition condition)) private conditions;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃           Modifiers              ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    modifier validCondition(Condition calldata _condition) {\n        if (_condition.execution < block.timestamp) {\n            revert TimeCondition__ExecutionTimeNotValid();\n        }\n\n        if (_condition.delta < MINIMUM_DELTA) {\n            revert TimeCondition__DeltaNotValid();\n        }\n\n        _;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃            Events                ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    event ConditionAdded(uint16 id, address wallet, Condition condition);\n    event ConditionDeleted(uint16 id, address wallet);\n    event ConditionUpdated(uint16 id, address wallet, uint256 newExecution);\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Public Functions           ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function addCondition(uint16 _id, Condition calldata _condition)\n        external\n        conditionDoesNotExist(_id)\n        validCondition(_condition)\n    {\n        conditions[msg.sender][_id] = _condition;\n\n        emit ConditionAdded(_id, msg.sender, _condition);\n    }\n\n    function deleteCondition(uint16 _id) public override conditionExist(_id) {\n        super.deleteCondition(_id);\n        delete conditions[msg.sender][_id];\n\n        emit ConditionDeleted(_id, msg.sender);\n    }\n\n    function updateCondition(uint16 _id) public override conditionExist(_id) returns (bool) {\n        Condition memory _condition = conditions[msg.sender][_id];\n\n        if (_condition.execution > block.timestamp) {\n            revert TimeCondition__ConditionsIsNotUpdateable();\n        }\n\n        _condition.execution += _condition.delta;\n\n        conditions[msg.sender][_id] = _condition;\n\n        emit ConditionUpdated(_id, msg.sender, _condition.execution);\n\n        return true;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Internal Functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _isConditionActive(address _wallet, uint16 _id) internal view override returns (bool) {\n        return conditions[_wallet][_id].execution != 0;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃         View Functions           ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function checkCondition(address _wallet, uint16 _id) public view override returns (uint8) {\n        Condition memory _condition = conditions[_wallet][_id];\n\n        if (_condition.execution == 0) {\n            return 0;\n        }\n\n        if (_condition.execution <= block.timestamp) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function isUpdateable(address _wallet, uint16 _id) public view override returns (bool) {\n        return conditions[_wallet][_id].updateable;\n    }\n\n    function walletCondition(address _wallet, uint16 _id) public view returns (Condition memory) {\n        return conditions[_wallet][_id];\n    }\n}\n"
    },
    "src/interfaces/ICondition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ICondition {\n    function checkCondition(address wallet, uint16 id) external view returns (uint8);\n\n    function isUpdateable(address wallet, uint16 id) external view returns (bool);\n\n    function actionValid(address wallet, uint16 id, uint16 action) external view returns (bool);\n\n    function strategyValid(address wallet, uint16 id, uint16 strategy) external view returns (bool);\n\n    function updateCondition(uint16 id) external returns (bool);\n\n    function deleteCondition(uint16 id) external;\n\n    function addAutomationToCondition(uint16 id, uint16 action) external returns (bool);\n\n    function addStrategyToCondition(uint16 id, uint16 action) external returns (bool);\n\n    function removeAutomationFromCondition(uint16 id, uint16 automation) external returns (bool);\n\n    function removeStrategyFromCondition(uint16 id, uint16 strategy) external returns (bool);\n\n    function conditionActive(address wallet, uint16 id) external view returns (bool);\n}\n"
    },
    "src/interfaces/IFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IFeeManager {\n    enum FeeType {\n        FixedFee,\n        PostCallFee,\n        PreCallFee\n    }\n\n    struct FeeInfo {\n        uint256 value; // Fee in basis points (1% = 100 basis points) or fixed amount when feeType is fixed\n        FeeType feeType;\n        address calculator;\n    }\n\n    function calculateFeeForPreCallAction(bytes4 functionSelector, bytes calldata parameter)\n        external\n        view\n        returns (uint256);\n    function calculateFeeForPostCallAction(bytes4 functionSelector, address basisFeeToken, uint256 basisTokenAmount)\n        external\n        view\n        returns (uint256);\n\n    function getFixedFee(bytes4 functionSelector) external view returns (uint256);\n\n    function calculateFee(address basisToken, uint256 amount) external view returns (uint256);\n\n    function prepareForPayment(uint256 feeAmount, address paymentToken) external returns (uint256);\n\n    function calculateFeeInPaymentTokens(address paymentToken, uint256 fee) external view returns (uint256);\n\n    function octoInk() external view returns (address);\n    function inkwell() external view returns (address);\n\n    function handleFee(uint256 feeAmount, address executor, address creator, address paymentToken)\n        external\n        returns (bool);\n\n    function tokenDistributor() external view returns (address);\n    function getFeeType(bytes4 functionSelector) external view returns (FeeType);\n\n    function feeSettings(bytes4 functionSelector) external view returns (FeeInfo memory);\n\n    function getBasisFeeToken(bytes4 functionSelector, bytes calldata parameter) external view returns (address);\n}\n"
    },
    "src/interfaces/IInkwell.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IInkwell {\n    function buy(uint256 amount, address paymentToken) external returns (uint256);\n}\n"
    },
    "src/interfaces/IParameterCalculation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IParameterCalculation {\n    function calculateParameter(bytes4 calculatorFunction, bytes memory parameters)\n        external\n        view\n        returns (bytes memory calculatedParameter);\n\n    function calculatorFunctionExist(bytes4 calculatorFunction) external view returns (bool);\n}\n"
    },
    "src/interfaces/IStrategyBuilderPlugin.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.19;\n\ninterface IStrategyBuilderPlugin {\n    enum FunctionId {USER_OP_VALIDATION_SESSION_KEY}\n\n    enum ActionType {\n        EXTERNAL,\n        INTERNAL\n    }\n\n    /* ====== Structs ====== */\n\n    struct Action {\n        bytes4 selector;\n        bytes parameter;\n        address target;\n        uint256 value;\n        ActionType actionType;\n    }\n\n    struct Condition {\n        address conditionAddress;\n        uint16 id;\n        uint16 result1; // If the condition returns 1 got to index result1. If index result1 is 0 then no next step\n        uint16 result0; // If the condtions returns 0 go to index result0. If index result0 is 0 then no next step\n    }\n\n    struct StrategyStep {\n        Condition condition;\n        Action[] actions;\n    }\n\n    struct Strategy {\n        address creator;\n        StrategyStep[] steps;\n    }\n\n    struct Automation {\n        Condition condition; // If the condition returns 1, the automation can be executed\n        uint16 strategyId;\n        address paymentToken;\n        uint256 maxFeeAmount;\n    }\n\n    /* ====== Events ====== */\n\n    event StrategyAdded(uint16 strategyId, address creator, Strategy strategy);\n    event StrategyExecuted(uint16 strategyId);\n    event StrategyDeleted(uint16 strategyId);\n\n    event AutomationActivated(\n        uint16 automationId, uint16 strategyId, Condition condition, address paymentToken, uint256 maxFeeAmount\n    );\n    event AutomationDeleted(uint16 automationId);\n    event AutomationExecuted(uint16 automationId, address paymentToken, uint256 feeAmount);\n\n    event StrategyStepExecuted(uint16 strategyId, uint16 stepId, Action[] actions);\n\n    function addStrategy(uint16 id, address creator, StrategyStep[] calldata steps) external;\n\n    // function executeStrategy(uint16 id) external;\n\n    // function deleteStrategy(uint16 id) external;\n\n    // function activateAutomation(\n    //     uint16 id,\n    //     uint16 strategyId,\n    //     Condition calldata condition,\n    //     address paymentToken,\n    //     uint256 maxFeeAmount\n    // ) external;\n\n    // function executeAutomation(uint16 id, address beneficary) external;\n\n    // function strategy(uint16 strategyId) external view returns (Strategy memory);\n\n    // function automation(uint16 automationId) external view returns (Automation memory);\n}\n"
    },
    "src/interfaces/IStrategyBuilderStorage.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.19;\n\ninterface IStrategyBuilderStorage {\n    enum FunctionId {USER_OP_VALIDATION_SESSION_KEY}\n\n    enum ActionType {\n        EXTERNAL,\n        INTERNAL\n    }\n\n    /* ====== Structs ====== */\n\n    struct Action {\n        bytes4 selector;\n        bytes parameter;\n        address target;\n        uint256 value;\n        ActionType actionType;\n    }\n\n    struct Condition {\n        address conditionAddress;\n        uint16 id;\n        uint16 result1; // If the condition returns 1 got to index result1. If index result1 is 0 then no next step\n        uint16 result0; // If the condtions returns 0 go to index result0. If index result0 is 0 then no next step\n    }\n\n    struct StrategyStep {\n        Condition condition;\n        Action[] actions;\n    }\n\n    struct Strategy {\n        address creator;\n        StrategyStep[] steps;\n    }\n\n    struct Automation {\n        Condition condition; // If the condition returns 1, the automation can be executed\n        uint16 strategyId;\n        address paymentToken;\n        uint256 maxFeeAmount;\n    }\n\n    /* ====== Events ====== */\n\n    event StrategyAdded(uint16 strategyId, address creator, Strategy strategy);\n    event StrategyExecuted(uint16 strategyId);\n    event StrategyDeleted(uint16 strategyId);\n\n    event AutomationActivated(\n        uint16 automationId, uint16 strategyId, Condition condition, address paymentToken, uint256 maxFeeAmount\n    );\n    event AutomationDeleted(uint16 automationId);\n    event AutomationExecuted(uint16 automationId, address paymentToken, uint256 feeAmount);\n\n    event StrategyStepExecuted(uint16 strategyId, uint16 stepId, Action[] actions);\n\n    // function addStrategy(uint16 id, address creator, StrategyStep[] calldata steps) external;\n\n    // function executeStrategy(uint16 id) external;\n\n    // function deleteStrategy(uint16 id) external;\n\n    // function activateAutomation(\n    //     uint16 id,\n    //     uint16 strategyId,\n    //     Condition calldata condition,\n    //     address paymentToken,\n    //     uint256 maxFeeAmount\n    // ) external;\n\n    // function executeAutomation(uint16 id, address beneficary) external;\n\n    // function strategy(uint16 strategyId) external view returns (Strategy memory);\n\n    // function automation(uint16 automationId) external view returns (Automation memory);\n}\n"
    },
    "src/StrategyBuilderPlugin.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.19;\n\nimport {BasePlugin} from \"modular-account-libs/plugins/BasePlugin.sol\";\nimport {IPluginExecutor} from \"modular-account-libs/interfaces/IPluginExecutor.sol\";\nimport {\n    ManifestFunction,\n    ManifestAssociatedFunctionType,\n    ManifestAssociatedFunction,\n    PluginManifest,\n    PluginMetadata,\n    IPlugin\n} from \"modular-account-libs/interfaces/IPlugin.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IStrategyBuilderPlugin} from \"./interfaces/IStrategyBuilderPlugin.sol\";\nimport {ICondition} from \"./interfaces/ICondition.sol\";\nimport {IFeeManager} from \"./interfaces/IFeeManager.sol\";\n\nerror StrategyBuilderPlugin__StrategyDoesNotExist();\nerror StrategyBuilderPlugin__StrategyAlreadyExist();\nerror StrategyBuilderPlugin__AutomationNotExecutable(address condition, uint16 id);\nerror StrategyBuilderPlugin__FeeExceedMaxFee();\nerror StrategyBuilderPlugin__AutomationNotExist();\nerror StrategyBuilderPlugin__AutomationAlreadyExist();\nerror StrategyBuilderPlugin__StrategyIsInUse();\nerror StrategyBuilderPlugin__ChangeActionInConditionFailed();\nerror StrategyBuilderPlugin__ChangeStrategyInConditionFailed();\nerror StrategyBuilderPlugin__UpdateConditionFailed(address condition, uint16 id);\n\ncontract StrategyBuilderPlugin is BasePlugin, IStrategyBuilderPlugin {\n    // metadata used by the pluginMetadata() method down below\n    string public constant NAME = \"Strategy Builder Plugin\";\n    string public constant VERSION = \"0.0.1\";\n    string public constant AUTHOR = \"3Blocks\";\n\n    // this is a constant used in the manifest, to reference our only dependency: the single owner plugin\n    // since it is the first, and only, plugin the index 0 will reference the single owner plugin\n    // we can use this to tell the modular account that we should use the single owner plugin to validate our user op\n    // in other words, we'll say \"make sure the person calling increment is an owner of the account using our single plugin\"\n    uint256 internal constant _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION = 0;\n\n    IFeeManager public immutable feeManager;\n\n    mapping(address => mapping(uint16 => Strategy)) private strategies;\n    mapping(address => mapping(uint16 => uint16[])) private strategiesUsed; //All automations where the strategy is used\n    mapping(address => mapping(uint16 => uint16)) private automationsToIndex; //Maps each automation ID to its index in the owner's used strategy array.\n    mapping(address => mapping(uint16 => Automation)) private automations;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Modifier            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    modifier strategyExist(uint16 _id) {\n        if (strategies[msg.sender][_id].steps.length == 0) {\n            revert StrategyBuilderPlugin__StrategyDoesNotExist();\n        }\n        _;\n    }\n\n    modifier strategyDoesNotExist(uint16 _id) {\n        if (strategies[msg.sender][_id].steps.length > 0) {\n            revert StrategyBuilderPlugin__StrategyAlreadyExist();\n        }\n        _;\n    }\n\n    modifier automationExist(uint16 _id) {\n        if (automations[msg.sender][_id].condition.conditionAddress == address(0)) {\n            revert StrategyBuilderPlugin__AutomationNotExist();\n        }\n        _;\n    }\n\n    modifier automationDoesNotExist(uint16 _id) {\n        if (automations[msg.sender][_id].condition.conditionAddress != address(0)) {\n            revert StrategyBuilderPlugin__AutomationAlreadyExist();\n        }\n        _;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _feeManager) {\n        feeManager = IFeeManager(_feeManager);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Execution functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function addStrategy(uint16 _id, address _creator, StrategyStep[] calldata _steps)\n        external\n        strategyDoesNotExist(_id)\n    {\n        Strategy storage newStrategy = strategies[msg.sender][_id];\n\n        newStrategy.creator = _creator;\n\n        for (uint256 i = 0; i < _steps.length; i++) {\n            StrategyStep memory step = _steps[i];\n\n            // Create a new step in storage\n            StrategyStep storage newStep = newStrategy.steps.push();\n            newStep.condition = step.condition;\n\n            if (step.condition.conditionAddress != address(0)) {\n                _changeStrategyInCondition(msg.sender, step.condition.conditionAddress, step.condition.id, _id, true);\n            }\n\n            // Loop through the actions and add them to the step\n            for (uint256 j = 0; j < step.actions.length; j++) {\n                newStep.actions.push(step.actions[j]);\n            }\n        }\n\n        emit StrategyAdded(_id, _creator, newStrategy);\n    }\n\n    function deleteStrategy(uint16 _id) external strategyExist(_id) {\n        if (strategiesUsed[msg.sender][_id].length > 0) {\n            revert StrategyBuilderPlugin__StrategyIsInUse();\n        }\n\n        Strategy memory _strategy = strategies[msg.sender][_id];\n\n        for (uint256 i = 0; i < _strategy.steps.length; i++) {\n            Condition memory _condition = _strategy.steps[i].condition;\n            if (_condition.conditionAddress != address(0)) {\n                _changeStrategyInCondition(msg.sender, _condition.conditionAddress, _condition.id, _id, false);\n            }\n        }\n\n        delete strategies[msg.sender][_id];\n\n        emit StrategyDeleted(_id);\n    }\n\n    function executeStrategy(uint16 _id) external strategyExist(_id) {\n        _executeStrategy(msg.sender, _id);\n    }\n\n    function activateAutomation(\n        uint16 _id,\n        uint16 _strategyId,\n        address _paymentToken,\n        uint256 _maxFeeAmount,\n        Condition calldata _condition\n    ) external automationDoesNotExist(_id) strategyExist(_strategyId) {\n        _changeActionInCondition(msg.sender, _condition.conditionAddress, _condition.id, _id, true);\n\n        Automation storage _newAutomation = automations[msg.sender][_id];\n\n        _newAutomation.condition = _condition;\n        _newAutomation.strategyId = _strategyId;\n        _newAutomation.paymentToken = _paymentToken;\n        _newAutomation.maxFeeAmount = _maxFeeAmount;\n\n        strategiesUsed[msg.sender][_strategyId].push(_id);\n        automationsToIndex[msg.sender][_id] = uint16(strategiesUsed[msg.sender][_strategyId].length - 1);\n\n        emit AutomationActivated(_id, _strategyId, _condition, _paymentToken, _maxFeeAmount);\n    }\n\n    function deleteAutomation(uint16 _id) external automationExist(_id) {\n        Automation memory _automation = automations[msg.sender][_id];\n\n        uint16[] storage _usedInAutomations = strategiesUsed[msg.sender][_automation.strategyId];\n\n        uint16 _actualAutomationIndex = automationsToIndex[msg.sender][_id];\n        uint256 _lastAutomationIndex = _usedInAutomations.length - 1;\n        if (_actualAutomationIndex != _lastAutomationIndex) {\n            uint16 _lastAutomation = _usedInAutomations[_lastAutomationIndex];\n            _usedInAutomations[_actualAutomationIndex] = _lastAutomation;\n            automationsToIndex[msg.sender][_lastAutomation] = _actualAutomationIndex;\n        }\n        _usedInAutomations.pop();\n\n        _changeActionInCondition(\n            msg.sender, _automation.condition.conditionAddress, _automation.condition.id, _id, false\n        );\n\n        delete automations[msg.sender][_id];\n\n        emit AutomationDeleted(_id);\n    }\n\n    function executeAutomation(uint16 _id, address _wallet, address _beneficary) external {\n        Automation memory _automation = automations[_wallet][_id];\n\n        //Check the condition\n        (uint8 _conditionResult,) = _checkCondition(_wallet, _automation.condition);\n\n        if (_conditionResult == 0) {\n            revert StrategyBuilderPlugin__AutomationNotExecutable(\n                _automation.condition.conditionAddress, _automation.condition.id\n            );\n        }\n\n        uint256 _feeNetto = _executeStrategy(_wallet, _automation.strategyId);\n\n        //Calculate the resultant fee\n        uint256 _resultantFee = feeManager.prepareForPayment(_feeNetto, _automation.paymentToken);\n\n        if (_resultantFee > _automation.maxFeeAmount) {\n            revert StrategyBuilderPlugin__FeeExceedMaxFee();\n        }\n\n        address _strategyCreator = strategies[_wallet][_automation.strategyId].creator;\n        _payAutomation(_wallet, _automation.paymentToken, _resultantFee, _beneficary, _strategyCreator);\n\n        _updateCondition(_wallet, _automation.condition, _id);\n\n        emit AutomationExecuted(_id, _automation.paymentToken, _resultantFee);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Internal functions         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function _executeStrategy(address _wallet, uint16 _id) internal returns (uint256 fee) {\n        fee = _executeStep(_wallet, _id, 0);\n\n        emit StrategyExecuted(_id);\n    }\n\n    function _executeStep(address _wallet, uint16 _id, uint16 _index) internal returns (uint256 fee) {\n        StrategyStep memory _step = strategies[_wallet][_id].steps[_index];\n\n        //Check Condition\n        (uint8 _conditionResult, uint16 _nextIndex) = _checkCondition(_wallet, _step.condition);\n\n        if (_conditionResult == 1) {\n            //Execute all actions from the step\n            for (uint256 i = 0; i < _step.actions.length; i++) {\n                uint256 _actionFee = _executeAction(_wallet, _step.actions[i]);\n                fee += _actionFee;\n            }\n\n            emit StrategyStepExecuted(_id, _index, _step.actions);\n        }\n\n        if (_nextIndex != 0) {\n            //if there is a next step go to it\n            uint256 _feeNextStep = _executeStep(_wallet, _id, _nextIndex);\n            fee += _feeNextStep;\n        }\n    }\n\n    function _executeAction(address _wallet, Action memory _action) internal returns (uint256) {\n        IFeeManager.FeeType _feeType = feeManager.getFeeType(_action.selector);\n\n        if (_feeType == IFeeManager.FeeType.PostCallFee) {\n            address _basisFeeToken = feeManager.getBasisFeeToken(_action.selector, _action.parameter);\n            uint256 _tokenBalance = IERC20(_basisFeeToken).balanceOf(_wallet);\n            _execute(_wallet, _action);\n            return feeManager.calculateFeeForPostCallAction(\n                _action.selector, _basisFeeToken, IERC20(_basisFeeToken).balanceOf(_wallet) - _tokenBalance\n            );\n        } else if (_feeType == IFeeManager.FeeType.FixedFee) {\n            _execute(_wallet, _action);\n            return feeManager.getFixedFee(_action.selector);\n        } else {\n            _execute(_wallet, _action);\n            return feeManager.calculateFeeForPreCallAction(_action.selector, _action.parameter);\n        }\n    }\n\n    function _execute(address _wallet, Action memory _action) internal {\n        bytes memory data = abi.encodePacked(_action.selector, _action.parameter);\n        if (_action.actionType == ActionType.EXTERNAL) {\n            IPluginExecutor(_wallet).executeFromPluginExternal(_action.target, _action.value, data);\n        } else {\n            IPluginExecutor(_wallet).executeFromPlugin(data);\n        }\n    }\n\n    function _checkCondition(address _wallet, Condition memory _condition)\n        internal\n        view\n        returns (uint8 conditionResult, uint16 nextStep)\n    {\n        if (_condition.conditionAddress == address(0)) {\n            nextStep = _condition.result1;\n            conditionResult = 1;\n        } else {\n            conditionResult = ICondition(_condition.conditionAddress).checkCondition(_wallet, _condition.id);\n            if (conditionResult == 1) {\n                nextStep = _condition.result1;\n            } else {\n                nextStep = _condition.result0;\n            }\n        }\n    }\n\n    function _changeActionInCondition(\n        address _wallet,\n        address _condition,\n        uint16 _conditionId,\n        uint16 _action,\n        bool _add\n    ) internal {\n        bytes memory data = _add\n            ? abi.encodeCall(ICondition.addAutomationToCondition, (_conditionId, _action))\n            : abi.encodeCall(ICondition.removeAutomationFromCondition, (_conditionId, _action));\n\n        bytes memory result = IPluginExecutor(_wallet).executeFromPluginExternal(_condition, 0, data);\n        bool _success = abi.decode(result, (bool));\n        if (!_success) {\n            revert StrategyBuilderPlugin__ChangeActionInConditionFailed();\n        }\n    }\n\n    function _changeStrategyInCondition(\n        address _wallet,\n        address _condition,\n        uint16 _conditionId,\n        uint16 _strategy,\n        bool _add\n    ) internal {\n        bytes memory data = _add\n            ? abi.encodeCall(ICondition.addStrategyToCondition, (_conditionId, _strategy))\n            : abi.encodeCall(ICondition.removeStrategyFromCondition, (_conditionId, _strategy));\n\n        bytes memory result = IPluginExecutor(_wallet).executeFromPluginExternal(_condition, 0, data);\n        bool _success = abi.decode(result, (bool));\n        if (!_success) {\n            revert StrategyBuilderPlugin__ChangeStrategyInConditionFailed();\n        }\n    }\n\n    function _payAutomation(address _wallet, address _paymentToken, uint256 _fee, address _beneficary, address _creator)\n        internal\n    {\n        bytes memory _approveData = abi.encodeCall(IERC20.approve, (address(feeManager), _fee));\n        IPluginExecutor(_wallet).executeFromPluginExternal(\n            _paymentToken == address(0) ? feeManager.octoInk() : _paymentToken, 0, _approveData\n        );\n\n        bytes memory _handleFeeData =\n            abi.encodeCall(IFeeManager.handleFee, (_fee, _beneficary, _creator, _paymentToken));\n        IPluginExecutor(_wallet).executeFromPluginExternal(address(feeManager), 0, _handleFeeData);\n    }\n\n    function _updateCondition(address _wallet, Condition memory _condition, uint16 _actionId) internal {\n        if (ICondition(_condition.conditionAddress).isUpdateable(_wallet, _condition.id)) {\n            bytes memory _data = abi.encodeCall(ICondition.updateCondition, (_condition.id));\n            bytes memory _result =\n                IPluginExecutor(_wallet).executeFromPluginExternal(_condition.conditionAddress, 0, _data);\n            bool _success = abi.decode(_result, (bool));\n            if (!_success) {\n                revert StrategyBuilderPlugin__UpdateConditionFailed(_condition.conditionAddress, _condition.id);\n            }\n        } else {\n            _changeActionInCondition(_wallet, _condition.conditionAddress, _condition.id, _actionId, false);\n        }\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Plugin interface functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    /// @inheritdoc BasePlugin\n    function onInstall(bytes calldata) external pure override {}\n\n    /// @inheritdoc BasePlugin\n    function onUninstall(bytes calldata) external pure override {}\n\n    /// @inheritdoc BasePlugin\n    function pluginManifest() external pure override returns (PluginManifest memory) {\n        PluginManifest memory manifest;\n\n        // since we are using the modular account, we will specify one depedency\n        // which will handle the user op validation for ownership\n        // you can find this depedency specified in the installPlugin call in the tests\n        manifest.dependencyInterfaceIds = new bytes4[](1);\n        manifest.dependencyInterfaceIds[0] = type(IPlugin).interfaceId;\n\n        manifest.executionFunctions = new bytes4[](5);\n        manifest.executionFunctions[0] = this.addStrategy.selector;\n        manifest.executionFunctions[1] = this.executeStrategy.selector;\n        manifest.executionFunctions[2] = this.activateAutomation.selector;\n        manifest.executionFunctions[3] = this.deleteStrategy.selector;\n        manifest.executionFunctions[4] = this.deleteAutomation.selector;\n\n        // you can think of ManifestFunction as a reference to a function somewhere,\n        // we want to say \"use this function\" for some purpose - in this case,\n        // we'll be using the user op validation function from the single owner dependency\n        // and this is specified by the depdendency index\n        ManifestFunction memory ownerUserOpValidationFunction = ManifestFunction({\n            functionType: ManifestAssociatedFunctionType.DEPENDENCY,\n            functionId: 0, // unused since it's a dependency\n            dependencyIndex: _MANIFEST_DEPENDENCY_INDEX_OWNER_USER_OP_VALIDATION\n        });\n\n        // here we will link together the increment function with the single owner user op validation\n        // this basically says \"use this user op validation function and make sure everythings okay before calling increment\"\n        // this will ensure that only an owner of the account can call increment\n        manifest.userOpValidationFunctions = new ManifestAssociatedFunction[](5);\n        manifest.userOpValidationFunctions[0] = ManifestAssociatedFunction({\n            executionSelector: this.addStrategy.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[1] = ManifestAssociatedFunction({\n            executionSelector: this.executeStrategy.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[2] = ManifestAssociatedFunction({\n            executionSelector: this.activateAutomation.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[3] = ManifestAssociatedFunction({\n            executionSelector: this.deleteStrategy.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        manifest.userOpValidationFunctions[4] = ManifestAssociatedFunction({\n            executionSelector: this.deleteAutomation.selector,\n            associatedFunction: ownerUserOpValidationFunction\n        });\n\n        // finally here we will always deny runtime calls to the increment function as we will only call it through user ops\n        // this avoids a potential issue where a future plugin may define\n        // a runtime validation function for it and unauthorized calls may occur due to that\n        manifest.preRuntimeValidationHooks = new ManifestAssociatedFunction[](5);\n        manifest.preRuntimeValidationHooks[0] = ManifestAssociatedFunction({\n            executionSelector: this.addStrategy.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[1] = ManifestAssociatedFunction({\n            executionSelector: this.executeStrategy.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[2] = ManifestAssociatedFunction({\n            executionSelector: this.activateAutomation.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[3] = ManifestAssociatedFunction({\n            executionSelector: this.deleteAutomation.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.preRuntimeValidationHooks[4] = ManifestAssociatedFunction({\n            executionSelector: this.deleteStrategy.selector,\n            associatedFunction: ManifestFunction({\n                functionType: ManifestAssociatedFunctionType.PRE_HOOK_ALWAYS_DENY,\n                functionId: 0,\n                dependencyIndex: 0\n            })\n        });\n\n        manifest.permitAnyExternalAddress = true;\n        manifest.canSpendNativeToken = true;\n\n        return manifest;\n    }\n\n    /// @inheritdoc BasePlugin\n    function pluginMetadata() external pure virtual override returns (PluginMetadata memory) {\n        PluginMetadata memory metadata;\n        metadata.name = NAME;\n        metadata.version = VERSION;\n        metadata.author = AUTHOR;\n        return metadata;\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    External View Functions       ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    function strategy(address _wallet, uint16 _id) external view returns (Strategy memory) {\n        return strategies[_wallet][_id];\n    }\n\n    function automation(address _wallet, uint16 _id) external view returns (Automation memory) {\n        return automations[_wallet][_id];\n    }\n}\n"
    },
    "src/StrategyBuilderStorage.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.19;\n\nimport {IFeeManager} from \"./interfaces/IFeeManager.sol\";\nimport {IStrategyBuilderStorage} from \"./interfaces/IStrategyBuilderStorage.sol\";\n\ncontract StrategyBuilderStorage is IStrategyBuilderStorage {\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       State Variables     ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    IFeeManager public immutable feeManager;\n\n    mapping(address wallet => mapping(uint16 => Strategy)) private strategies;\n    mapping(address wallet => mapping(uint16 => uint16[])) private strategiesUsed; //All automations where the strategy is used\n    mapping(address wallet => mapping(uint16 => uint16)) private automationsToIndex; //Maps each automation ID to its index in the owner's used strategy array.\n    mapping(address wallet => mapping(uint16 => Automation)) private automations;\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Constructor         ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    constructor(address _feeManager) {\n        feeManager = IFeeManager(_feeManager);\n    }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃       Modifier            ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    // modifier strategyExist(uint16 _id) {\n    //     if (strategies[msg.sender][_id].steps.length == 0) {\n    //         revert StrategyBuilderPlugin__StrategyDoesNotExist();\n    //     }\n    //     _;\n    // }\n\n    // modifier strategyDoesNotExist(uint16 _id) {\n    //     if (strategies[msg.sender][_id].steps.length > 0) {\n    //         revert StrategyBuilderPlugin__StrategyAlreadyExist();\n    //     }\n    //     _;\n    // }\n\n    // modifier automationExist(uint16 _id) {\n    //     if (automations[msg.sender][_id].condition.conditionAddress == address(0)) {\n    //         revert StrategyBuilderPlugin__AutomationNotExist();\n    //     }\n    //     _;\n    // }\n\n    // modifier automationDoesNotExist(uint16 _id) {\n    //     if (automations[msg.sender][_id].condition.conditionAddress != address(0)) {\n    //         revert StrategyBuilderPlugin__AutomationAlreadyExist();\n    //     }\n    //     _;\n    // }\n\n    // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n    // ┃    Execution functions    ┃\n    // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n\n    // function addStrategy(uint16 _id, address _creator, StrategyStep[] calldata _steps)\n    //     external\n    //     strategyDoesNotExist(_id)\n    // {\n    //     Strategy storage newStrategy = strategies[msg.sender][_id];\n\n    //     newStrategy.creator = _creator;\n\n    //     for (uint256 i = 0; i < _steps.length; i++) {\n    //         StrategyStep memory step = _steps[i];\n\n    //         // Create a new step in storage\n    //         StrategyStep storage newStep = newStrategy.steps.push();\n    //         newStep.condition = step.condition;\n\n    //         if (step.condition.conditionAddress != address(0)) {\n    //             _changeStrategyInCondition(msg.sender, step.condition.conditionAddress, step.condition.id, _id, true);\n    //         }\n\n    //         // Loop through the actions and add them to the step\n    //         for (uint256 j = 0; j < step.actions.length; j++) {\n    //             newStep.actions.push(step.actions[j]);\n    //         }\n    //     }\n\n    //     emit StrategyAdded(_id, _creator, newStrategy);\n    // }\n\n    // function _changeStrategyInCondition(\n    //     address _wallet,\n    //     address _condition,\n    //     uint16 _conditionId,\n    //     uint16 _strategy,\n    //     bool _add\n    // ) internal {\n    //     bytes memory data = _add\n    //         ? abi.encodeCall(ICondition.addStrategyToCondition, (_conditionId, _strategy))\n    //         : abi.encodeCall(ICondition.removeStrategyFromCondition, (_conditionId, _strategy));\n\n    //     bytes memory result = IPluginExecutor(_wallet).executeFromPluginExternal(_condition, 0, data);\n    //     bool _success = abi.decode(result, (bool));\n    //     if (!_success) {\n    //         revert StrategyBuilderPlugin__ChangeStrategyInConditionFailed();\n    //     }\n    // }\n}\n"
    },
    "src/test/mocks/MockCondition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {BaseCondition} from \"../../condition/BaseCondition.sol\";\n\ncontract MockCondition is BaseCondition {\n    struct Condition {\n        bool result;\n        bool active;\n    }\n\n    mapping(address wallet => mapping(uint16 => Condition)) private conditions;\n\n    function addCondition(uint16 id, Condition calldata condition) external {\n        conditions[msg.sender][id] = condition;\n    }\n\n    function _isConditionActive(address, uint16 _id) internal view override returns (bool) {\n        return conditions[msg.sender][_id].active;\n    }\n\n    function checkCondition(address wallet, uint16 id) public view override returns (uint8) {\n        return conditions[wallet][id].result ? 1 : 0;\n    }\n}\n"
    },
    "src/test/mocks/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Token is ERC20 {\n    uint8 private _decimals;\n\n    constructor(string memory name, string memory symbol, uint256 maxTokenSupply) ERC20(name, symbol) {\n        _mint(msg.sender, maxTokenSupply);\n    }\n\n    function setDecimals(uint8 _newDecimals) external {\n        _decimals = _newDecimals;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}