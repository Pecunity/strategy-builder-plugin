{
  "address": "0x6ACb84dAE6ab305b001E7De89B1B5690B02b334f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aaveV3Pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "HealthFactorNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenGetterID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmountNotValid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "borrowETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "borrowPercentageOfAvailable",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "borrowPercentageOfAvailableETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetHealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "changeDebtToHealthFactor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetHealthFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "changeDebtToHealthFactorETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetHealthFactor",
          "type": "uint256"
        }
      ],
      "name": "changeSupplyToHealthFactor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetHealthFactor",
          "type": "uint256"
        }
      ],
      "name": "changeSupplyToHealthFactorETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "getTokenForSelector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IAaveOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "repayETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "repayPercentageOfDebt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "repayPercentageOfDebtETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "supplyETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "supplyPercentageOfBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "supplyPercentageOfBalanceETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "tokenGetterIDs",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAction.PluginExecution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4566229afac331ca54aac6f0dab7ce753e54278bcedb34c2916eae5e34a5bb92",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xd4Fa4ee93D7D27c1c4Be36bfBa67183dD4320123",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "2780972",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x63c1865906b304ed5961f4a7f7feefddd02deea2779817ed99bc45330063edb1",
    "transactionHash": "0x4566229afac331ca54aac6f0dab7ce753e54278bcedb34c2916eae5e34a5bb92",
    "logs": [],
    "blockNumber": 139114183,
    "cumulativeGasUsed": "2880963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBfC91D59fdAA134A4ED45f7B584cAf96D7792Eff",
    "0x1dF462e2712496373A347f8ad10802a5E95f053D",
    "0xEf95A6B9e88Bd509Fd67BA741cf2b263DaC65c00"
  ],
  "numDeployments": 3,
  "solcInputHash": "d7120f61adec0592537307530463a52d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"HealthFactorNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPercentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenGetterID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PERCENTAGE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"borrowETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"borrowPercentageOfAvailable\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"borrowPercentageOfAvailableETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"changeDebtToHealthFactor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"changeDebtToHealthFactorETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetHealthFactor\",\"type\":\"uint256\"}],\"name\":\"changeSupplyToHealthFactor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetHealthFactor\",\"type\":\"uint256\"}],\"name\":\"changeSupplyToHealthFactorETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"getTokenForSelector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IAaveOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"repayPercentageOfDebt\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"repayPercentageOfDebtETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"supplyETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"supplyPercentageOfBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"supplyPercentageOfBalanceETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"tokenGetterIDs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAction.PluginExecution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/actions/aave-v3/AaveV3Actions.sol\":\"AaveV3Actions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPriceOracleGetter} from './IPriceOracleGetter.sol';\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n  /**\\n   * @dev Emitted after the base currency is set\\n   * @param baseCurrency The base currency of used for price quotes\\n   * @param baseCurrencyUnit The unit of the base currency\\n   */\\n  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\n  /**\\n   * @dev Emitted after the price source of an asset is updated\\n   * @param asset The address of the asset\\n   * @param source The price source of the asset\\n   */\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n  /**\\n   * @dev Emitted after the address of fallback oracle is updated\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Sets or replaces price sources of assets\\n   * @param assets The addresses of the assets\\n   * @param sources The addresses of the price sources\\n   */\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n  /**\\n   * @notice Sets the fallback oracle\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  function setFallbackOracle(address fallbackOracle) external;\\n\\n  /**\\n   * @notice Returns a list of prices from a list of assets addresses\\n   * @param assets The list of assets addresses\\n   * @return The prices of the given assets\\n   */\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Returns the address of the source for an asset address\\n   * @param asset The address of the asset\\n   * @return The address of the source\\n   */\\n  function getSourceOfAsset(address asset) external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the fallback oracle\\n   * @return The address of the fallback oracle\\n   */\\n  function getFallbackOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x15942c0df4ce9f50a9cf172c9ed0efa0abbf841cd8560fbd0da3d6a7dea69a96\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0xbfd2077251c8dc766a56d45f4b03eb07f3441323e79c0f794efea3657a99747f\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x33d4308d9407b4ee2297fc4ba5acce1a96a6c658189e2778a4f6b90e032fb3b5\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   */\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   */\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfe72e94869ca91465a7f57282b8d367b2c9ba798fdc13ac8546304db8d971df6\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/misc/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x77edc81addcbe1acef487437e6a4d83369d6f09fd40e6fdbdd967cc16a9fb94c\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0x771cb99fd8519c974f7e12130387c4d9a997a6e8d0ac10e4303b842fe53efa88\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"src/actions/aave-v3/AaveV3Actions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport {IPool} from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport {IAaveOracle} from \\\"@aave/core-v3/contracts/interfaces/IAaveOracle.sol\\\";\\nimport {IWETH} from \\\"@aave/core-v3/contracts/misc/interfaces/IWETH.sol\\\";\\nimport {DataTypes} from \\\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IAaveV3Actions} from \\\"./interfaces/IAaveV3Actions.sol\\\";\\n\\n// https://github.com/bgd-labs/aave-address-book/blob/main/src/AaveV3Base.sol\\n\\ncontract AaveV3Actions is IAaveV3Actions {\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       StateVariable       \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    uint256 public constant PERCENTAGE_FACTOR = 10000;\\n\\n    address public immutable pool;\\n    address public immutable WETH;\\n    IAaveOracle public immutable oracle;\\n\\n    mapping(bytes4 => uint8) public tokenGetterIDs;\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Modifier            \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    modifier nonZeroAmount(uint256 amount) {\\n        if (amount == 0) {\\n            revert ZeroAmountNotValid();\\n        }\\n        _;\\n    }\\n\\n    modifier validPercentage(uint256 percentage) {\\n        if (percentage > PERCENTAGE_FACTOR) {\\n            revert InvalidPercentage();\\n        }\\n        _;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Constructor         \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    constructor(address _aaveV3Pool, address _WETH, address _priceOracle) {\\n        pool = (_aaveV3Pool);\\n        WETH = (_WETH);\\n        oracle = IAaveOracle(_priceOracle);\\n\\n        tokenGetterIDs[IAaveV3Actions.supplyETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.withdrawETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.borrowETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.repayETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.supplyPercentageOfBalanceETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.changeSupplyToHealthFactorETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.borrowPercentageOfAvailableETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.repayPercentageOfDebtETH.selector] = 1;\\n        tokenGetterIDs[IAaveV3Actions.changeDebtToHealthFactorETH.selector] = 1;\\n\\n        tokenGetterIDs[IAaveV3Actions.supplyPercentageOfBalance.selector] = 2;\\n        tokenGetterIDs[IAaveV3Actions.changeSupplyToHealthFactor.selector] = 2;\\n        tokenGetterIDs[IAaveV3Actions.supply.selector] = 2;\\n        tokenGetterIDs[IAaveV3Actions.withdraw.selector] = 2;\\n\\n        tokenGetterIDs[IAaveV3Actions.borrow.selector] = 3;\\n        tokenGetterIDs[IAaveV3Actions.repay.selector] = 3;\\n        tokenGetterIDs[IAaveV3Actions.borrowPercentageOfAvailable.selector] = 3;\\n        tokenGetterIDs[IAaveV3Actions.repayPercentageOfDebt.selector] = 3;\\n        tokenGetterIDs[IAaveV3Actions.changeDebtToHealthFactor.selector] = 3;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503    Execution functions    \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    /* ====== Base AAVE V3 Functions ====== */\\n\\n    function supply(address wallet, address asset, uint256 amount)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](2);\\n\\n        executions[0] = _approveToken(asset, amount);\\n\\n        executions[1] = _supply(wallet, asset, amount);\\n\\n        return executions;\\n    }\\n\\n    function supplyETH(address wallet, uint256 amount)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](3);\\n\\n        executions[0] = _depositToWETH(amount);\\n\\n        executions[1] = _approveToken(WETH, amount);\\n\\n        executions[2] = _supply(wallet, WETH, amount);\\n\\n        return executions;\\n    }\\n\\n    function withdraw(address wallet, address asset, uint256 amount)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](1);\\n\\n        executions[0] = _withdraw(wallet, asset, amount);\\n\\n        return executions;\\n    }\\n\\n    function withdrawETH(address wallet, uint256 amount)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](2);\\n\\n        executions[0] = _withdraw(wallet, WETH, amount);\\n        executions[1] = _withdrawFromWETH(amount);\\n\\n        return executions;\\n    }\\n\\n    function borrow(address wallet, address asset, uint256 amount, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](1);\\n\\n        executions[0] = _borrow(wallet, asset, amount, interestRateMode);\\n\\n        return executions;\\n    }\\n\\n    function borrowETH(address wallet, uint256 amount, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](2);\\n\\n        executions[0] = _borrow(wallet, WETH, amount, interestRateMode);\\n\\n        executions[1] = _withdrawFromWETH(amount);\\n\\n        return executions;\\n    }\\n\\n    function repay(address wallet, address asset, uint256 amount, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](2);\\n\\n        executions[0] = _approveToken(asset, amount);\\n\\n        executions[1] = _repay(wallet, asset, amount, interestRateMode);\\n\\n        return executions;\\n    }\\n\\n    function repayETH(address wallet, uint256 amount, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(amount)\\n        returns (PluginExecution[] memory)\\n    {\\n        PluginExecution[] memory executions = new PluginExecution[](3);\\n\\n        executions[0] = _depositToWETH(amount);\\n\\n        executions[1] = _approveToken(WETH, amount);\\n\\n        executions[2] = _repay(wallet, WETH, amount, interestRateMode);\\n\\n        return executions;\\n    }\\n\\n    /* ====== Special AAVE V3 Functions ====== */\\n\\n    function supplyPercentageOfBalance(address wallet, address asset, uint256 percentage)\\n        public\\n        view\\n        nonZeroAmount(percentage)\\n        validPercentage(percentage)\\n        returns (PluginExecution[] memory)\\n    {\\n        uint256 supplyAmount = _calculatePercentageAmountOfAssetBalance(wallet, asset, percentage, false);\\n\\n        return supply(wallet, asset, supplyAmount);\\n    }\\n\\n    function supplyPercentageOfBalanceETH(address wallet, uint256 percentage)\\n        public\\n        view\\n        nonZeroAmount(percentage)\\n        validPercentage(percentage)\\n        returns (PluginExecution[] memory)\\n    {\\n        uint256 supplyAmount = _calculatePercentageAmountOfAssetBalance(wallet, WETH, percentage, true);\\n\\n        return supplyETH(wallet, supplyAmount);\\n    }\\n\\n    function changeSupplyToHealthFactorETH(address wallet, uint256 targetHealthFactor)\\n        public\\n        view\\n        returns (PluginExecution[] memory)\\n    {\\n        _validateHealtfactor(targetHealthFactor);\\n        (uint256 deltaAmount, bool isWithdraw) = _calculateDeltaCol(wallet, WETH, targetHealthFactor);\\n\\n        if (isWithdraw) {\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            address supplyToken = _getSupplyToken(WETH);\\n            uint256 maxWithdrawAmount = IERC20(supplyToken).balanceOf(wallet);\\n            if (deltaAmount > maxWithdrawAmount) {\\n                deltaAmount = maxWithdrawAmount;\\n            }\\n            return withdrawETH(wallet, deltaAmount);\\n        } else {\\n            uint256 maxAmount = wallet.balance;\\n            if (deltaAmount > maxAmount) {\\n                deltaAmount = maxAmount;\\n            }\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            return supplyETH(wallet, deltaAmount);\\n        }\\n    }\\n\\n    function changeSupplyToHealthFactor(address wallet, address asset, uint256 targetHealthFactor)\\n        public\\n        view\\n        returns (PluginExecution[] memory)\\n    {\\n        _validateHealtfactor(targetHealthFactor);\\n        (uint256 deltaAmount, bool isWithdraw) = _calculateDeltaCol(wallet, asset, targetHealthFactor);\\n\\n        if (isWithdraw) {\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            address supplyToken = _getSupplyToken(asset);\\n            uint256 maxWithdrawAmount = IERC20(supplyToken).balanceOf(wallet);\\n            if (deltaAmount > maxWithdrawAmount) {\\n                deltaAmount = maxWithdrawAmount;\\n            }\\n            return withdraw(wallet, asset, deltaAmount);\\n        } else {\\n            uint256 maxAmount = IERC20(asset).balanceOf(wallet);\\n            if (deltaAmount > maxAmount) {\\n                deltaAmount = maxAmount;\\n            }\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            return supply(wallet, asset, deltaAmount);\\n        }\\n    }\\n\\n    function borrowPercentageOfAvailable(address wallet, address asset, uint256 percentage, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(percentage)\\n        validPercentage(percentage)\\n        returns (PluginExecution[] memory)\\n    {\\n        uint256 borowAmount = _calculateBorrowAmount(wallet, asset, percentage);\\n\\n        return borrow(wallet, asset, borowAmount, interestRateMode);\\n    }\\n\\n    function borrowPercentageOfAvailableETH(address wallet, uint256 percentage, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(percentage)\\n        validPercentage(percentage)\\n        returns (PluginExecution[] memory)\\n    {\\n        uint256 borowAmount = _calculateBorrowAmount(wallet, WETH, percentage);\\n\\n        return borrowETH(wallet, borowAmount, interestRateMode);\\n    }\\n\\n    function repayPercentageOfDebt(address wallet, address asset, uint256 percentage, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(percentage)\\n        validPercentage(percentage)\\n        returns (PluginExecution[] memory)\\n    {\\n        address debtToken = _getDebtToken(asset, interestRateMode);\\n\\n        uint256 debt = IERC20(debtToken).balanceOf(wallet);\\n        uint256 repayAmount = debt * percentage / PERCENTAGE_FACTOR;\\n        return repay(wallet, asset, repayAmount, interestRateMode);\\n    }\\n\\n    function repayPercentageOfDebtETH(address wallet, uint256 percentage, uint256 interestRateMode)\\n        public\\n        view\\n        nonZeroAmount(percentage)\\n        validPercentage(percentage)\\n        returns (PluginExecution[] memory)\\n    {\\n        address debtToken = _getDebtToken(WETH, interestRateMode);\\n        uint256 debt = IERC20(debtToken).balanceOf(wallet);\\n        uint256 repayAmount = debt * percentage / PERCENTAGE_FACTOR;\\n        return repayETH(wallet, repayAmount, interestRateMode);\\n    }\\n\\n    function changeDebtToHealthFactor(\\n        address wallet,\\n        address asset,\\n        uint256 targetHealthFactor,\\n        uint256 interestRateMode\\n    ) public view returns (PluginExecution[] memory) {\\n        _validateHealtfactor(targetHealthFactor);\\n\\n        (uint256 deltaAmount, bool isRepay) = _calculateDeltaDebt(wallet, asset, targetHealthFactor);\\n\\n        if (isRepay) {\\n            address debtToken = _getDebtToken(asset, interestRateMode);\\n            uint256 maxAmount = IERC20(asset).balanceOf(wallet) > IERC20(debtToken).balanceOf(wallet) ? IERC20(asset).balanceOf(wallet) : IERC20(debtToken).balanceOf(wallet);\\n            \\n            if (deltaAmount > maxAmount) {\\n                deltaAmount = maxAmount;\\n            }\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            return repay(wallet, asset, deltaAmount, interestRateMode);\\n        } else {\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            return borrow(wallet, asset, deltaAmount, interestRateMode);\\n        }\\n    }\\n\\n    function changeDebtToHealthFactorETH(address wallet, uint256 targetHealthFactor, uint256 interestRateMode)\\n        public\\n        view\\n        returns (PluginExecution[] memory)\\n    {\\n        _validateHealtfactor(targetHealthFactor);\\n        (uint256 deltaAmount, bool isRepay) = _calculateDeltaDebt(wallet, WETH, targetHealthFactor);\\n\\n        if (isRepay) {            \\n            address debtToken = _getDebtToken(WETH, interestRateMode);\\n            uint256 maxAmount = wallet.balance > IERC20(debtToken).balanceOf(wallet) ? wallet.balance : IERC20(debtToken).balanceOf(wallet);\\n            if (deltaAmount > maxAmount) {\\n                deltaAmount = maxAmount;\\n            }\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            return repayETH(wallet, deltaAmount, interestRateMode);\\n        } else {\\n            if (deltaAmount == 0) {\\n                return new PluginExecution[](0);\\n            }\\n            return borrowETH(wallet, deltaAmount, interestRateMode);\\n        }\\n    }\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503    Internal functions     \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function _approveToken(address token, uint256 amount) internal view returns (PluginExecution memory) {\\n        bytes memory _data = abi.encodeCall(IERC20.approve, (address(pool), amount));\\n\\n        return PluginExecution({target: token, value: 0, data: _data});\\n    }\\n\\n    function _repay(address wallet, address asset, uint256 amount, uint256 interestRateMode)\\n        internal\\n        view\\n        returns (PluginExecution memory)\\n    {\\n        bytes memory _data = abi.encodeCall(IPool.repay, (asset, amount, interestRateMode, wallet));\\n\\n        return PluginExecution({target: pool, value: 0, data: _data});\\n    }\\n\\n    function _borrow(address wallet, address asset, uint256 amount, uint256 interestRateMode)\\n        internal\\n        view\\n        returns (PluginExecution memory)\\n    {\\n        bytes memory _data = abi.encodeCall(IPool.borrow, (asset, amount, interestRateMode, 0, wallet));\\n\\n        return PluginExecution({target: pool, value: 0, data: _data});\\n    }\\n\\n    function _supply(address wallet, address asset, uint256 amount) internal view returns (PluginExecution memory) {\\n        bytes memory _data = abi.encodeCall(IPool.supply, (asset, amount, wallet, 0));\\n\\n        return PluginExecution({target: (pool), value: 0, data: _data});\\n    }\\n\\n    function _withdraw(address wallet, address asset, uint256 amount) internal view returns (PluginExecution memory) {\\n        bytes memory _data = abi.encodeCall(IPool.withdraw, (asset, amount, wallet));\\n\\n        return PluginExecution({target: (pool), value: 0, data: _data});\\n    }\\n\\n    function _withdrawFromWETH(uint256 amount) internal view returns (PluginExecution memory) {\\n        bytes memory _data = abi.encodeCall(IWETH.withdraw, (amount));\\n        return PluginExecution({target: WETH, value: 0, data: _data});\\n    }\\n\\n    function _depositToWETH(uint256 amount) internal view returns (PluginExecution memory) {\\n        bytes memory _data = abi.encodeCall(IWETH.deposit, ());\\n        return PluginExecution({target: WETH, value: amount, data: _data});\\n    }\\n\\n    function _calculateBorrowAmount(address wallet, address asset, uint256 percentage)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (,, uint256 availableBorrowsBase,,,) = IPool(pool).getUserAccountData(wallet);\\n\\n        uint256 price = oracle.getAssetPrice(asset);\\n        uint256 decimals = IERC20Metadata(asset).decimals();\\n\\n        uint256 maxBorrowAmount = availableBorrowsBase * 10 ** decimals / price;\\n        return (maxBorrowAmount) * percentage / PERCENTAGE_FACTOR;\\n    }\\n\\n    function _calculateDeltaDebt(address wallet, address asset, uint256 targetHealthFactor)\\n        internal\\n        view\\n        returns (uint256 deltaDebt, bool isRepay)\\n    {\\n        (uint256 currentCol, uint256 currentDebt,, uint256 currentLT,,) = IPool(pool).getUserAccountData(wallet);\\n\\n        uint256 targetDebt = (((currentCol * currentLT) / PERCENTAGE_FACTOR) * 1e18) / targetHealthFactor;\\n\\n        uint256 deltaDebtInBaseCurrency;\\n        if (targetDebt < currentDebt) {\\n            isRepay = true;\\n            deltaDebtInBaseCurrency = currentDebt - targetDebt;\\n        } else {\\n            deltaDebtInBaseCurrency = targetDebt - currentDebt;\\n        }\\n\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint256 decimals = IERC20Metadata(asset).decimals();\\n\\n        deltaDebt = assetPrice > 0 ? (deltaDebtInBaseCurrency * 10 ** decimals) / assetPrice : 0;\\n    }\\n\\n    function _calculateDeltaCol(address wallet, address asset, uint256 targetHealthFactor)\\n        internal\\n        view\\n        returns (uint256 deltaCol, bool isWithdraw)\\n    {\\n        (uint256 currentCol, uint256 currentDebt,, uint256 currentLT,,) = IPool(pool).getUserAccountData(wallet);\\n\\n        uint256 targetCollateral = (targetHealthFactor * currentDebt / 1e18) * PERCENTAGE_FACTOR / currentLT;\\n\\n        uint256 deltaColInBaseCurrency;\\n        if (targetCollateral < currentCol) {\\n            isWithdraw = true;\\n            deltaColInBaseCurrency = currentCol - targetCollateral;\\n        } else {\\n            deltaColInBaseCurrency = targetCollateral - currentCol;\\n        }\\n\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint256 decimals = IERC20Metadata(asset).decimals();\\n\\n        deltaCol = assetPrice > 0 ? (deltaColInBaseCurrency * 10 ** decimals) / assetPrice : 0;\\n    }\\n\\n    function _calculatePercentageAmountOfAssetBalance(address wallet, address asset, uint256 percentage, bool native)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalBalance = native ? wallet.balance : IERC20(asset).balanceOf(wallet);\\n\\n        return (totalBalance * percentage) / PERCENTAGE_FACTOR;\\n    }\\n\\n    function _getDebtToken(address asset, uint256 interestMoode) internal view returns (address) {\\n        DataTypes.ReserveData memory reserveData = IPool(pool).getReserveData(asset);\\n\\n        if (interestMoode == 1) {\\n            return reserveData.stableDebtTokenAddress;\\n        } else {\\n            return reserveData.variableDebtTokenAddress;\\n        }\\n    }\\n\\n    function _getSupplyToken(address asset) internal view returns(address){\\n        return IPool(pool).getReserveData(asset).aTokenAddress;\\n    }\\n\\n    function _validateHealtfactor(uint256 healthFactor) internal pure {\\n        if (healthFactor < 1e18) {\\n            revert HealthFactorNotValid();\\n        }\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503    View functions     \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function getTokenForSelector(bytes4 selector, bytes memory params) external view returns (address) {\\n        uint8 tokenGetterID = tokenGetterIDs[selector];\\n\\n        if (tokenGetterID == 0 || tokenGetterID > 3) {\\n            revert InvalidTokenGetterID();\\n        }\\n\\n        if (tokenGetterID == 1) {\\n            return address(0);\\n        }\\n\\n        if (tokenGetterID == 2) {\\n            (, address token,) = abi.decode(params, (address, address, uint256));\\n            return token;\\n        } else {\\n            (, address token,,) = abi.decode(params, (address, address, uint256, uint256));\\n            return token;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8fc845e15131759ec4d891db8fbe179d5e60181249c3b6fc292dbfe71212bf1\",\"license\":\"MIT\"},\"src/actions/aave-v3/interfaces/IAaveV3Actions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport {IAction} from \\\"../../../interfaces/IAction.sol\\\";\\nimport {ITokenGetter} from \\\"../../../interfaces/ITokenGetter.sol\\\";\\n\\ninterface IAaveV3Actions is IAction {\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Errors       \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    error ZeroAmountNotValid();\\n    error HealthFactorNotValid();\\n    error InvalidTokenGetterID();\\n    error InvalidPercentage();\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503    Execution functions    \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function supply(address wallet, address asset, uint256 amount) external view returns (PluginExecution[] memory);\\n    function supplyETH(address wallet, uint256 amount) external view returns (PluginExecution[] memory);\\n    function withdraw(address wallet, address asset, uint256 amount) external view returns (PluginExecution[] memory);\\n    function withdrawETH(address wallet, uint256 amount) external view returns (PluginExecution[] memory);\\n\\n    function borrow(address wallet, address asset, uint256 amount, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function borrowETH(address wallet, uint256 amount, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function repay(address wallet, address asset, uint256 amount, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function repayETH(address wallet, uint256 amount, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n\\n    function supplyPercentageOfBalance(address wallet, address asset, uint256 percentage)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function supplyPercentageOfBalanceETH(address wallet, uint256 percentage)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function changeSupplyToHealthFactorETH(address wallet, uint256 targetHealthFactor)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function changeSupplyToHealthFactor(address wallet, address asset, uint256 targetHealthFactor)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function borrowPercentageOfAvailable(address wallet, address asset, uint256 percentage, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function borrowPercentageOfAvailableETH(address wallet, uint256 percentage, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function repayPercentageOfDebt(address wallet, address asset, uint256 percentage, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function repayPercentageOfDebtETH(address wallet, uint256 percentage, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n    function changeDebtToHealthFactor(\\n        address wallet,\\n        address asset,\\n        uint256 targetHealthFactor,\\n        uint256 interestRateMode\\n    ) external view returns (PluginExecution[] memory);\\n    function changeDebtToHealthFactorETH(address wallet, uint256 targetHealthFactor, uint256 interestRateMode)\\n        external\\n        view\\n        returns (PluginExecution[] memory);\\n}\\n\",\"keccak256\":\"0x3d40a2aad34bd0fdd15f72bed7efcabd74cdb397c0e149927d7fda34978562fc\",\"license\":\"MIT\"},\"src/interfaces/IAction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\ninterface IAction {\\n    struct PluginExecution {\\n        address target;\\n        uint256 value;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0xfb01e3dda2a061f20419ea030cafbb8f796f8fd1c132497ade467336104f3073\",\"license\":\"MIT\"},\"src/interfaces/ITokenGetter.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.26;\\n\\ninterface ITokenGetter {\\n    function getTokenForSelector(bytes4 selector, bytes memory params) external view returns (address);\\n}\\n\",\"keccak256\":\"0x469abb5b1a5edc14335d598d57b52943d3ecd071ce5ddf8fd7287f83d2a79a60\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051612e7c380380612e7c83398101604081905261002f91610370565b6001600160a01b0392831660805290821660a0521660c052600060208190527f07db34c1fd05f9d9187921f8f057420bb79f0b230fd08bf0c4d430753d180cc68054600160ff1991821681179092557fd478db7aa2849b0ece7fc74f9ee624ae708dbf122a7c57593fe1313b230914e280548216831790557f620a92a28ae78ce8b800ad793b764db6f0448948078f8cd3d7d2c1e322840ce480548216831790557f93a80a3095f0e987eccc262cca2b95be8b2b32782e8815c8f9a20f61b4322f4980548216831790557f8773539c4eb3cc8db4f80ab3a87b218f19c1348e739fa85ca67d1d920c4991aa80548216831790557facfc9969eee7390e0bd6dd87d4eba64182e81f9f8ac45a3df15fea0d9ff65b9580548216831790557f3b6b4d41c2a628f599b13ab8abfa6bf4528c5012f1e1e14c2e9020f6c1fef16e80548216831790557f4a9552237c94df496f63e97aece21c062a9f4c4baaa7a73c8229dbbf39e3cb8280548216831790557f2ee2d95b5f8945c49bf263313b4e8c44aea0d6d414febcd48531c6a151c09deb805482169092179091557f48b87e637b5c727f2a3e4cc31d56909bd86b76045e1f547361f026e650044d358054600290831681179091557fbb1a113f269177581ab2acb315267a5025addf042ef6699c2b20b819e7b8119980548316821790557f9ddee275b761f7835736451cc77550ac42bf93d563dd51258c55c29e59db228680548316821790557f43eb5a693a06350caa7e6d84ced1ab9b3904d21190208240e12c22991a97c1cd8054831690911790557f9667fd401f62d29357e095aba0a65ade01749e2b86052208a387023a39fece498054600390831681179091557fbbcdc05896c709ec1d1176ca3a1da22c4ff4e2c05117d1308be246c3558520eb80548316821790557fa6eb3ea879a1aec1fa857eb3f8822c5eab9cf3dce8818416f0661f19b46e5c0780548316821790557f1e79192a8e6a66135581d6786f887c0de5e3ac970527b94f32ef83edd2c020ff8054831682179055634b6a4acf60e11b9092527f0fc9473281da938d34fc5a85d9479b33b2b12c0a3da3e24d40c4c406d404332b805490911690911790556103b3565b80516001600160a01b038116811461036b57600080fd5b919050565b60008060006060848603121561038557600080fd5b61038e84610354565b925061039c60208501610354565b91506103aa60408501610354565b90509250925092565b60805160a05160c0516129dd61049f60003960008181610262015281816117580152611eba0152600081816102c201528181610536015281816105e2015281816108b4015281816108fd01528181610949015281816109c201528181610b3701528181610c8601528181610ccf0152818161129b015281816112d10152818161156b0152818161166401528181611ab70152611d2801526000818161019e015281816116c5015281816118830152818161197401528181611a2001528181611b5c01528181611c0b01528181611d8e01528181611ff401528181612091015261212901526129dd6000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806389cbe656116100c3578063d963b5b11161007c578063d963b5b11461033f578063d9caed1214610352578063e42fb6ca14610365578063ee01e5e714610378578063fbf377391461038f578063fc1c1e11146103a257600080fd5b806389cbe6561461029757806396d4959e146102aa578063ad5c4648146102bd578063b1d61368146102e4578063c1a8638614610319578063c7b94b1e1461032c57600080fd5b80634af8c8ce116101155780634af8c8ce146102115780635581161b146102245780635770aafe146102375780637d9cec4d1461024a5780637dc0d1d01461025d578063865eac3d1461028457600080fd5b80630bd834341461015d5780630c0a769b1461018657806316f0115b146101995780632b933c62146101d85780634782f779146101eb57806349002749146101fe575b600080fd5b61017061016b366004612267565b6103b5565b60405161017d91906122ad565b60405180910390f35b610170610194366004612374565b610424565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161017d565b6101706101e63660046123b5565b6104d7565b6101706101f93660046123ea565b610583565b61017061020c366004612267565b610654565b61017061021f366004612374565b610709565b6101c06102323660046124a4565b610778565b6101706102453660046123ea565b61082f565b6101706102583660046123ea565b610935565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b6101706102923660046123b5565b610ae8565b6101706102a53660046123b5565b610c01565b6101706102b8366004612267565b610d08565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b6103076102f236600461254f565b60006020819052908152604090205460ff1681565b60405160ff909116815260200161017d565b610170610327366004612267565b610fb5565b61017061033a366004612374565b6110b0565b61017061034d3660046123b5565b611287565b610170610360366004612374565b6114a5565b6101706103733660046123b5565b61151b565b61038161271081565b60405190815260200161017d565b61017061039d366004612267565b61159d565b6101706103b03660046123ea565b611614565b606082806000036103d957604051631a30ee4d60e11b815260040160405180910390fd5b836127108111156103fd57604051631f3b85d360e01b815260040160405180910390fd5b600061040a8888886116a1565b90506104188888838861159d565b98975050505050505050565b6060818060000361044857604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b610468612228565b815260200190600190039081610460579050509050610487858561186e565b8160008151811061049a5761049a61256a565b60200260200101819052506104b0868686611907565b816001815181106104c3576104c361256a565b602090810291909101015295945050505050565b606082806000036104fb57604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b61051b612228565b81526020019060019003908161051357905050905061055c867f000000000000000000000000000000000000000000000000000000000000000087876119a5565b8160008151811061056f5761056f61256a565b60200260200101819052506104b085611a5d565b606081806000036105a757604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b6105c7612228565b8152602001906001900390816105bf579050509050610607857f000000000000000000000000000000000000000000000000000000000000000086611af0565b8160008151811061061a5761061a61256a565b602002602001018190525061062e84611a5d565b816001815181106106415761064161256a565b6020908102919091010152949350505050565b6060828060000361067857604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b610698612228565b8152602001906001900390816106905790505090506106b7868661186e565b816000815181106106ca576106ca61256a565b60200260200101819052506106e187878787611b98565b816001815181106106f4576106f461256a565b60209081029190910101529695505050505050565b6060818060000361072d57604051631a30ee4d60e11b815260040160405180910390fd5b8261271081111561075157604051631f3b85d360e01b815260040160405180910390fd5b60006107608787876000611c48565b905061076d878783610424565b979650505050505050565b6001600160e01b0319821660009081526020819052604081205460ff168015806107a5575060038160ff16115b156107c35760405163ae563a1f60e01b815260040160405180910390fd5b8060ff166001036107d8576000915050610829565b8060ff16600203610805576000838060200190518101906107f99190612580565b50935061082992505050565b60008380602001905181019061081b91906125c4565b509094506108299350505050565b92915050565b6060818060000361085357604051631a30ee4d60e11b815260040160405180910390fd5b60408051600380825260808201909252600091816020015b610873612228565b81526020019060019003908161086b57905050905061089184611ce4565b816000815181106108a4576108a461256a565b60200260200101819052506108d97f00000000000000000000000000000000000000000000000000000000000000008561186e565b816001815181106108ec576108ec61256a565b6020026020010181905250610922857f000000000000000000000000000000000000000000000000000000000000000086611907565b816002815181106106415761064161256a565b606061094082611d58565b60008061096e857f000000000000000000000000000000000000000000000000000000000000000086611d84565b915091508015610a7957816000036109bb5760408051600080825260208201909252906109b1565b61099e612228565b8152602001906001900390816109965790505b5092505050610829565b60006109e67f0000000000000000000000000000000000000000000000000000000000000000611fd2565b6040516370a0823160e01b81526001600160a01b0388811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a56919061260c565b905080841115610a64578093505b610a6e8785610583565b945050505050610829565b6001600160a01b0385163180831115610a90578092505b82600003610ad4576040805160008082526020820190925290610ac9565b610ab6612228565b815260200190600190039081610aae5790505b509350505050610829565b610ade868461082f565b9350505050610829565b60608280600003610b0c57604051631a30ee4d60e11b815260040160405180910390fd5b83612710811115610b3057604051631f3b85d360e01b815260040160405180910390fd5b6000610b5c7f00000000000000000000000000000000000000000000000000000000000000008661206d565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc919061260c565b90506000612710610bdd898461263b565b610be79190612652565b9050610bf4898289610c01565b9998505050505050505050565b60608280600003610c2557604051631a30ee4d60e11b815260040160405180910390fd5b60408051600380825260808201909252600091816020015b610c45612228565b815260200190600190039081610c3d579050509050610c6385611ce4565b81600081518110610c7657610c7661256a565b6020026020010181905250610cab7f00000000000000000000000000000000000000000000000000000000000000008661186e565b81600181518110610cbe57610cbe61256a565b6020026020010181905250610cf5867f00000000000000000000000000000000000000000000000000000000000000008787611b98565b816002815181106104c3576104c361256a565b6060610d1383611d58565b600080610d2187878761211f565b915091508015610f59576000610d37878661206d565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da7919061260c565b6040516370a0823160e01b81526001600160a01b038b811660048301528a16906370a0823190602401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e11919061260c565b11610e85576040516370a0823160e01b81526001600160a01b038a811660048301528316906370a0823190602401602060405180830381865afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e80919061260c565b610eef565b6040516370a0823160e01b81526001600160a01b038a811660048301528916906370a0823190602401602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef919061260c565b905080841115610efd578093505b83600003610f42576040805160008082526020820190925290610f36565b610f23612228565b815260200190600190039081610f1b5790505b50945050505050610fad565b610f4e89898689610654565b945050505050610fad565b81600003610f9c576040805160008082526020820190925290610f92565b610f7f612228565b815260200190600190039081610f775790505b5092505050610fad565b610fa88787848761159d565b925050505b949350505050565b60608280600003610fd957604051631a30ee4d60e11b815260040160405180910390fd5b83612710811115610ffd57604051631f3b85d360e01b815260040160405180910390fd5b6000611009878661206d565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611079919061260c565b9050600061271061108a898461263b565b6110949190612652565b90506110a28a8a838a610654565b9a9950505050505050505050565b60606110bb82611d58565b6000806110c9868686611d84565b9150915080156111b5578160000361111657604080516000808252602082019092529061110c565b6110f9612228565b8152602001906001900390816110f15790505b5092505050611280565b600061112186611fd2565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561116d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611191919061260c565b90508084111561119f578093505b6111aa8888866114a5565b945050505050611280565b6040516370a0823160e01b81526001600160a01b038781166004830152600091908716906370a0823190602401602060405180830381865afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611223919061260c565b905080831115611231578092505b8260000361127557604080516000808252602082019092529061126a565b611257612228565b81526020019060019003908161124f5790505b509350505050611280565b61076d878785610424565b9392505050565b606061129283611d58565b6000806112c0867f00000000000000000000000000000000000000000000000000000000000000008761211f565b91509150801561144f5760006112f67f00000000000000000000000000000000000000000000000000000000000000008661206d565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611366919061260c565b886001600160a01b031631116113e5576040516370a0823160e01b81526001600160a01b0389811660048301528316906370a0823190602401602060405180830381865afa1580156113bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e0919061260c565b6113f1565b876001600160a01b0316315b9050808411156113ff578093505b83600003611444576040805160008082526020820190925290611438565b611425612228565b81526020019060019003908161141d5790505b50945050505050611280565b6111aa888588610c01565b8160000361149157604080516000808252602082019092529061110c565b611475612228565b81526020019060019003908161146d5790505092505050611280565b61149c8683866104d7565b92505050611280565b606081806000036114c957604051631a30ee4d60e11b815260040160405180910390fd5b604080516001808252818301909252600091816020015b6114e8612228565b8152602001906001900390816114e0579050509050611508868686611af0565b816000815181106104c3576104c361256a565b6060828060000361153f57604051631a30ee4d60e11b815260040160405180910390fd5b8361271081111561156357604051631f3b85d360e01b815260040160405180910390fd5b6000611590877f0000000000000000000000000000000000000000000000000000000000000000886116a1565b905061076d8782876104d7565b606082806000036115c157604051631a30ee4d60e11b815260040160405180910390fd5b604080516001808252818301909252600091816020015b6115e0612228565b8152602001906001900390816115d8579050509050611601878787876119a5565b816000815181106106f4576106f461256a565b6060818060000361163857604051631a30ee4d60e11b815260040160405180910390fd5b8261271081111561165c57604051631f3b85d360e01b815260040160405180910390fd5b600061168b867f0000000000000000000000000000000000000000000000000000000000000000876001611c48565b9050611697868261082f565b9695505050505050565b604051632fe4a15f60e21b81526001600160a01b03848116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063bf92857c9060240160c060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190612674565b505060405163b3596f0760e01b81526001600160a01b038981166004830152929550600094507f0000000000000000000000000000000000000000000000000000000000000000909216925063b3596f07916024019050602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c8919061260c565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561180a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182e91906126be565b60ff16905060008261184183600a6127c8565b61184b908661263b565b6118559190612652565b9050612710611864878361263b565b6104189190612652565b611876612228565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044810183905260009060640160408051601f19818403018152918152602080830180516001600160e01b031663095ea7b360e01b17905281516060810183526001600160a01b03979097168752600090870152850152509192915050565b61190f612228565b50604080516001600160a01b03938416602482015260448101929092529282166064820152600060848083018290528451808403909101815260a49092018452602080830180516001600160e01b031663617ba03760e01b17905284516060810186527f000000000000000000000000000000000000000000000000000000000000000090941684528301529181019190915290565b6119ad612228565b6040516001600160a01b038086166024830152604482018590526064820184905260006084830181905290871660a48301529060c40160408051601f19818403018152918152602080830180516001600160e01b031663a415bcad60e01b17905281516060810183526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016815260009181019190915290810191909152915050949350505050565b611a65612228565b600082604051602401611a7a91815260200190565b60408051601f19818403018152918152602080830180516001600160e01b0316632e1a7d4d60e01b17905281516060810183526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152600091810191909152908101919091529392505050565b611af8612228565b6040516001600160a01b038085166024830152604482018490528516606482015260009060840160408051601f19818403018152918152602080830180516001600160e01b0316631a4ca37b60e21b17905281516060810183526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152600091810191909152908101919091529150509392505050565b611ba0612228565b6040516001600160a01b03808616602483015260448201859052606482018490528616608482015260009060a40160408051601f19818403018152918152602080830180516001600160e01b031663573ade8160e01b17905281516060810183526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016815260009181019190915290810191909152915050949350505050565b60008082611cbf576040516370a0823160e01b81526001600160a01b0387811660048301528616906370a0823190602401602060405180830381865afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba919061260c565b611ccb565b856001600160a01b0316315b9050612710611cda858361263b565b6116979190612652565b611cec612228565b506040805160048152602481018252602080820180516001600160e01b0316630d0e30db60e41b17905282516060810184526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152908101939093529082015290565b670de0b6b3a7640000811015611d815760405163b0a8c6c360e01b815260040160405180910390fd5b50565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bf92857c896040518263ffffffff1660e01b8152600401611de791906001600160a01b0391909116815260200190565b60c060405180830381865afa158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e289190612674565b505093505092509250600081612710670de0b6b3a7640000858a611e4c919061263b565b611e569190612652565b611e60919061263b565b611e6a9190612652565b9050600084821015611e8b5760019550611e8482866127d4565b9050611e98565b611e9585836127d4565b90505b60405163b3596f0760e01b81526001600160a01b038a811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f27919061260c565b905060008a6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d91906126be565b60ff16905060008211611fa1576000611fc1565b81611fad82600a6127c8565b611fb7908561263b565b611fc19190612652565b985050505050505050935093915050565b6040516335ea6a7560e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa15801561203e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612062919061287b565b610100015192915050565b6040516335ea6a7560e01b81526001600160a01b03838116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa1580156120d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fd919061287b565b9050826001036121135761012001519050610829565b61014001519050610829565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bf92857c896040518263ffffffff1660e01b815260040161218291906001600160a01b0391909116815260200190565b60c060405180830381865afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190612674565b50509350509250925060008661271083866121de919061263b565b6121e89190612652565b6121fa90670de0b6b3a764000061263b565b6122049190612652565b905060008382101561221e5760019550611e8482856127d4565b611e9584836127d4565b604051806060016040528060006001600160a01b0316815260200160008152602001606081525090565b6001600160a01b0381168114611d8157600080fd5b6000806000806080858703121561227d57600080fd5b843561228881612252565b9350602085013561229881612252565b93969395505050506040820135916060013590565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561236857868503603f19018452815180516001600160a01b0316865260208082015190870152604090810151606091870182905280519187018290529060005b8181101561233657602081840181015160808a8401015201612319565b506000608082890101526080601f19601f830116880101965050506020820191506020840193506001810190506122d5565b50929695505050505050565b60008060006060848603121561238957600080fd5b833561239481612252565b925060208401356123a481612252565b929592945050506040919091013590565b6000806000606084860312156123ca57600080fd5b83356123d581612252565b95602085013595506040909401359392505050565b600080604083850312156123fd57600080fd5b823561240881612252565b946020939093013593505050565b80356001600160e01b03198116811461242e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561246d5761246d612433565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561249c5761249c612433565b604052919050565b600080604083850312156124b757600080fd5b6124c083612416565b9150602083013567ffffffffffffffff8111156124dc57600080fd5b8301601f810185136124ed57600080fd5b803567ffffffffffffffff81111561250757612507612433565b61251a601f8201601f1916602001612473565b81815286602083850101111561252f57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60006020828403121561256157600080fd5b61128082612416565b634e487b7160e01b600052603260045260246000fd5b60008060006060848603121561259557600080fd5b83516125a081612252565b60208501519093506125b181612252565b6040949094015192959394509192915050565b600080600080608085870312156125da57600080fd5b84516125e581612252565b60208601519094506125f681612252565b6040860151606090960151949790965092505050565b60006020828403121561261e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761082957610829612625565b60008261266f57634e487b7160e01b600052601260045260246000fd5b500490565b60008060008060008060c0878903121561268d57600080fd5b50508451602086015160408701516060880151608089015160a090990151939a929950909790965094509092509050565b6000602082840312156126d057600080fd5b815160ff8116811461128057600080fd5b6001815b600184111561271c5780850481111561270057612700612625565b600184161561270e57908102905b60019390931c9280026126e5565b935093915050565b60008261273357506001610829565b8161274057506000610829565b816001811461275657600281146127605761277c565b6001915050610829565b60ff84111561277157612771612625565b50506001821b610829565b5060208310610133831016604e8410600b841016171561279f575081810a610829565b6127ac60001984846126e1565b80600019048211156127c0576127c0612625565b029392505050565b60006112808383612724565b8181038181111561082957610829612625565b6000602082840312156127f957600080fd5b6040516020810167ffffffffffffffff8111828210171561281c5761281c612433565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461242e57600080fd5b805164ffffffffff8116811461242e57600080fd5b805161ffff8116811461242e57600080fd5b805161242e81612252565b60006101e082840312801561288f57600080fd5b50612898612449565b6128a284846127e7565b81526128b060208401612829565b60208201526128c160408401612829565b60408201526128d260608401612829565b60608201526128e360808401612829565b60808201526128f460a08401612829565b60a082015261290560c08401612849565b60c082015261291660e0840161285e565b60e08201526129286101008401612870565b61010082015261293b6101208401612870565b61012082015261294e6101408401612870565b6101408201526129616101608401612870565b6101608201526129746101808401612829565b6101808201526129876101a08401612829565b6101a082015261299a6101c08401612829565b6101c0820152939250505056fea2646970667358221220fcafbb19047b5555e93dc49a31e63f976b9e1b1c3f26665e2d3f38c5149edae164736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806389cbe656116100c3578063d963b5b11161007c578063d963b5b11461033f578063d9caed1214610352578063e42fb6ca14610365578063ee01e5e714610378578063fbf377391461038f578063fc1c1e11146103a257600080fd5b806389cbe6561461029757806396d4959e146102aa578063ad5c4648146102bd578063b1d61368146102e4578063c1a8638614610319578063c7b94b1e1461032c57600080fd5b80634af8c8ce116101155780634af8c8ce146102115780635581161b146102245780635770aafe146102375780637d9cec4d1461024a5780637dc0d1d01461025d578063865eac3d1461028457600080fd5b80630bd834341461015d5780630c0a769b1461018657806316f0115b146101995780632b933c62146101d85780634782f779146101eb57806349002749146101fe575b600080fd5b61017061016b366004612267565b6103b5565b60405161017d91906122ad565b60405180910390f35b610170610194366004612374565b610424565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161017d565b6101706101e63660046123b5565b6104d7565b6101706101f93660046123ea565b610583565b61017061020c366004612267565b610654565b61017061021f366004612374565b610709565b6101c06102323660046124a4565b610778565b6101706102453660046123ea565b61082f565b6101706102583660046123ea565b610935565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b6101706102923660046123b5565b610ae8565b6101706102a53660046123b5565b610c01565b6101706102b8366004612267565b610d08565b6101c07f000000000000000000000000000000000000000000000000000000000000000081565b6103076102f236600461254f565b60006020819052908152604090205460ff1681565b60405160ff909116815260200161017d565b610170610327366004612267565b610fb5565b61017061033a366004612374565b6110b0565b61017061034d3660046123b5565b611287565b610170610360366004612374565b6114a5565b6101706103733660046123b5565b61151b565b61038161271081565b60405190815260200161017d565b61017061039d366004612267565b61159d565b6101706103b03660046123ea565b611614565b606082806000036103d957604051631a30ee4d60e11b815260040160405180910390fd5b836127108111156103fd57604051631f3b85d360e01b815260040160405180910390fd5b600061040a8888886116a1565b90506104188888838861159d565b98975050505050505050565b6060818060000361044857604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b610468612228565b815260200190600190039081610460579050509050610487858561186e565b8160008151811061049a5761049a61256a565b60200260200101819052506104b0868686611907565b816001815181106104c3576104c361256a565b602090810291909101015295945050505050565b606082806000036104fb57604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b61051b612228565b81526020019060019003908161051357905050905061055c867f000000000000000000000000000000000000000000000000000000000000000087876119a5565b8160008151811061056f5761056f61256a565b60200260200101819052506104b085611a5d565b606081806000036105a757604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b6105c7612228565b8152602001906001900390816105bf579050509050610607857f000000000000000000000000000000000000000000000000000000000000000086611af0565b8160008151811061061a5761061a61256a565b602002602001018190525061062e84611a5d565b816001815181106106415761064161256a565b6020908102919091010152949350505050565b6060828060000361067857604051631a30ee4d60e11b815260040160405180910390fd5b60408051600280825260608201909252600091816020015b610698612228565b8152602001906001900390816106905790505090506106b7868661186e565b816000815181106106ca576106ca61256a565b60200260200101819052506106e187878787611b98565b816001815181106106f4576106f461256a565b60209081029190910101529695505050505050565b6060818060000361072d57604051631a30ee4d60e11b815260040160405180910390fd5b8261271081111561075157604051631f3b85d360e01b815260040160405180910390fd5b60006107608787876000611c48565b905061076d878783610424565b979650505050505050565b6001600160e01b0319821660009081526020819052604081205460ff168015806107a5575060038160ff16115b156107c35760405163ae563a1f60e01b815260040160405180910390fd5b8060ff166001036107d8576000915050610829565b8060ff16600203610805576000838060200190518101906107f99190612580565b50935061082992505050565b60008380602001905181019061081b91906125c4565b509094506108299350505050565b92915050565b6060818060000361085357604051631a30ee4d60e11b815260040160405180910390fd5b60408051600380825260808201909252600091816020015b610873612228565b81526020019060019003908161086b57905050905061089184611ce4565b816000815181106108a4576108a461256a565b60200260200101819052506108d97f00000000000000000000000000000000000000000000000000000000000000008561186e565b816001815181106108ec576108ec61256a565b6020026020010181905250610922857f000000000000000000000000000000000000000000000000000000000000000086611907565b816002815181106106415761064161256a565b606061094082611d58565b60008061096e857f000000000000000000000000000000000000000000000000000000000000000086611d84565b915091508015610a7957816000036109bb5760408051600080825260208201909252906109b1565b61099e612228565b8152602001906001900390816109965790505b5092505050610829565b60006109e67f0000000000000000000000000000000000000000000000000000000000000000611fd2565b6040516370a0823160e01b81526001600160a01b0388811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a56919061260c565b905080841115610a64578093505b610a6e8785610583565b945050505050610829565b6001600160a01b0385163180831115610a90578092505b82600003610ad4576040805160008082526020820190925290610ac9565b610ab6612228565b815260200190600190039081610aae5790505b509350505050610829565b610ade868461082f565b9350505050610829565b60608280600003610b0c57604051631a30ee4d60e11b815260040160405180910390fd5b83612710811115610b3057604051631f3b85d360e01b815260040160405180910390fd5b6000610b5c7f00000000000000000000000000000000000000000000000000000000000000008661206d565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc919061260c565b90506000612710610bdd898461263b565b610be79190612652565b9050610bf4898289610c01565b9998505050505050505050565b60608280600003610c2557604051631a30ee4d60e11b815260040160405180910390fd5b60408051600380825260808201909252600091816020015b610c45612228565b815260200190600190039081610c3d579050509050610c6385611ce4565b81600081518110610c7657610c7661256a565b6020026020010181905250610cab7f00000000000000000000000000000000000000000000000000000000000000008661186e565b81600181518110610cbe57610cbe61256a565b6020026020010181905250610cf5867f00000000000000000000000000000000000000000000000000000000000000008787611b98565b816002815181106104c3576104c361256a565b6060610d1383611d58565b600080610d2187878761211f565b915091508015610f59576000610d37878661206d565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da7919061260c565b6040516370a0823160e01b81526001600160a01b038b811660048301528a16906370a0823190602401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e11919061260c565b11610e85576040516370a0823160e01b81526001600160a01b038a811660048301528316906370a0823190602401602060405180830381865afa158015610e5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e80919061260c565b610eef565b6040516370a0823160e01b81526001600160a01b038a811660048301528916906370a0823190602401602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef919061260c565b905080841115610efd578093505b83600003610f42576040805160008082526020820190925290610f36565b610f23612228565b815260200190600190039081610f1b5790505b50945050505050610fad565b610f4e89898689610654565b945050505050610fad565b81600003610f9c576040805160008082526020820190925290610f92565b610f7f612228565b815260200190600190039081610f775790505b5092505050610fad565b610fa88787848761159d565b925050505b949350505050565b60608280600003610fd957604051631a30ee4d60e11b815260040160405180910390fd5b83612710811115610ffd57604051631f3b85d360e01b815260040160405180910390fd5b6000611009878661206d565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611055573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611079919061260c565b9050600061271061108a898461263b565b6110949190612652565b90506110a28a8a838a610654565b9a9950505050505050505050565b60606110bb82611d58565b6000806110c9868686611d84565b9150915080156111b5578160000361111657604080516000808252602082019092529061110c565b6110f9612228565b8152602001906001900390816110f15790505b5092505050611280565b600061112186611fd2565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa15801561116d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611191919061260c565b90508084111561119f578093505b6111aa8888866114a5565b945050505050611280565b6040516370a0823160e01b81526001600160a01b038781166004830152600091908716906370a0823190602401602060405180830381865afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611223919061260c565b905080831115611231578092505b8260000361127557604080516000808252602082019092529061126a565b611257612228565b81526020019060019003908161124f5790505b509350505050611280565b61076d878785610424565b9392505050565b606061129283611d58565b6000806112c0867f00000000000000000000000000000000000000000000000000000000000000008761211f565b91509150801561144f5760006112f67f00000000000000000000000000000000000000000000000000000000000000008661206d565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611342573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611366919061260c565b886001600160a01b031631116113e5576040516370a0823160e01b81526001600160a01b0389811660048301528316906370a0823190602401602060405180830381865afa1580156113bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e0919061260c565b6113f1565b876001600160a01b0316315b9050808411156113ff578093505b83600003611444576040805160008082526020820190925290611438565b611425612228565b81526020019060019003908161141d5790505b50945050505050611280565b6111aa888588610c01565b8160000361149157604080516000808252602082019092529061110c565b611475612228565b81526020019060019003908161146d5790505092505050611280565b61149c8683866104d7565b92505050611280565b606081806000036114c957604051631a30ee4d60e11b815260040160405180910390fd5b604080516001808252818301909252600091816020015b6114e8612228565b8152602001906001900390816114e0579050509050611508868686611af0565b816000815181106104c3576104c361256a565b6060828060000361153f57604051631a30ee4d60e11b815260040160405180910390fd5b8361271081111561156357604051631f3b85d360e01b815260040160405180910390fd5b6000611590877f0000000000000000000000000000000000000000000000000000000000000000886116a1565b905061076d8782876104d7565b606082806000036115c157604051631a30ee4d60e11b815260040160405180910390fd5b604080516001808252818301909252600091816020015b6115e0612228565b8152602001906001900390816115d8579050509050611601878787876119a5565b816000815181106106f4576106f461256a565b6060818060000361163857604051631a30ee4d60e11b815260040160405180910390fd5b8261271081111561165c57604051631f3b85d360e01b815260040160405180910390fd5b600061168b867f0000000000000000000000000000000000000000000000000000000000000000876001611c48565b9050611697868261082f565b9695505050505050565b604051632fe4a15f60e21b81526001600160a01b03848116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063bf92857c9060240160c060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190612674565b505060405163b3596f0760e01b81526001600160a01b038981166004830152929550600094507f0000000000000000000000000000000000000000000000000000000000000000909216925063b3596f07916024019050602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c8919061260c565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561180a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182e91906126be565b60ff16905060008261184183600a6127c8565b61184b908661263b565b6118559190612652565b9050612710611864878361263b565b6104189190612652565b611876612228565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044810183905260009060640160408051601f19818403018152918152602080830180516001600160e01b031663095ea7b360e01b17905281516060810183526001600160a01b03979097168752600090870152850152509192915050565b61190f612228565b50604080516001600160a01b03938416602482015260448101929092529282166064820152600060848083018290528451808403909101815260a49092018452602080830180516001600160e01b031663617ba03760e01b17905284516060810186527f000000000000000000000000000000000000000000000000000000000000000090941684528301529181019190915290565b6119ad612228565b6040516001600160a01b038086166024830152604482018590526064820184905260006084830181905290871660a48301529060c40160408051601f19818403018152918152602080830180516001600160e01b031663a415bcad60e01b17905281516060810183526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016815260009181019190915290810191909152915050949350505050565b611a65612228565b600082604051602401611a7a91815260200190565b60408051601f19818403018152918152602080830180516001600160e01b0316632e1a7d4d60e01b17905281516060810183526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152600091810191909152908101919091529392505050565b611af8612228565b6040516001600160a01b038085166024830152604482018490528516606482015260009060840160408051601f19818403018152918152602080830180516001600160e01b0316631a4ca37b60e21b17905281516060810183526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152600091810191909152908101919091529150509392505050565b611ba0612228565b6040516001600160a01b03808616602483015260448201859052606482018490528616608482015260009060a40160408051601f19818403018152918152602080830180516001600160e01b031663573ade8160e01b17905281516060810183526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016815260009181019190915290810191909152915050949350505050565b60008082611cbf576040516370a0823160e01b81526001600160a01b0387811660048301528616906370a0823190602401602060405180830381865afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba919061260c565b611ccb565b856001600160a01b0316315b9050612710611cda858361263b565b6116979190612652565b611cec612228565b506040805160048152602481018252602080820180516001600160e01b0316630d0e30db60e41b17905282516060810184526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152908101939093529082015290565b670de0b6b3a7640000811015611d815760405163b0a8c6c360e01b815260040160405180910390fd5b50565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bf92857c896040518263ffffffff1660e01b8152600401611de791906001600160a01b0391909116815260200190565b60c060405180830381865afa158015611e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e289190612674565b505093505092509250600081612710670de0b6b3a7640000858a611e4c919061263b565b611e569190612652565b611e60919061263b565b611e6a9190612652565b9050600084821015611e8b5760019550611e8482866127d4565b9050611e98565b611e9585836127d4565b90505b60405163b3596f0760e01b81526001600160a01b038a811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f27919061260c565b905060008a6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d91906126be565b60ff16905060008211611fa1576000611fc1565b81611fad82600a6127c8565b611fb7908561263b565b611fc19190612652565b985050505050505050935093915050565b6040516335ea6a7560e01b81526001600160a01b0382811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa15801561203e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612062919061287b565b610100015192915050565b6040516335ea6a7560e01b81526001600160a01b03838116600483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016101e060405180830381865afa1580156120d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fd919061287b565b9050826001036121135761012001519050610829565b61014001519050610829565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bf92857c896040518263ffffffff1660e01b815260040161218291906001600160a01b0391909116815260200190565b60c060405180830381865afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190612674565b50509350509250925060008661271083866121de919061263b565b6121e89190612652565b6121fa90670de0b6b3a764000061263b565b6122049190612652565b905060008382101561221e5760019550611e8482856127d4565b611e9584836127d4565b604051806060016040528060006001600160a01b0316815260200160008152602001606081525090565b6001600160a01b0381168114611d8157600080fd5b6000806000806080858703121561227d57600080fd5b843561228881612252565b9350602085013561229881612252565b93969395505050506040820135916060013590565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b8281101561236857868503603f19018452815180516001600160a01b0316865260208082015190870152604090810151606091870182905280519187018290529060005b8181101561233657602081840181015160808a8401015201612319565b506000608082890101526080601f19601f830116880101965050506020820191506020840193506001810190506122d5565b50929695505050505050565b60008060006060848603121561238957600080fd5b833561239481612252565b925060208401356123a481612252565b929592945050506040919091013590565b6000806000606084860312156123ca57600080fd5b83356123d581612252565b95602085013595506040909401359392505050565b600080604083850312156123fd57600080fd5b823561240881612252565b946020939093013593505050565b80356001600160e01b03198116811461242e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561246d5761246d612433565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561249c5761249c612433565b604052919050565b600080604083850312156124b757600080fd5b6124c083612416565b9150602083013567ffffffffffffffff8111156124dc57600080fd5b8301601f810185136124ed57600080fd5b803567ffffffffffffffff81111561250757612507612433565b61251a601f8201601f1916602001612473565b81815286602083850101111561252f57600080fd5b816020840160208301376000602083830101528093505050509250929050565b60006020828403121561256157600080fd5b61128082612416565b634e487b7160e01b600052603260045260246000fd5b60008060006060848603121561259557600080fd5b83516125a081612252565b60208501519093506125b181612252565b6040949094015192959394509192915050565b600080600080608085870312156125da57600080fd5b84516125e581612252565b60208601519094506125f681612252565b6040860151606090960151949790965092505050565b60006020828403121561261e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761082957610829612625565b60008261266f57634e487b7160e01b600052601260045260246000fd5b500490565b60008060008060008060c0878903121561268d57600080fd5b50508451602086015160408701516060880151608089015160a090990151939a929950909790965094509092509050565b6000602082840312156126d057600080fd5b815160ff8116811461128057600080fd5b6001815b600184111561271c5780850481111561270057612700612625565b600184161561270e57908102905b60019390931c9280026126e5565b935093915050565b60008261273357506001610829565b8161274057506000610829565b816001811461275657600281146127605761277c565b6001915050610829565b60ff84111561277157612771612625565b50506001821b610829565b5060208310610133831016604e8410600b841016171561279f575081810a610829565b6127ac60001984846126e1565b80600019048211156127c0576127c0612625565b029392505050565b60006112808383612724565b8181038181111561082957610829612625565b6000602082840312156127f957600080fd5b6040516020810167ffffffffffffffff8111828210171561281c5761281c612433565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461242e57600080fd5b805164ffffffffff8116811461242e57600080fd5b805161ffff8116811461242e57600080fd5b805161242e81612252565b60006101e082840312801561288f57600080fd5b50612898612449565b6128a284846127e7565b81526128b060208401612829565b60208201526128c160408401612829565b60408201526128d260608401612829565b60608201526128e360808401612829565b60808201526128f460a08401612829565b60a082015261290560c08401612849565b60c082015261291660e0840161285e565b60e08201526129286101008401612870565b61010082015261293b6101208401612870565b61012082015261294e6101408401612870565b6101408201526129616101608401612870565b6101608201526129746101808401612829565b6101808201526129876101a08401612829565b6101a082015261299a6101c08401612829565b6101c0820152939250505056fea2646970667358221220fcafbb19047b5555e93dc49a31e63f976b9e1b1c3f26665e2d3f38c5149edae164736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1465,
        "contract": "src/actions/aave-v3/AaveV3Actions.sol:AaveV3Actions",
        "label": "tokenGetterIDs",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_uint8)"
      }
    ],
    "types": {
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_bytes4,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}