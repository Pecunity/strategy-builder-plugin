{
  "address": "0xD0604F608B3e31F9Af446e9C98631f162000Bab7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BaseCondition__ConditionAlreadyExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseCondition__ConditionDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseCondition__ConditionIsInUse",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HealthFactorLowerThanMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidComparison",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "internalType": "enum IHealthFactorCondition.Comparison",
              "name": "comparison",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "updateable",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct IHealthFactorCondition.Condition",
          "name": "condition",
          "type": "tuple"
        }
      ],
      "name": "ConditionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "ConditionDeleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "action",
          "type": "uint32"
        }
      ],
      "name": "addAutomationToCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "internalType": "enum IHealthFactorCondition.Comparison",
              "name": "comparison",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "updateable",
              "type": "bool"
            }
          ],
          "internalType": "struct IHealthFactorCondition.Condition",
          "name": "condition",
          "type": "tuple"
        }
      ],
      "name": "addCondition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "strategy",
          "type": "uint32"
        }
      ],
      "name": "addStrategyToCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "action",
          "type": "uint32"
        }
      ],
      "name": "automationValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "automations",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "checkCondition",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        }
      ],
      "name": "conditionActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        }
      ],
      "name": "deleteCondition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "isUpdateable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "automation",
          "type": "uint32"
        }
      ],
      "name": "removeAutomationFromCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "strategy",
          "type": "uint32"
        }
      ],
      "name": "removeStrategyFromCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "id",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "strategy",
          "type": "uint32"
        }
      ],
      "name": "strategyValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        }
      ],
      "name": "updateCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_id",
          "type": "uint32"
        }
      ],
      "name": "walletCondition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "internalType": "enum IHealthFactorCondition.Comparison",
              "name": "comparison",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "updateable",
              "type": "bool"
            }
          ],
          "internalType": "struct IHealthFactorCondition.Condition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x19e3c22fbe71e28b6199ad8c5965c19d6d8d8085154f5c23e5871ce363f1ee24",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xd4Fa4ee93D7D27c1c4Be36bfBa67183dD4320123",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1028854",
    "logsBloom": "0x
    "blockHash": "0xd7cfd940a49cdfcfb71f2a4ae09f88fa9d700c3b43906a65807c7d202a2fbfa7",
    "transactionHash": "0x19e3c22fbe71e28b6199ad8c5965c19d6d8d8085154f5c23e5871ce363f1ee24",
    "logs": [],
    "blockNumber": 138420088,
    "cumulativeGasUsed": "1028854",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBfC91D59fdAA134A4ED45f7B584cAf96D7792Eff"
  ],
  "numDeployments": 5,
  "solcInputHash": "93c2a6bdf403373ec7fcd69771fe073c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseCondition__ConditionAlreadyExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseCondition__ConditionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseCondition__ConditionIsInUse\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HealthFactorLowerThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidComparison\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum IHealthFactorCondition.Comparison\",\"name\":\"comparison\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"updateable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IHealthFactorCondition.Condition\",\"name\":\"condition\",\"type\":\"tuple\"}],\"name\":\"ConditionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ConditionDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"action\",\"type\":\"uint32\"}],\"name\":\"addAutomationToCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum IHealthFactorCondition.Comparison\",\"name\":\"comparison\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"updateable\",\"type\":\"bool\"}],\"internalType\":\"struct IHealthFactorCondition.Condition\",\"name\":\"condition\",\"type\":\"tuple\"}],\"name\":\"addCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"strategy\",\"type\":\"uint32\"}],\"name\":\"addStrategyToCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"action\",\"type\":\"uint32\"}],\"name\":\"automationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"automations\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"checkCondition\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"conditionActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"deleteCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"isUpdateable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"automation\",\"type\":\"uint32\"}],\"name\":\"removeAutomationFromCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"strategy\",\"type\":\"uint32\"}],\"name\":\"removeStrategyFromCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"strategy\",\"type\":\"uint32\"}],\"name\":\"strategyValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"updateCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_id\",\"type\":\"uint32\"}],\"name\":\"walletCondition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"enum IHealthFactorCondition.Comparison\",\"name\":\"comparison\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"updateable\",\"type\":\"bool\"}],\"internalType\":\"struct IHealthFactorCondition.Condition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/condition/aave-v3/HealthFactorCondition.sol\":\"HealthFactorCondition\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aave/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\",\"keccak256\":\"0xbfd2077251c8dc766a56d45f4b03eb07f3441323e79c0f794efea3657a99747f\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x33d4308d9407b4ee2297fc4ba5acce1a96a6c658189e2778a4f6b90e032fb3b5\",\"license\":\"AGPL-3.0\"},\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0x771cb99fd8519c974f7e12130387c4d9a997a6e8d0ac10e4303b842fe53efa88\",\"license\":\"BUSL-1.1\"},\"src/condition/BaseCondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport {ICondition} from \\\"../interfaces/ICondition.sol\\\";\\n\\nerror BaseCondition__ConditionDoesNotExist();\\nerror BaseCondition__ConditionAlreadyExist();\\nerror BaseCondition__ConditionIsInUse();\\n\\nabstract contract BaseCondition is ICondition {\\n    // Storage for conditions, strategies, and automations\\n    mapping(address => mapping(uint32 => uint32[])) private conditionStrategies; // (wallet => (id => strategies))\\n    mapping(address => mapping(uint32 => uint32[])) private conditionAutomations; // (wallet => (id => automations))\\n    mapping(address => mapping(uint32 => uint32)) private strategyConditionIndex;\\n    mapping(address => mapping(uint32 => uint32)) private automationConditionIndex;\\n\\n    modifier conditionExist(uint32 id) {\\n        if (!_isConditionActive(msg.sender, id)) {\\n            revert BaseCondition__ConditionDoesNotExist();\\n        }\\n        _;\\n    }\\n\\n    modifier conditionDoesNotExist(uint32 id) {\\n        if (_isConditionActive(msg.sender, id)) {\\n            revert BaseCondition__ConditionAlreadyExist();\\n        }\\n        _;\\n    }\\n\\n    function checkCondition(address, uint32) public view virtual returns (uint8) {\\n        return 0;\\n    }\\n\\n    function isUpdateable(address, uint32) public view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function updateCondition(uint32) public virtual returns (bool) {\\n        // Default implementation for updateCondition (override in derived contracts)\\n        return false;\\n    }\\n\\n    function conditionActive(address _wallet, uint32 _id) external view returns (bool) {\\n        return _isConditionActive(_wallet, _id);\\n    }\\n\\n    function _isConditionActive(address, uint32) internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function deleteCondition(uint32 _id) public virtual {\\n        if (conditionAutomations[msg.sender][_id].length > 0 || conditionStrategies[msg.sender][_id].length > 0) {\\n            revert BaseCondition__ConditionIsInUse();\\n        }\\n    }\\n\\n    function automationValid(address wallet, uint32 id, uint32 action) public view returns (bool) {\\n        // Validate the action (placeholder implementation)\\n        return automationConditionIndex[wallet][action] == id;\\n    }\\n\\n    function strategyValid(address wallet, uint32 id, uint32 strategy) public view returns (bool) {\\n        // Validate the strategy (placeholder implementation)\\n        return strategyConditionIndex[wallet][strategy] == id;\\n    }\\n\\n    function addAutomationToCondition(uint32 id, uint32 action) public returns (bool) {\\n        conditionAutomations[msg.sender][id].push(action);\\n        automationConditionIndex[msg.sender][action] = uint32(conditionAutomations[msg.sender][id].length - 1);\\n        return true;\\n    }\\n\\n    function addStrategyToCondition(uint32 id, uint32 strategy) public returns (bool) {\\n        conditionStrategies[msg.sender][id].push(strategy);\\n        strategyConditionIndex[msg.sender][strategy] = uint32(conditionStrategies[msg.sender][id].length - 1);\\n        return true;\\n    }\\n\\n    function removeAutomationFromCondition(uint32 id, uint32 automation) public returns (bool) {\\n        uint32[] storage _automations = conditionAutomations[msg.sender][id];\\n\\n        uint32 _actualAutomationIndex = automationConditionIndex[msg.sender][automation];\\n\\n        if (_automations[_actualAutomationIndex] != automation) {\\n            return false;\\n        }\\n\\n        uint256 _lastAutomationIndex = _automations.length - 1;\\n\\n        if (_lastAutomationIndex != _actualAutomationIndex) {\\n            uint32 _lastAutomationId = _automations[_lastAutomationIndex];\\n            automationConditionIndex[msg.sender][_lastAutomationId] = _actualAutomationIndex;\\n            _automations[_actualAutomationIndex] = _lastAutomationId;\\n        }\\n\\n        _automations.pop();\\n\\n        return true;\\n    }\\n\\n    function removeStrategyFromCondition(uint32 id, uint32 strategy) public returns (bool) {\\n        uint32[] storage _strategies = conditionStrategies[msg.sender][id];\\n\\n        uint32 _actualStrategyIndex = strategyConditionIndex[msg.sender][strategy];\\n\\n        if (_strategies[_actualStrategyIndex] != strategy) {\\n            return false;\\n        }\\n\\n        uint256 _lastStrategyIndex = _strategies.length - 1;\\n\\n        if (_lastStrategyIndex != _actualStrategyIndex) {\\n            uint32 _lastStrategyId = _strategies[_lastStrategyIndex];\\n            strategyConditionIndex[msg.sender][_lastStrategyId] = _actualStrategyIndex;\\n            _strategies[_actualStrategyIndex] = _lastStrategyId;\\n        }\\n\\n        _strategies.pop();\\n\\n        return true;\\n    }\\n\\n    function strategies(address wallet, uint32 id) external view returns (uint32[] memory) {\\n        return conditionStrategies[wallet][id];\\n    }\\n\\n    function automations(address wallet, uint32 id) external view returns (uint32[] memory) {\\n        return conditionAutomations[wallet][id];\\n    }\\n}\\n\",\"keccak256\":\"0x6f18b756e979d492081be06febae3fbcb4570fe2cc60ac560d87834a93fd7174\",\"license\":\"MIT\"},\"src/condition/aave-v3/HealthFactorCondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\nimport {BaseCondition} from \\\"../BaseCondition.sol\\\";\\nimport {IHealthFactorCondition} from \\\"./interfaces/IHealthFactorCondition.sol\\\";\\nimport {IPool} from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\n\\ncontract HealthFactorCondition is BaseCondition, IHealthFactorCondition {\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503        State Variables           \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n    address public immutable pool;\\n    mapping(address wallet => mapping(uint32 id => Condition condition)) private conditions;\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503           Modifiers              \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    modifier validCondition(Condition calldata _condition) {\\n        if (_condition.healthFactor < 1e18) {\\n            revert HealthFactorLowerThanMinimum();\\n        }\\n        if (_condition.comparison > Comparison.NOT_EQUAL) {\\n            revert InvalidComparison();\\n        }\\n        _;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Constructor         \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n    constructor(address _pool) {\\n        pool = _pool;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Public Functions           \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function addCondition(uint32 _id, Condition calldata condition)\\n        external\\n        conditionDoesNotExist(_id)\\n        validCondition(condition)\\n    {\\n        conditions[msg.sender][_id] = condition;\\n        emit ConditionAdded(_id, msg.sender, condition);\\n    }\\n\\n    function deleteCondition(uint32 _id) public override conditionExist(_id) {\\n        super.deleteCondition(_id);\\n        delete conditions[msg.sender][_id];\\n\\n        emit ConditionDeleted(_id, msg.sender);\\n    }\\n\\n    function updateCondition(uint32 _id) public view override conditionExist(_id) returns (bool) {\\n        return true;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503       Internal Functions         \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function _isConditionActive(address _wallet, uint32 _id) internal view override returns (bool) {\\n        return conditions[_wallet][_id].healthFactor != 0;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503         View Functions           \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    function checkCondition(address wallet, uint32 id) public view override returns (uint8) {\\n        Condition memory condition = conditions[wallet][id];\\n\\n        //Get the actual health factor of the wallet\\n        (,,,,, uint256 currentHF) = IPool(pool).getUserAccountData(wallet);\\n\\n        if (condition.comparison == Comparison.GREATER ||condition.comparison == Comparison.GREATER_OR_EQUAL ) {\\n            if (currentHF > condition.healthFactor) {\\n                return 1;\\n            }\\n        }\\n\\n        if (condition.comparison == Comparison.LESS ||condition.comparison == Comparison.LESS_OR_EQUAL) {\\n            if (currentHF < condition.healthFactor) {\\n                return 1;\\n            }\\n        }\\n\\n        if (\\n            condition.comparison == Comparison.EQUAL || condition.comparison == Comparison.GREATER_OR_EQUAL\\n                || condition.comparison == Comparison.LESS_OR_EQUAL\\n        ) {\\n            if (currentHF == condition.healthFactor) {\\n                return 1;\\n            } \\n        } \\n        \\n        if(condition.comparison == Comparison.NOT_EQUAL){\\n            if(currentHF != condition.healthFactor){\\n                return 1;\\n            }\\n        }else {\\n            return 0;\\n        }\\n    }\\n\\n    function isUpdateable(address wallet, uint32 id) public view override returns (bool) {\\n        return conditions[wallet][id].updateable;\\n    }\\n\\n    function walletCondition(address _wallet, uint32 _id) public view returns (Condition memory) {\\n        return conditions[_wallet][_id];\\n    }\\n}\\n\",\"keccak256\":\"0xd128f9008d17708122467aaa7d1e0d994884955f8b53388eb65ec1e48a23be92\",\"license\":\"MIT\"},\"src/condition/aave-v3/interfaces/IHealthFactorCondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\ninterface IHealthFactorCondition {\\n    enum Comparison {\\n        LESS,\\n        GREATER,\\n        EQUAL,\\n        GREATER_OR_EQUAL,\\n        LESS_OR_EQUAL,\\n        NOT_EQUAL\\n    }\\n\\n    struct Condition {\\n        uint256 healthFactor;\\n        Comparison comparison;\\n        bool updateable;\\n    }\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503            Errors                \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n    error HealthFactorLowerThanMinimum();\\n    error InvalidComparison();\\n\\n    // \\u250f\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2513\\n    // \\u2503            Events                \\u2503\\n    // \\u2517\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u251b\\n\\n    event ConditionAdded(uint32 id, address wallet, Condition condition);\\n    event ConditionDeleted(uint32 id, address wallet);\\n}\\n\",\"keccak256\":\"0xd38c53386122ed364348508a2f99b2127997ec5cc10b43d833eef8ce74e3812a\",\"license\":\"MIT\"},\"src/interfaces/ICondition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.26;\\n\\ninterface ICondition {\\n    function checkCondition(address wallet, uint32 id) external view returns (uint8);\\n\\n    function isUpdateable(address wallet, uint32 id) external view returns (bool);\\n\\n    function automationValid(address wallet, uint32 id, uint32 action) external view returns (bool);\\n\\n    function strategyValid(address wallet, uint32 id, uint32 strategy) external view returns (bool);\\n\\n    function updateCondition(uint32 id) external returns (bool);\\n\\n    function deleteCondition(uint32 id) external;\\n\\n    function addAutomationToCondition(uint32 id, uint32 action) external returns (bool);\\n\\n    function addStrategyToCondition(uint32 id, uint32 action) external returns (bool);\\n\\n    function removeAutomationFromCondition(uint32 id, uint32 automation) external returns (bool);\\n\\n    function removeStrategyFromCondition(uint32 id, uint32 strategy) external returns (bool);\\n\\n    function conditionActive(address wallet, uint32 id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe526cb17ab190d77eb0918da5356f2fe96374389b1ed86d317ffa0515d572364\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052348015600f57600080fd5b5060405161121e38038061121e833981016040819052602c91603c565b6001600160a01b0316608052606a565b600060208284031215604d57600080fd5b81516001600160a01b0381168114606357600080fd5b9392505050565b60805161119261008c6000396000818161016d015261093c01526111926000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636f2b9aff11610097578063cff8364011610066578063cff83640146102be578063e5012fb4146102d1578063eec93dd0146102e4578063fff5cf19146102f757600080fd5b80636f2b9aff1461025357806372201cf11461027357806389a78a03146102865780638a4914c2146102ab57600080fd5b806316f0115b116100d357806316f0115b14610168578063384c879d146101a757806357182cae146101c7578063687c0e311461021057600080fd5b8063023ef5a91461010557806303d049bb1461012d5780631245f2981461014057806314b0af7014610155575b600080fd5b610118610113366004610e18565b61033a565b60405190151581526020015b60405180910390f35b61011861013b366004610e4b565b6103de565b61015361014e366004610e4b565b610411565b005b610118610163366004610e18565b6104b0565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b6101ba6101b5366004610e7d565b61064e565b6040516101249190610e99565b6101186101d5366004610e7d565b6001600160a01b0391909116600090815260046020908152604080832063ffffffff9490941683529290522060010154610100900460ff1690565b61011861021e366004610ee2565b6001600160a01b0392909216600090815260036020908152604080832063ffffffff9586168452909152902054821691161490565b610266610261366004610e7d565b6106f5565b6040516101249190610f5d565b610153610281366004610f89565b610793565b610299610294366004610e7d565b610899565b60405160ff9091168152602001610124565b6101186102b9366004610e18565b610b12565b6101186102cc366004610e7d565b610c32565b6101186102df366004610e18565b610c45565b6101ba6102f2366004610e7d565b610ce4565b610118610305366004610ee2565b6001600160a01b0392909216600090815260026020908152604080832063ffffffff9586168452909152902054821691161490565b33600090815260016020818152604080842063ffffffff878116808752918452918520805480860182558187529386206008850401805460079095166004026101000a808502199095169388169490940292909217909255908352546103a09190610fc8565b33600090815260036020908152604080832063ffffffff87811685529252909120805463ffffffff1916929091169190911790555060015b92915050565b6000816103eb3382610d61565b61040857604051630453eefd60e11b815260040160405180910390fd5b50600192915050565b8061041c3382610d61565b61043957604051630453eefd60e11b815260040160405180910390fd5b61044282610d93565b33600081815260046020908152604080832063ffffffff87168085529083528184209384556001909301805461ffff191690558051928352908201929092527f9c33cb453d76063bb338c509094bd32900fe4a7e3ccbb52ef947618994a4a6c3910160405180910390a15050565b3360008181526020818152604080832063ffffffff80881685529083528184209484526002835281842086821680865293529083205484549394939116919083908390811061050157610501610fe9565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1614610535576000925050506103d8565b815460009061054690600190610fc8565b90508163ffffffff16811461060357600083828154811061056957610569610fe9565b6000918252602080832060088304015433845260028252604080852060079094166004026101000a90910463ffffffff90811680865293909252909220805463ffffffff1916928616928317905585549092508291869181106105ce576105ce610fe9565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505b8280548061061357610613610fff565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a021916905590555060019250505092915050565b6001600160a01b038216600090815260016020908152604080832063ffffffff851684528252918290208054835181840281018401909452808452606093928301828280156106e857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116106ab5790505b5050505050905092915050565b6040805160608082018352600080835260208084018290528385018290526001600160a01b03871682526004815284822063ffffffff871683528152908490208451928301909452835482526001840154929391929083019060ff16600581111561076257610762610f25565b600581111561077357610773610f25565b815260019190910154610100900460ff1615156020909101529392505050565b8161079e3382610d61565b156107bc5760405163217deb7360e21b815260040160405180910390fd5b81670de0b6b3a7640000813510156107e757604051637bf5cacd60e01b815260040160405180910390fd5b60056107f96040830160208401611022565b600581111561080a5761080a610f25565b11156108295760405163d9e2f2ed60e01b815260040160405180910390fd5b33600090815260046020908152604080832063ffffffff8816845290915290208390610855828261104d565b9050507fcc85ae252c6a8596cda840060618021921a57bbdcfc4cb48c0f8ffbf40c3bfd984338560405161088b939291906110b1565b60405180910390a150505050565b6001600160a01b038216600090815260046020908152604080832063ffffffff851684528252808320815160608101909252805482526001810154849383019060ff1660058111156108ed576108ed610f25565b60058111156108fe576108fe610f25565b815260019190910154610100900460ff161515602090910152604051632fe4a15f60e21b81526001600160a01b0386811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063bf92857c9060240160c060405180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a79190611112565b9550600194506109b79350505050565b826020015160058111156109cd576109cd610f25565b14806109ee57506003826020015160058111156109ec576109ec610f25565b145b15610a07578151811115610a07576001925050506103d8565b600082602001516005811115610a1f57610a1f610f25565b1480610a405750600482602001516005811115610a3e57610a3e610f25565b145b15610a59578151811015610a59576001925050506103d8565b600282602001516005811115610a7157610a71610f25565b1480610a925750600382602001516005811115610a9057610a90610f25565b145b80610ab25750600482602001516005811115610ab057610ab0610f25565b145b15610aca5781518103610aca576001925050506103d8565b600582602001516005811115610ae257610ae2610f25565b03610aff5781518114610afa576001925050506103d8565b610b0a565b6000925050506103d8565b505092915050565b33600081815260016020908152604080832063ffffffff808816855290835281842094845260038352818420868216808652935290832054845493949391169190839083908110610b6557610b65610fe9565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1614610b99576000925050506103d8565b8154600090610baa90600190610fc8565b90508163ffffffff168114610603576000838281548110610bcd57610bcd610fe9565b6000918252602080832060088304015433845260038252604080852060079094166004026101000a90910463ffffffff90811680865293909252909220805463ffffffff1916928616928317905585549092508291869181106105ce576105ce610fe9565b6000610c3e8383610d61565b9392505050565b3360009081526020818152604080832063ffffffff8681168086529184529184208054600180820183558287529486206008820401805460079092166004026101000a808602199092169488169190910293909317909255835254610caa9190610fc8565b33600090815260026020908152604080832063ffffffff96871684529091529020805463ffffffff19169190931617909155506001919050565b6001600160a01b03821660009081526020818152604080832063ffffffff851684528252918290208054835181840281018401909452808452606093928301828280156106e8576000918252602091829020805463ffffffff1684529082028301929091600491018084116106ab57509498975050505050505050565b6001600160a01b038216600090815260046020908152604080832063ffffffff85168452909152902054151592915050565b33600090815260016020908152604080832063ffffffff85168452909152902054151580610dde57503360009081526020818152604080832063ffffffff8516845290915290205415155b15610dfc5760405163846e233f60e01b815260040160405180910390fd5b50565b803563ffffffff81168114610e1357600080fd5b919050565b60008060408385031215610e2b57600080fd5b610e3483610dff565b9150610e4260208401610dff565b90509250929050565b600060208284031215610e5d57600080fd5b610c3e82610dff565b80356001600160a01b0381168114610e1357600080fd5b60008060408385031215610e9057600080fd5b610e3483610e66565b602080825282518282018190526000918401906040840190835b81811015610ed757835163ffffffff16835260209384019390920191600101610eb3565b509095945050505050565b600080600060608486031215610ef757600080fd5b610f0084610e66565b9250610f0e60208501610dff565b9150610f1c60408501610dff565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60068110610f5957634e487b7160e01b600052602160045260246000fd5b9052565b815181526020808301516060830191610f7890840182610f3b565b506040928301511515919092015290565b6000808284036080811215610f9d57600080fd5b610fa684610dff565b92506060601f1982011215610fba57600080fd5b506020830190509250929050565b818103818111156103d857634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60068110610dfc57600080fd5b60006020828403121561103457600080fd5b8135610c3e81611015565b8015158114610dfc57600080fd5b8135815560018101602083013561106381611015565b6006811061108157634e487b7160e01b600052602160045260246000fd5b815460408501356110918161103f565b61ff0081151560081b1660ff841661ffff19841617178455505050505050565b63ffffffff841681526001600160a01b0383166020808301919091528235604083015260a08201908301356110e581611015565b6110f26060840182610f3b565b5060408301356111018161103f565b801515608084015250949350505050565b60008060008060008060c0878903121561112b57600080fd5b50508451602086015160408701516060880151608089015160a090990151939a92995090979096509450909250905056fea2646970667358221220c7eb42670b64e551a3bf9927250d81ae3788c15c3c84cd6712d92f1f7e0a8cdb64736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80636f2b9aff11610097578063cff8364011610066578063cff83640146102be578063e5012fb4146102d1578063eec93dd0146102e4578063fff5cf19146102f757600080fd5b80636f2b9aff1461025357806372201cf11461027357806389a78a03146102865780638a4914c2146102ab57600080fd5b806316f0115b116100d357806316f0115b14610168578063384c879d146101a757806357182cae146101c7578063687c0e311461021057600080fd5b8063023ef5a91461010557806303d049bb1461012d5780631245f2981461014057806314b0af7014610155575b600080fd5b610118610113366004610e18565b61033a565b60405190151581526020015b60405180910390f35b61011861013b366004610e4b565b6103de565b61015361014e366004610e4b565b610411565b005b610118610163366004610e18565b6104b0565b61018f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b6101ba6101b5366004610e7d565b61064e565b6040516101249190610e99565b6101186101d5366004610e7d565b6001600160a01b0391909116600090815260046020908152604080832063ffffffff9490941683529290522060010154610100900460ff1690565b61011861021e366004610ee2565b6001600160a01b0392909216600090815260036020908152604080832063ffffffff9586168452909152902054821691161490565b610266610261366004610e7d565b6106f5565b6040516101249190610f5d565b610153610281366004610f89565b610793565b610299610294366004610e7d565b610899565b60405160ff9091168152602001610124565b6101186102b9366004610e18565b610b12565b6101186102cc366004610e7d565b610c32565b6101186102df366004610e18565b610c45565b6101ba6102f2366004610e7d565b610ce4565b610118610305366004610ee2565b6001600160a01b0392909216600090815260026020908152604080832063ffffffff9586168452909152902054821691161490565b33600090815260016020818152604080842063ffffffff878116808752918452918520805480860182558187529386206008850401805460079095166004026101000a808502199095169388169490940292909217909255908352546103a09190610fc8565b33600090815260036020908152604080832063ffffffff87811685529252909120805463ffffffff1916929091169190911790555060015b92915050565b6000816103eb3382610d61565b61040857604051630453eefd60e11b815260040160405180910390fd5b50600192915050565b8061041c3382610d61565b61043957604051630453eefd60e11b815260040160405180910390fd5b61044282610d93565b33600081815260046020908152604080832063ffffffff87168085529083528184209384556001909301805461ffff191690558051928352908201929092527f9c33cb453d76063bb338c509094bd32900fe4a7e3ccbb52ef947618994a4a6c3910160405180910390a15050565b3360008181526020818152604080832063ffffffff80881685529083528184209484526002835281842086821680865293529083205484549394939116919083908390811061050157610501610fe9565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1614610535576000925050506103d8565b815460009061054690600190610fc8565b90508163ffffffff16811461060357600083828154811061056957610569610fe9565b6000918252602080832060088304015433845260028252604080852060079094166004026101000a90910463ffffffff90811680865293909252909220805463ffffffff1916928616928317905585549092508291869181106105ce576105ce610fe9565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505b8280548061061357610613610fff565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a021916905590555060019250505092915050565b6001600160a01b038216600090815260016020908152604080832063ffffffff851684528252918290208054835181840281018401909452808452606093928301828280156106e857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116106ab5790505b5050505050905092915050565b6040805160608082018352600080835260208084018290528385018290526001600160a01b03871682526004815284822063ffffffff871683528152908490208451928301909452835482526001840154929391929083019060ff16600581111561076257610762610f25565b600581111561077357610773610f25565b815260019190910154610100900460ff1615156020909101529392505050565b8161079e3382610d61565b156107bc5760405163217deb7360e21b815260040160405180910390fd5b81670de0b6b3a7640000813510156107e757604051637bf5cacd60e01b815260040160405180910390fd5b60056107f96040830160208401611022565b600581111561080a5761080a610f25565b11156108295760405163d9e2f2ed60e01b815260040160405180910390fd5b33600090815260046020908152604080832063ffffffff8816845290915290208390610855828261104d565b9050507fcc85ae252c6a8596cda840060618021921a57bbdcfc4cb48c0f8ffbf40c3bfd984338560405161088b939291906110b1565b60405180910390a150505050565b6001600160a01b038216600090815260046020908152604080832063ffffffff851684528252808320815160608101909252805482526001810154849383019060ff1660058111156108ed576108ed610f25565b60058111156108fe576108fe610f25565b815260019190910154610100900460ff161515602090910152604051632fe4a15f60e21b81526001600160a01b0386811660048301529192506000917f0000000000000000000000000000000000000000000000000000000000000000169063bf92857c9060240160c060405180830381865afa158015610983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a79190611112565b9550600194506109b79350505050565b826020015160058111156109cd576109cd610f25565b14806109ee57506003826020015160058111156109ec576109ec610f25565b145b15610a07578151811115610a07576001925050506103d8565b600082602001516005811115610a1f57610a1f610f25565b1480610a405750600482602001516005811115610a3e57610a3e610f25565b145b15610a59578151811015610a59576001925050506103d8565b600282602001516005811115610a7157610a71610f25565b1480610a925750600382602001516005811115610a9057610a90610f25565b145b80610ab25750600482602001516005811115610ab057610ab0610f25565b145b15610aca5781518103610aca576001925050506103d8565b600582602001516005811115610ae257610ae2610f25565b03610aff5781518114610afa576001925050506103d8565b610b0a565b6000925050506103d8565b505092915050565b33600081815260016020908152604080832063ffffffff808816855290835281842094845260038352818420868216808652935290832054845493949391169190839083908110610b6557610b65610fe9565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1614610b99576000925050506103d8565b8154600090610baa90600190610fc8565b90508163ffffffff168114610603576000838281548110610bcd57610bcd610fe9565b6000918252602080832060088304015433845260038252604080852060079094166004026101000a90910463ffffffff90811680865293909252909220805463ffffffff1916928616928317905585549092508291869181106105ce576105ce610fe9565b6000610c3e8383610d61565b9392505050565b3360009081526020818152604080832063ffffffff8681168086529184529184208054600180820183558287529486206008820401805460079092166004026101000a808602199092169488169190910293909317909255835254610caa9190610fc8565b33600090815260026020908152604080832063ffffffff96871684529091529020805463ffffffff19169190931617909155506001919050565b6001600160a01b03821660009081526020818152604080832063ffffffff851684528252918290208054835181840281018401909452808452606093928301828280156106e8576000918252602091829020805463ffffffff1684529082028301929091600491018084116106ab57509498975050505050505050565b6001600160a01b038216600090815260046020908152604080832063ffffffff85168452909152902054151592915050565b33600090815260016020908152604080832063ffffffff85168452909152902054151580610dde57503360009081526020818152604080832063ffffffff8516845290915290205415155b15610dfc5760405163846e233f60e01b815260040160405180910390fd5b50565b803563ffffffff81168114610e1357600080fd5b919050565b60008060408385031215610e2b57600080fd5b610e3483610dff565b9150610e4260208401610dff565b90509250929050565b600060208284031215610e5d57600080fd5b610c3e82610dff565b80356001600160a01b0381168114610e1357600080fd5b60008060408385031215610e9057600080fd5b610e3483610e66565b602080825282518282018190526000918401906040840190835b81811015610ed757835163ffffffff16835260209384019390920191600101610eb3565b509095945050505050565b600080600060608486031215610ef757600080fd5b610f0084610e66565b9250610f0e60208501610dff565b9150610f1c60408501610dff565b90509250925092565b634e487b7160e01b600052602160045260246000fd5b60068110610f5957634e487b7160e01b600052602160045260246000fd5b9052565b815181526020808301516060830191610f7890840182610f3b565b506040928301511515919092015290565b6000808284036080811215610f9d57600080fd5b610fa684610dff565b92506060601f1982011215610fba57600080fd5b506020830190509250929050565b818103818111156103d857634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60068110610dfc57600080fd5b60006020828403121561103457600080fd5b8135610c3e81611015565b8015158114610dfc57600080fd5b8135815560018101602083013561106381611015565b6006811061108157634e487b7160e01b600052602160045260246000fd5b815460408501356110918161103f565b61ff0081151560081b1660ff841661ffff19841617178455505050505050565b63ffffffff841681526001600160a01b0383166020808301919091528235604083015260a08201908301356110e581611015565b6110f26060840182610f3b565b5060408301356111018161103f565b801515608084015250949350505050565b60008060008060008060c0878903121561112b57600080fd5b50508451602086015160408701516060880151608089015160a090990151939a92995090979096509450909250905056fea2646970667358221220c7eb42670b64e551a3bf9927250d81ae3788c15c3c84cd6712d92f1f7e0a8cdb64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5663,
        "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
        "label": "conditionStrategies",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_array(t_uint32)dyn_storage))"
      },
      {
        "astId": 5670,
        "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
        "label": "conditionAutomations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_array(t_uint32)dyn_storage))"
      },
      {
        "astId": 5676,
        "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
        "label": "strategyConditionIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint32))"
      },
      {
        "astId": 5682,
        "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
        "label": "automationConditionIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint32))"
      },
      {
        "astId": 6146,
        "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
        "label": "conditions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Condition)6446_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Comparison)6438": {
        "encoding": "inplace",
        "label": "enum IHealthFactorCondition.Comparison",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_array(t_uint32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_array(t_uint32)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Condition)6446_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct IHealthFactorCondition.Condition))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Condition)6446_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint32)"
      },
      "t_mapping(t_uint32,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_uint32,t_struct(Condition)6446_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct IHealthFactorCondition.Condition)",
        "numberOfBytes": "32",
        "value": "t_struct(Condition)6446_storage"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(Condition)6446_storage": {
        "encoding": "inplace",
        "label": "struct IHealthFactorCondition.Condition",
        "members": [
          {
            "astId": 6440,
            "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
            "label": "healthFactor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6443,
            "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
            "label": "comparison",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Comparison)6438"
          },
          {
            "astId": 6445,
            "contract": "src/condition/aave-v3/HealthFactorCondition.sol:HealthFactorCondition",
            "label": "updateable",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}