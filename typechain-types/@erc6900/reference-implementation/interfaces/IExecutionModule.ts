/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ManifestExecutionFunctionStruct = {
  executionSelector: BytesLike;
  skipRuntimeValidation: boolean;
  allowGlobalValidation: boolean;
};

export type ManifestExecutionFunctionStructOutput = [
  executionSelector: string,
  skipRuntimeValidation: boolean,
  allowGlobalValidation: boolean
] & {
  executionSelector: string;
  skipRuntimeValidation: boolean;
  allowGlobalValidation: boolean;
};

export type ManifestExecutionHookStruct = {
  executionSelector: BytesLike;
  entityId: BigNumberish;
  isPreHook: boolean;
  isPostHook: boolean;
};

export type ManifestExecutionHookStructOutput = [
  executionSelector: string,
  entityId: bigint,
  isPreHook: boolean,
  isPostHook: boolean
] & {
  executionSelector: string;
  entityId: bigint;
  isPreHook: boolean;
  isPostHook: boolean;
};

export type ExecutionManifestStruct = {
  executionFunctions: ManifestExecutionFunctionStruct[];
  executionHooks: ManifestExecutionHookStruct[];
  interfaceIds: BytesLike[];
};

export type ExecutionManifestStructOutput = [
  executionFunctions: ManifestExecutionFunctionStructOutput[],
  executionHooks: ManifestExecutionHookStructOutput[],
  interfaceIds: string[]
] & {
  executionFunctions: ManifestExecutionFunctionStructOutput[];
  executionHooks: ManifestExecutionHookStructOutput[];
  interfaceIds: string[];
};

export interface IExecutionModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executionManifest"
      | "moduleId"
      | "onInstall"
      | "onUninstall"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executionManifest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "executionManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export interface IExecutionModule extends BaseContract {
  connect(runner?: ContractRunner | null): IExecutionModule;
  waitForDeployment(): Promise<this>;

  interface: IExecutionModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executionManifest: TypedContractMethod<
    [],
    [ExecutionManifestStructOutput],
    "view"
  >;

  moduleId: TypedContractMethod<[], [string], "view">;

  onInstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  onUninstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executionManifest"
  ): TypedContractMethod<[], [ExecutionManifestStructOutput], "view">;
  getFunction(
    nameOrSignature: "moduleId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  filters: {};
}
