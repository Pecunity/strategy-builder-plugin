/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type ManifestExternalCallPermissionStruct = {
  externalAddress: AddressLike;
  permitAnySelector: boolean;
  selectors: BytesLike[];
};

export type ManifestExternalCallPermissionStructOutput = [
  externalAddress: string,
  permitAnySelector: boolean,
  selectors: string[]
] & {
  externalAddress: string;
  permitAnySelector: boolean;
  selectors: string[];
};

export type ManifestFunctionStruct = {
  functionType: BigNumberish;
  functionId: BigNumberish;
  dependencyIndex: BigNumberish;
};

export type ManifestFunctionStructOutput = [
  functionType: bigint,
  functionId: bigint,
  dependencyIndex: bigint
] & { functionType: bigint; functionId: bigint; dependencyIndex: bigint };

export type ManifestAssociatedFunctionStruct = {
  executionSelector: BytesLike;
  associatedFunction: ManifestFunctionStruct;
};

export type ManifestAssociatedFunctionStructOutput = [
  executionSelector: string,
  associatedFunction: ManifestFunctionStructOutput
] & {
  executionSelector: string;
  associatedFunction: ManifestFunctionStructOutput;
};

export type ManifestExecutionHookStruct = {
  executionSelector: BytesLike;
  preExecHook: ManifestFunctionStruct;
  postExecHook: ManifestFunctionStruct;
};

export type ManifestExecutionHookStructOutput = [
  executionSelector: string,
  preExecHook: ManifestFunctionStructOutput,
  postExecHook: ManifestFunctionStructOutput
] & {
  executionSelector: string;
  preExecHook: ManifestFunctionStructOutput;
  postExecHook: ManifestFunctionStructOutput;
};

export type PluginManifestStruct = {
  interfaceIds: BytesLike[];
  dependencyInterfaceIds: BytesLike[];
  executionFunctions: BytesLike[];
  permittedExecutionSelectors: BytesLike[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStruct[];
  userOpValidationFunctions: ManifestAssociatedFunctionStruct[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStruct[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStruct[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStruct[];
  executionHooks: ManifestExecutionHookStruct[];
};

export type PluginManifestStructOutput = [
  interfaceIds: string[],
  dependencyInterfaceIds: string[],
  executionFunctions: string[],
  permittedExecutionSelectors: string[],
  permitAnyExternalAddress: boolean,
  canSpendNativeToken: boolean,
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[],
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[],
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[],
  executionHooks: ManifestExecutionHookStructOutput[]
] & {
  interfaceIds: string[];
  dependencyInterfaceIds: string[];
  executionFunctions: string[];
  permittedExecutionSelectors: string[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[];
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[];
  executionHooks: ManifestExecutionHookStructOutput[];
};

export type SelectorPermissionStruct = {
  functionSelector: BytesLike;
  permissionDescription: string;
};

export type SelectorPermissionStructOutput = [
  functionSelector: string,
  permissionDescription: string
] & { functionSelector: string; permissionDescription: string };

export type PluginMetadataStruct = {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStruct[];
};

export type PluginMetadataStructOutput = [
  name: string,
  version: string,
  author: string,
  permissionDescriptors: SelectorPermissionStructOutput[]
] & {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStructOutput[];
};

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface BasePluginInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "onInstall"
      | "onUninstall"
      | "pluginManifest"
      | "pluginMetadata"
      | "postExecutionHook"
      | "preExecutionHook"
      | "preRuntimeValidationHook"
      | "preUserOpValidationHook"
      | "runtimeValidationFunction"
      | "supportsInterface"
      | "userOpValidationFunction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginManifest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pluginMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postExecutionHook",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preExecutionHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRuntimeValidationHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preUserOpValidationHook",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runtimeValidationFunction",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOpValidationFunction",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRuntimeValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preUserOpValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runtimeValidationFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOpValidationFunction",
    data: BytesLike
  ): Result;
}

export interface BasePlugin extends BaseContract {
  connect(runner?: ContractRunner | null): BasePlugin;
  waitForDeployment(): Promise<this>;

  interface: BasePluginInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  onInstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  onUninstall: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  pluginManifest: TypedContractMethod<[], [PluginManifestStructOutput], "view">;

  pluginMetadata: TypedContractMethod<[], [PluginMetadataStructOutput], "view">;

  postExecutionHook: TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;

  preExecutionHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  preRuntimeValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  preUserOpValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  runtimeValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  userOpValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pluginManifest"
  ): TypedContractMethod<[], [PluginManifestStructOutput], "view">;
  getFunction(
    nameOrSignature: "pluginMetadata"
  ): TypedContractMethod<[], [PluginMetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "postExecutionHook"
  ): TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preExecutionHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preRuntimeValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preUserOpValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "runtimeValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userOpValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
