/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IPyth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPyth__factory>;
    getContractFactory(
      name: "IPythEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPythEvents__factory>;
    getContractFactory(
      name: "BaseCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseCondition__factory>;
    getContractFactory(
      name: "CoinOrERC20BalanceCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoinOrERC20BalanceCondition__factory>;
    getContractFactory(
      name: "ICoinOrERC20BalanceCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoinOrERC20BalanceCondition__factory>;
    getContractFactory(
      name: "ITimeCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimeCondition__factory>;
    getContractFactory(
      name: "TimeCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeCondition__factory>;
    getContractFactory(
      name: "FeeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeController__factory>;
    getContractFactory(
      name: "FeeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeHandler__factory>;
    getContractFactory(
      name: "IAction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAction__factory>;
    getContractFactory(
      name: "ICondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICondition__factory>;
    getContractFactory(
      name: "IFeeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeController__factory>;
    getContractFactory(
      name: "IFeeHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeHandler__factory>;
    getContractFactory(
      name: "IFeeReduction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeReduction__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IStrategyBuilderPlugin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategyBuilderPlugin__factory>;
    getContractFactory(
      name: "ITokenGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenGetter__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "StrategyBuilderPlugin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyBuilderPlugin__factory>;
    getContractFactory(
      name: "MockCondition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCondition__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IPlugin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPlugin__factory>;
    getContractFactory(
      name: "IPluginExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPluginExecutor__factory>;
    getContractFactory(
      name: "BasePlugin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePlugin__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IPyth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPyth>;
    getContractAt(
      name: "IPythEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPythEvents>;
    getContractAt(
      name: "BaseCondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseCondition>;
    getContractAt(
      name: "CoinOrERC20BalanceCondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CoinOrERC20BalanceCondition>;
    getContractAt(
      name: "ICoinOrERC20BalanceCondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoinOrERC20BalanceCondition>;
    getContractAt(
      name: "ITimeCondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimeCondition>;
    getContractAt(
      name: "TimeCondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeCondition>;
    getContractAt(
      name: "FeeController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeController>;
    getContractAt(
      name: "FeeHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeHandler>;
    getContractAt(
      name: "IAction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAction>;
    getContractAt(
      name: "ICondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICondition>;
    getContractAt(
      name: "IFeeController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeController>;
    getContractAt(
      name: "IFeeHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeHandler>;
    getContractAt(
      name: "IFeeReduction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeReduction>;
    getContractAt(
      name: "IPriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IStrategyBuilderPlugin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategyBuilderPlugin>;
    getContractAt(
      name: "ITokenGetter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenGetter>;
    getContractAt(
      name: "PriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "StrategyBuilderPlugin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyBuilderPlugin>;
    getContractAt(
      name: "MockCondition",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCondition>;
    getContractAt(
      name: "Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IPlugin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPlugin>;
    getContractAt(
      name: "IPluginExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPluginExecutor>;
    getContractAt(
      name: "BasePlugin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePlugin>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IPyth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPyth>;
    deployContract(
      name: "IPythEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPythEvents>;
    deployContract(
      name: "BaseCondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseCondition>;
    deployContract(
      name: "CoinOrERC20BalanceCondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoinOrERC20BalanceCondition>;
    deployContract(
      name: "ICoinOrERC20BalanceCondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoinOrERC20BalanceCondition>;
    deployContract(
      name: "ITimeCondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITimeCondition>;
    deployContract(
      name: "TimeCondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TimeCondition>;
    deployContract(
      name: "FeeController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeController>;
    deployContract(
      name: "FeeHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeHandler>;
    deployContract(
      name: "IAction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAction>;
    deployContract(
      name: "ICondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICondition>;
    deployContract(
      name: "IFeeController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeController>;
    deployContract(
      name: "IFeeHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeHandler>;
    deployContract(
      name: "IFeeReduction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeReduction>;
    deployContract(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "IStrategyBuilderPlugin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyBuilderPlugin>;
    deployContract(
      name: "ITokenGetter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenGetter>;
    deployContract(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceOracle>;
    deployContract(
      name: "StrategyBuilderPlugin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrategyBuilderPlugin>;
    deployContract(
      name: "MockCondition",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockCondition>;
    deployContract(
      name: "Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Token>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IPlugin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPlugin>;
    deployContract(
      name: "IPluginExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPluginExecutor>;
    deployContract(
      name: "BasePlugin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasePlugin>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IPyth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPyth>;
    deployContract(
      name: "IPythEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPythEvents>;
    deployContract(
      name: "BaseCondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseCondition>;
    deployContract(
      name: "CoinOrERC20BalanceCondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoinOrERC20BalanceCondition>;
    deployContract(
      name: "ICoinOrERC20BalanceCondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICoinOrERC20BalanceCondition>;
    deployContract(
      name: "ITimeCondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITimeCondition>;
    deployContract(
      name: "TimeCondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TimeCondition>;
    deployContract(
      name: "FeeController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeController>;
    deployContract(
      name: "FeeHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeHandler>;
    deployContract(
      name: "IAction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAction>;
    deployContract(
      name: "ICondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICondition>;
    deployContract(
      name: "IFeeController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeController>;
    deployContract(
      name: "IFeeHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeHandler>;
    deployContract(
      name: "IFeeReduction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeReduction>;
    deployContract(
      name: "IPriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "IStrategyBuilderPlugin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyBuilderPlugin>;
    deployContract(
      name: "ITokenGetter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITokenGetter>;
    deployContract(
      name: "PriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PriceOracle>;
    deployContract(
      name: "StrategyBuilderPlugin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StrategyBuilderPlugin>;
    deployContract(
      name: "MockCondition",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockCondition>;
    deployContract(
      name: "Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Token>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IPlugin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPlugin>;
    deployContract(
      name: "IPluginExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPluginExecutor>;
    deployContract(
      name: "BasePlugin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasePlugin>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
