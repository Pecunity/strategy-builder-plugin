/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FeeHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PRIMARY_TOKEN_DISCOUNT"
      | "PERCENTAGE_DIVISOR"
      | "activatePrimaryToken"
      | "beneficiaryPercentage"
      | "burnerAddress"
      | "creatorPercentage"
      | "getWithdrawableBalance"
      | "handleFee"
      | "handleFeeETH"
      | "owner"
      | "primaryToken"
      | "primaryTokenActive"
      | "primaryTokenBurn"
      | "primaryTokenDiscount"
      | "reduction"
      | "renounceOwnership"
      | "tokenAllowed"
      | "tokenBurn"
      | "transferOwnership"
      | "updateBurnerAddress"
      | "updatePercentages"
      | "updateReduction"
      | "updateTokenAllowance"
      | "updateVault"
      | "vault"
      | "vaultPercentage"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeHandled"
      | "FeeHandledETH"
      | "OwnershipTransferred"
      | "PrimaryTokenActivated"
      | "UpdatedBurnerAddress"
      | "UpdatedPercentages"
      | "UpdatedReduction"
      | "UpdatedTokenAllowance"
      | "UpdatedVault"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PRIMARY_TOKEN_DISCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activatePrimaryToken",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawableBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFee",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFeeETH",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "primaryToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryTokenActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryTokenBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryTokenDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reduction", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "tokenBurn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBurnerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePercentages",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReduction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenAllowance",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PRIMARY_TOKEN_DISCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activatePrimaryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleFeeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "primaryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryTokenActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryTokenBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryTokenDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reduction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBurnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FeeHandledEvent {
  export type InputTuple = [
    token: AddressLike,
    totalFee: BigNumberish,
    beneficiary: AddressLike,
    creator: AddressLike,
    beneficiaryFee: BigNumberish,
    creatorFee: BigNumberish,
    vaultFee: BigNumberish,
    burnAmount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    totalFee: bigint,
    beneficiary: string,
    creator: string,
    beneficiaryFee: bigint,
    creatorFee: bigint,
    vaultFee: bigint,
    burnAmount: bigint
  ];
  export interface OutputObject {
    token: string;
    totalFee: bigint;
    beneficiary: string;
    creator: string;
    beneficiaryFee: bigint;
    creatorFee: bigint;
    vaultFee: bigint;
    burnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeHandledETHEvent {
  export type InputTuple = [
    totalFee: BigNumberish,
    beneficiary: AddressLike,
    creator: AddressLike,
    beneficiaryFee: BigNumberish,
    creatorFee: BigNumberish,
    vaultFee: BigNumberish,
    burnAmount: BigNumberish
  ];
  export type OutputTuple = [
    totalFee: bigint,
    beneficiary: string,
    creator: string,
    beneficiaryFee: bigint,
    creatorFee: bigint,
    vaultFee: bigint,
    burnAmount: bigint
  ];
  export interface OutputObject {
    totalFee: bigint;
    beneficiary: string;
    creator: string;
    beneficiaryFee: bigint;
    creatorFee: bigint;
    vaultFee: bigint;
    burnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimaryTokenActivatedEvent {
  export type InputTuple = [
    token: AddressLike,
    treasury: AddressLike,
    primaryTokenBurn: BigNumberish,
    tokenBurn: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    treasury: string,
    primaryTokenBurn: bigint,
    tokenBurn: bigint
  ];
  export interface OutputObject {
    token: string;
    treasury: string;
    primaryTokenBurn: bigint;
    tokenBurn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedBurnerAddressEvent {
  export type InputTuple = [burnerAddress: AddressLike];
  export type OutputTuple = [burnerAddress: string];
  export interface OutputObject {
    burnerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedPercentagesEvent {
  export type InputTuple = [
    beneficiary: BigNumberish,
    creator: BigNumberish,
    vault: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: bigint,
    creator: bigint,
    vault: bigint
  ];
  export interface OutputObject {
    beneficiary: bigint;
    creator: bigint;
    vault: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedReductionEvent {
  export type InputTuple = [reduction: AddressLike];
  export type OutputTuple = [reduction: string];
  export interface OutputObject {
    reduction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedTokenAllowanceEvent {
  export type InputTuple = [token: AddressLike, allowed: boolean];
  export type OutputTuple = [token: string, allowed: boolean];
  export interface OutputObject {
    token: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedVaultEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    receiver: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [receiver: string, token: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeHandler extends BaseContract {
  connect(runner?: ContractRunner | null): FeeHandler;
  waitForDeployment(): Promise<this>;

  interface: FeeHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PRIMARY_TOKEN_DISCOUNT: TypedContractMethod<[], [bigint], "view">;

  PERCENTAGE_DIVISOR: TypedContractMethod<[], [bigint], "view">;

  activatePrimaryToken: TypedContractMethod<
    [
      _token: AddressLike,
      _burnerAddress: AddressLike,
      _primaryTokenDiscount: BigNumberish,
      _primaryTokenBurn: BigNumberish,
      _tokenBurn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  beneficiaryPercentage: TypedContractMethod<[], [bigint], "view">;

  burnerAddress: TypedContractMethod<[], [string], "view">;

  creatorPercentage: TypedContractMethod<[], [bigint], "view">;

  getWithdrawableBalance: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  handleFee: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike,
      creator: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  handleFeeETH: TypedContractMethod<
    [beneficiary: AddressLike, creator: AddressLike],
    [bigint],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  primaryToken: TypedContractMethod<[], [string], "view">;

  primaryTokenActive: TypedContractMethod<[], [boolean], "view">;

  primaryTokenBurn: TypedContractMethod<[], [bigint], "view">;

  primaryTokenDiscount: TypedContractMethod<[], [bigint], "view">;

  reduction: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tokenAllowed: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  tokenBurn: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBurnerAddress: TypedContractMethod<
    [_burnerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePercentages: TypedContractMethod<
    [_beneficiary: BigNumberish, _creator: BigNumberish, _vault: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateReduction: TypedContractMethod<
    [_reduction: AddressLike],
    [void],
    "nonpayable"
  >;

  updateTokenAllowance: TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  updateVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  vault: TypedContractMethod<[], [string], "view">;

  vaultPercentage: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PRIMARY_TOKEN_DISCOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PERCENTAGE_DIVISOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activatePrimaryToken"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _burnerAddress: AddressLike,
      _primaryTokenDiscount: BigNumberish,
      _primaryTokenBurn: BigNumberish,
      _tokenBurn: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beneficiaryPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creatorPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawableBalance"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleFee"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike,
      creator: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleFeeETH"
  ): TypedContractMethod<
    [beneficiary: AddressLike, creator: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primaryToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "primaryTokenActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "primaryTokenBurn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "primaryTokenDiscount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reduction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenAllowed"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenBurn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBurnerAddress"
  ): TypedContractMethod<[_burnerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePercentages"
  ): TypedContractMethod<
    [_beneficiary: BigNumberish, _creator: BigNumberish, _vault: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateReduction"
  ): TypedContractMethod<[_reduction: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenAllowance"
  ): TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeHandled"
  ): TypedContractEvent<
    FeeHandledEvent.InputTuple,
    FeeHandledEvent.OutputTuple,
    FeeHandledEvent.OutputObject
  >;
  getEvent(
    key: "FeeHandledETH"
  ): TypedContractEvent<
    FeeHandledETHEvent.InputTuple,
    FeeHandledETHEvent.OutputTuple,
    FeeHandledETHEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PrimaryTokenActivated"
  ): TypedContractEvent<
    PrimaryTokenActivatedEvent.InputTuple,
    PrimaryTokenActivatedEvent.OutputTuple,
    PrimaryTokenActivatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedBurnerAddress"
  ): TypedContractEvent<
    UpdatedBurnerAddressEvent.InputTuple,
    UpdatedBurnerAddressEvent.OutputTuple,
    UpdatedBurnerAddressEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedPercentages"
  ): TypedContractEvent<
    UpdatedPercentagesEvent.InputTuple,
    UpdatedPercentagesEvent.OutputTuple,
    UpdatedPercentagesEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedReduction"
  ): TypedContractEvent<
    UpdatedReductionEvent.InputTuple,
    UpdatedReductionEvent.OutputTuple,
    UpdatedReductionEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedTokenAllowance"
  ): TypedContractEvent<
    UpdatedTokenAllowanceEvent.InputTuple,
    UpdatedTokenAllowanceEvent.OutputTuple,
    UpdatedTokenAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedVault"
  ): TypedContractEvent<
    UpdatedVaultEvent.InputTuple,
    UpdatedVaultEvent.OutputTuple,
    UpdatedVaultEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "FeeHandled(address,uint256,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      FeeHandledEvent.InputTuple,
      FeeHandledEvent.OutputTuple,
      FeeHandledEvent.OutputObject
    >;
    FeeHandled: TypedContractEvent<
      FeeHandledEvent.InputTuple,
      FeeHandledEvent.OutputTuple,
      FeeHandledEvent.OutputObject
    >;

    "FeeHandledETH(uint256,address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      FeeHandledETHEvent.InputTuple,
      FeeHandledETHEvent.OutputTuple,
      FeeHandledETHEvent.OutputObject
    >;
    FeeHandledETH: TypedContractEvent<
      FeeHandledETHEvent.InputTuple,
      FeeHandledETHEvent.OutputTuple,
      FeeHandledETHEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PrimaryTokenActivated(address,address,uint256,uint256)": TypedContractEvent<
      PrimaryTokenActivatedEvent.InputTuple,
      PrimaryTokenActivatedEvent.OutputTuple,
      PrimaryTokenActivatedEvent.OutputObject
    >;
    PrimaryTokenActivated: TypedContractEvent<
      PrimaryTokenActivatedEvent.InputTuple,
      PrimaryTokenActivatedEvent.OutputTuple,
      PrimaryTokenActivatedEvent.OutputObject
    >;

    "UpdatedBurnerAddress(address)": TypedContractEvent<
      UpdatedBurnerAddressEvent.InputTuple,
      UpdatedBurnerAddressEvent.OutputTuple,
      UpdatedBurnerAddressEvent.OutputObject
    >;
    UpdatedBurnerAddress: TypedContractEvent<
      UpdatedBurnerAddressEvent.InputTuple,
      UpdatedBurnerAddressEvent.OutputTuple,
      UpdatedBurnerAddressEvent.OutputObject
    >;

    "UpdatedPercentages(uint256,uint256,uint256)": TypedContractEvent<
      UpdatedPercentagesEvent.InputTuple,
      UpdatedPercentagesEvent.OutputTuple,
      UpdatedPercentagesEvent.OutputObject
    >;
    UpdatedPercentages: TypedContractEvent<
      UpdatedPercentagesEvent.InputTuple,
      UpdatedPercentagesEvent.OutputTuple,
      UpdatedPercentagesEvent.OutputObject
    >;

    "UpdatedReduction(address)": TypedContractEvent<
      UpdatedReductionEvent.InputTuple,
      UpdatedReductionEvent.OutputTuple,
      UpdatedReductionEvent.OutputObject
    >;
    UpdatedReduction: TypedContractEvent<
      UpdatedReductionEvent.InputTuple,
      UpdatedReductionEvent.OutputTuple,
      UpdatedReductionEvent.OutputObject
    >;

    "UpdatedTokenAllowance(address,bool)": TypedContractEvent<
      UpdatedTokenAllowanceEvent.InputTuple,
      UpdatedTokenAllowanceEvent.OutputTuple,
      UpdatedTokenAllowanceEvent.OutputObject
    >;
    UpdatedTokenAllowance: TypedContractEvent<
      UpdatedTokenAllowanceEvent.InputTuple,
      UpdatedTokenAllowanceEvent.OutputTuple,
      UpdatedTokenAllowanceEvent.OutputObject
    >;

    "UpdatedVault(address)": TypedContractEvent<
      UpdatedVaultEvent.InputTuple,
      UpdatedVaultEvent.OutputTuple,
      UpdatedVaultEvent.OutputObject
    >;
    UpdatedVault: TypedContractEvent<
      UpdatedVaultEvent.InputTuple,
      UpdatedVaultEvent.OutputTuple,
      UpdatedVaultEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
