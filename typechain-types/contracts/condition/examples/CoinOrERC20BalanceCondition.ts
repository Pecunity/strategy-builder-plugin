/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ICoinOrERC20BalanceCondition {
  export type ConditionStruct = {
    baseToken: AddressLike;
    amount: BigNumberish;
    comparison: BigNumberish;
    updateable: boolean;
  };

  export type ConditionStructOutput = [
    baseToken: string,
    amount: bigint,
    comparison: bigint,
    updateable: boolean
  ] & {
    baseToken: string;
    amount: bigint;
    comparison: bigint;
    updateable: boolean;
  };
}

export interface CoinOrERC20BalanceConditionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAutomationToCondition"
      | "addCondition"
      | "addStrategyToCondition"
      | "automations"
      | "checkCondition"
      | "conditionInAutomation"
      | "conditionInStrategy"
      | "deleteCondition"
      | "isConditionActive"
      | "isUpdateable"
      | "removeAutomationFromCondition"
      | "removeStrategyFromCondition"
      | "strategies"
      | "supportsInterface"
      | "updateCondition"
      | "walletCondition"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutomationAdded"
      | "AutomationRemoved"
      | "ConditionAdded"
      | "ConditionDeleted(address,uint32)"
      | "ConditionDeleted(uint32,address)"
      | "StrategyAdded"
      | "StrategyRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAutomationToCondition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCondition",
    values: [BigNumberish, ICoinOrERC20BalanceCondition.ConditionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addStrategyToCondition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automations",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCondition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conditionInAutomation",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conditionInStrategy",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCondition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isConditionActive",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdateable",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAutomationFromCondition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategyFromCondition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCondition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "walletCondition",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAutomationToCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStrategyToCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "automations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conditionInAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conditionInStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConditionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUpdateable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAutomationFromCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategyFromCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletCondition",
    data: BytesLike
  ): Result;
}

export namespace AutomationAddedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    id: BigNumberish,
    automation: BigNumberish
  ];
  export type OutputTuple = [wallet: string, id: bigint, automation: bigint];
  export interface OutputObject {
    wallet: string;
    id: bigint;
    automation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationRemovedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    id: BigNumberish,
    automation: BigNumberish
  ];
  export type OutputTuple = [wallet: string, id: bigint, automation: bigint];
  export interface OutputObject {
    wallet: string;
    id: bigint;
    automation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConditionAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    wallet: AddressLike,
    condition: ICoinOrERC20BalanceCondition.ConditionStruct
  ];
  export type OutputTuple = [
    id: bigint,
    wallet: string,
    condition: ICoinOrERC20BalanceCondition.ConditionStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    wallet: string;
    condition: ICoinOrERC20BalanceCondition.ConditionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConditionDeleted_address_uint32_Event {
  export type InputTuple = [wallet: AddressLike, id: BigNumberish];
  export type OutputTuple = [wallet: string, id: bigint];
  export interface OutputObject {
    wallet: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConditionDeleted_uint32_address_Event {
  export type InputTuple = [id: BigNumberish, wallet: AddressLike];
  export type OutputTuple = [id: bigint, wallet: string];
  export interface OutputObject {
    id: bigint;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAddedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    id: BigNumberish,
    strategy: BigNumberish
  ];
  export type OutputTuple = [wallet: string, id: bigint, strategy: bigint];
  export interface OutputObject {
    wallet: string;
    id: bigint;
    strategy: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyRemovedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    id: BigNumberish,
    strategy: BigNumberish
  ];
  export type OutputTuple = [wallet: string, id: bigint, strategy: bigint];
  export interface OutputObject {
    wallet: string;
    id: bigint;
    strategy: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoinOrERC20BalanceCondition extends BaseContract {
  connect(runner?: ContractRunner | null): CoinOrERC20BalanceCondition;
  waitForDeployment(): Promise<this>;

  interface: CoinOrERC20BalanceConditionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAutomationToCondition: TypedContractMethod<
    [id: BigNumberish, automation: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  addCondition: TypedContractMethod<
    [
      _id: BigNumberish,
      condition: ICoinOrERC20BalanceCondition.ConditionStruct
    ],
    [void],
    "nonpayable"
  >;

  addStrategyToCondition: TypedContractMethod<
    [id: BigNumberish, strategy: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  automations: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [bigint[]],
    "view"
  >;

  checkCondition: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  conditionInAutomation: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish, automationId: BigNumberish],
    [boolean],
    "view"
  >;

  conditionInStrategy: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish, strategyId: BigNumberish],
    [boolean],
    "view"
  >;

  deleteCondition: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  isConditionActive: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;

  isUpdateable: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;

  removeAutomationFromCondition: TypedContractMethod<
    [id: BigNumberish, automation: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  removeStrategyFromCondition: TypedContractMethod<
    [id: BigNumberish, strategy: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  strategies: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [bigint[]],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  updateCondition: TypedContractMethod<[_id: BigNumberish], [boolean], "view">;

  walletCondition: TypedContractMethod<
    [_wallet: AddressLike, _id: BigNumberish],
    [ICoinOrERC20BalanceCondition.ConditionStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAutomationToCondition"
  ): TypedContractMethod<
    [id: BigNumberish, automation: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCondition"
  ): TypedContractMethod<
    [
      _id: BigNumberish,
      condition: ICoinOrERC20BalanceCondition.ConditionStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addStrategyToCondition"
  ): TypedContractMethod<
    [id: BigNumberish, strategy: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "automations"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkCondition"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "conditionInAutomation"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish, automationId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "conditionInStrategy"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish, strategyId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "deleteCondition"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isConditionActive"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isUpdateable"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeAutomationFromCondition"
  ): TypedContractMethod<
    [id: BigNumberish, automation: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeStrategyFromCondition"
  ): TypedContractMethod<
    [id: BigNumberish, strategy: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateCondition"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "walletCondition"
  ): TypedContractMethod<
    [_wallet: AddressLike, _id: BigNumberish],
    [ICoinOrERC20BalanceCondition.ConditionStructOutput],
    "view"
  >;

  getEvent(
    key: "AutomationAdded"
  ): TypedContractEvent<
    AutomationAddedEvent.InputTuple,
    AutomationAddedEvent.OutputTuple,
    AutomationAddedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationRemoved"
  ): TypedContractEvent<
    AutomationRemovedEvent.InputTuple,
    AutomationRemovedEvent.OutputTuple,
    AutomationRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ConditionAdded"
  ): TypedContractEvent<
    ConditionAddedEvent.InputTuple,
    ConditionAddedEvent.OutputTuple,
    ConditionAddedEvent.OutputObject
  >;
  getEvent(
    key: "ConditionDeleted(address,uint32)"
  ): TypedContractEvent<
    ConditionDeleted_address_uint32_Event.InputTuple,
    ConditionDeleted_address_uint32_Event.OutputTuple,
    ConditionDeleted_address_uint32_Event.OutputObject
  >;
  getEvent(
    key: "ConditionDeleted(uint32,address)"
  ): TypedContractEvent<
    ConditionDeleted_uint32_address_Event.InputTuple,
    ConditionDeleted_uint32_address_Event.OutputTuple,
    ConditionDeleted_uint32_address_Event.OutputObject
  >;
  getEvent(
    key: "StrategyAdded"
  ): TypedContractEvent<
    StrategyAddedEvent.InputTuple,
    StrategyAddedEvent.OutputTuple,
    StrategyAddedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyRemoved"
  ): TypedContractEvent<
    StrategyRemovedEvent.InputTuple,
    StrategyRemovedEvent.OutputTuple,
    StrategyRemovedEvent.OutputObject
  >;

  filters: {
    "AutomationAdded(address,uint32,uint32)": TypedContractEvent<
      AutomationAddedEvent.InputTuple,
      AutomationAddedEvent.OutputTuple,
      AutomationAddedEvent.OutputObject
    >;
    AutomationAdded: TypedContractEvent<
      AutomationAddedEvent.InputTuple,
      AutomationAddedEvent.OutputTuple,
      AutomationAddedEvent.OutputObject
    >;

    "AutomationRemoved(address,uint32,uint32)": TypedContractEvent<
      AutomationRemovedEvent.InputTuple,
      AutomationRemovedEvent.OutputTuple,
      AutomationRemovedEvent.OutputObject
    >;
    AutomationRemoved: TypedContractEvent<
      AutomationRemovedEvent.InputTuple,
      AutomationRemovedEvent.OutputTuple,
      AutomationRemovedEvent.OutputObject
    >;

    "ConditionAdded(uint32,address,tuple)": TypedContractEvent<
      ConditionAddedEvent.InputTuple,
      ConditionAddedEvent.OutputTuple,
      ConditionAddedEvent.OutputObject
    >;
    ConditionAdded: TypedContractEvent<
      ConditionAddedEvent.InputTuple,
      ConditionAddedEvent.OutputTuple,
      ConditionAddedEvent.OutputObject
    >;

    "ConditionDeleted(address,uint32)": TypedContractEvent<
      ConditionDeleted_address_uint32_Event.InputTuple,
      ConditionDeleted_address_uint32_Event.OutputTuple,
      ConditionDeleted_address_uint32_Event.OutputObject
    >;
    "ConditionDeleted(uint32,address)": TypedContractEvent<
      ConditionDeleted_uint32_address_Event.InputTuple,
      ConditionDeleted_uint32_address_Event.OutputTuple,
      ConditionDeleted_uint32_address_Event.OutputObject
    >;

    "StrategyAdded(address,uint32,uint32)": TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;
    StrategyAdded: TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;

    "StrategyRemoved(address,uint32,uint32)": TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;
    StrategyRemoved: TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;
  };
}
