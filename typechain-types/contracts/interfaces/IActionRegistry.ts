/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IActionRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "allowAction" | "isAllowed" | "revokeAction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ActionAllowed" | "ActionRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowAction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAction",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAction",
    data: BytesLike
  ): Result;
}

export namespace ActionAllowedEvent {
  export type InputTuple = [action: AddressLike];
  export type OutputTuple = [action: string];
  export interface OutputObject {
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionRevokedEvent {
  export type InputTuple = [action: AddressLike];
  export type OutputTuple = [action: string];
  export interface OutputObject {
    action: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IActionRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IActionRegistry;
  waitForDeployment(): Promise<this>;

  interface: IActionRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowAction: TypedContractMethod<[action: AddressLike], [void], "nonpayable">;

  isAllowed: TypedContractMethod<[action: AddressLike], [boolean], "view">;

  revokeAction: TypedContractMethod<
    [action: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowAction"
  ): TypedContractMethod<[action: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAllowed"
  ): TypedContractMethod<[action: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "revokeAction"
  ): TypedContractMethod<[action: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ActionAllowed"
  ): TypedContractEvent<
    ActionAllowedEvent.InputTuple,
    ActionAllowedEvent.OutputTuple,
    ActionAllowedEvent.OutputObject
  >;
  getEvent(
    key: "ActionRevoked"
  ): TypedContractEvent<
    ActionRevokedEvent.InputTuple,
    ActionRevokedEvent.OutputTuple,
    ActionRevokedEvent.OutputObject
  >;

  filters: {
    "ActionAllowed(address)": TypedContractEvent<
      ActionAllowedEvent.InputTuple,
      ActionAllowedEvent.OutputTuple,
      ActionAllowedEvent.OutputObject
    >;
    ActionAllowed: TypedContractEvent<
      ActionAllowedEvent.InputTuple,
      ActionAllowedEvent.OutputTuple,
      ActionAllowedEvent.OutputObject
    >;

    "ActionRevoked(address)": TypedContractEvent<
      ActionRevokedEvent.InputTuple,
      ActionRevokedEvent.OutputTuple,
      ActionRevokedEvent.OutputObject
    >;
    ActionRevoked: TypedContractEvent<
      ActionRevokedEvent.InputTuple,
      ActionRevokedEvent.OutputTuple,
      ActionRevokedEvent.OutputObject
    >;
  };
}
