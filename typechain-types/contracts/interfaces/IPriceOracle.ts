/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature: "getTokenPrice" | "oracleID" | "setOracleID"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OracleSet"): EventFragment;

  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleID",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleID",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracleID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleID",
    data: BytesLike
  ): Result;
}

export namespace OracleSetEvent {
  export type InputTuple = [token: AddressLike, oracleID: BytesLike];
  export type OutputTuple = [token: string, oracleID: string];
  export interface OutputObject {
    token: string;
    oracleID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: IPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTokenPrice: TypedContractMethod<[_token: AddressLike], [bigint], "view">;

  oracleID: TypedContractMethod<[_token: AddressLike], [string], "view">;

  setOracleID: TypedContractMethod<
    [_token: AddressLike, _oracleID: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTokenPrice"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleID"
  ): TypedContractMethod<[_token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "setOracleID"
  ): TypedContractMethod<
    [_token: AddressLike, _oracleID: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OracleSet"
  ): TypedContractEvent<
    OracleSetEvent.InputTuple,
    OracleSetEvent.OutputTuple,
    OracleSetEvent.OutputObject
  >;

  filters: {
    "OracleSet(address,bytes32)": TypedContractEvent<
      OracleSetEvent.InputTuple,
      OracleSetEvent.OutputTuple,
      OracleSetEvent.OutputObject
    >;
    OracleSet: TypedContractEvent<
      OracleSetEvent.InputTuple,
      OracleSetEvent.OutputTuple,
      OracleSetEvent.OutputObject
    >;
  };
}
