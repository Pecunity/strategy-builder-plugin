/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStrategyBuilderModule {
  export type ParameterStruct = {
    offset: BigNumberish;
    length: BigNumberish;
    paramType: BigNumberish;
  };

  export type ParameterStructOutput = [
    offset: bigint,
    length: bigint,
    paramType: bigint
  ] & { offset: bigint; length: bigint; paramType: bigint };

  export type ContextKeyStruct = {
    key: string;
    parameterReplacement: IStrategyBuilderModule.ParameterStruct;
  };

  export type ContextKeyStructOutput = [
    key: string,
    parameterReplacement: IStrategyBuilderModule.ParameterStructOutput
  ] & {
    key: string;
    parameterReplacement: IStrategyBuilderModule.ParameterStructOutput;
  };

  export type ActionStruct = {
    selector: BytesLike;
    parameter: BytesLike;
    target: AddressLike;
    value: BigNumberish;
    actionType: BigNumberish;
    inputs: IStrategyBuilderModule.ContextKeyStruct[];
    output: IStrategyBuilderModule.ContextKeyStruct;
    result: BigNumberish;
  };

  export type ActionStructOutput = [
    selector: string,
    parameter: string,
    target: string,
    value: bigint,
    actionType: bigint,
    inputs: IStrategyBuilderModule.ContextKeyStructOutput[],
    output: IStrategyBuilderModule.ContextKeyStructOutput,
    result: bigint
  ] & {
    selector: string;
    parameter: string;
    target: string;
    value: bigint;
    actionType: bigint;
    inputs: IStrategyBuilderModule.ContextKeyStructOutput[];
    output: IStrategyBuilderModule.ContextKeyStructOutput;
    result: bigint;
  };

  export type ConditionStruct = {
    conditionAddress: AddressLike;
    id: BigNumberish;
    result1: BigNumberish;
    result0: BigNumberish;
  };

  export type ConditionStructOutput = [
    conditionAddress: string,
    id: bigint,
    result1: bigint,
    result0: bigint
  ] & {
    conditionAddress: string;
    id: bigint;
    result1: bigint;
    result0: bigint;
  };

  export type StrategyStepStruct = {
    condition: IStrategyBuilderModule.ConditionStruct;
    actions: IStrategyBuilderModule.ActionStruct[];
  };

  export type StrategyStepStructOutput = [
    condition: IStrategyBuilderModule.ConditionStructOutput,
    actions: IStrategyBuilderModule.ActionStructOutput[]
  ] & {
    condition: IStrategyBuilderModule.ConditionStructOutput;
    actions: IStrategyBuilderModule.ActionStructOutput[];
  };

  export type StrategyStruct = {
    creator: AddressLike;
    steps: IStrategyBuilderModule.StrategyStepStruct[];
    contextId: BytesLike;
  };

  export type StrategyStructOutput = [
    creator: string,
    steps: IStrategyBuilderModule.StrategyStepStructOutput[],
    contextId: string
  ] & {
    creator: string;
    steps: IStrategyBuilderModule.StrategyStepStructOutput[];
    contextId: string;
  };

  export type AutomationStruct = {
    condition: IStrategyBuilderModule.ConditionStruct;
    strategyId: BigNumberish;
    paymentToken: AddressLike;
    maxFeeAmount: BigNumberish;
  };

  export type AutomationStructOutput = [
    condition: IStrategyBuilderModule.ConditionStructOutput,
    strategyId: bigint,
    paymentToken: string,
    maxFeeAmount: bigint
  ] & {
    condition: IStrategyBuilderModule.ConditionStructOutput;
    strategyId: bigint;
    paymentToken: string;
    maxFeeAmount: bigint;
  };
}

export interface IStrategyBuilderModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "automation"
      | "createAutomation"
      | "createStrategy"
      | "deleteAutomation"
      | "deleteStrategy"
      | "executeAutomation"
      | "executeStrategy"
      | "getStorageId"
      | "strategy"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionExecuted"
      | "AutomationCreated"
      | "AutomationDeleted"
      | "AutomationExecuted"
      | "ContextVariableStored"
      | "StrategyCreated"
      | "StrategyDeleted"
      | "StrategyExecuted"
      | "StrategyStepExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "automation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAutomation",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IStrategyBuilderModule.ConditionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrategy",
    values: [
      BigNumberish,
      AddressLike,
      IStrategyBuilderModule.StrategyStepStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAutomation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAutomation",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategy",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "automation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
}

export namespace ActionExecutedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    action: IStrategyBuilderModule.ActionStruct
  ];
  export type OutputTuple = [
    wallet: string,
    action: IStrategyBuilderModule.ActionStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    action: IStrategyBuilderModule.ActionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationCreatedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    automationId: BigNumberish,
    strategyId: BigNumberish,
    condition: IStrategyBuilderModule.ConditionStruct,
    paymentToken: AddressLike,
    maxFeeAmount: BigNumberish
  ];
  export type OutputTuple = [
    wallet: string,
    automationId: bigint,
    strategyId: bigint,
    condition: IStrategyBuilderModule.ConditionStructOutput,
    paymentToken: string,
    maxFeeAmount: bigint
  ];
  export interface OutputObject {
    wallet: string;
    automationId: bigint;
    strategyId: bigint;
    condition: IStrategyBuilderModule.ConditionStructOutput;
    paymentToken: string;
    maxFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationDeletedEvent {
  export type InputTuple = [wallet: AddressLike, automationId: BigNumberish];
  export type OutputTuple = [wallet: string, automationId: bigint];
  export interface OutputObject {
    wallet: string;
    automationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationExecutedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    automationId: BigNumberish,
    paymentToken: AddressLike,
    feeInToken: BigNumberish,
    feeInUSD: BigNumberish
  ];
  export type OutputTuple = [
    wallet: string,
    automationId: bigint,
    paymentToken: string,
    feeInToken: bigint,
    feeInUSD: bigint
  ];
  export interface OutputObject {
    wallet: string;
    automationId: bigint;
    paymentToken: string;
    feeInToken: bigint;
    feeInUSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContextVariableStoredEvent {
  export type InputTuple = [
    contextId: BytesLike,
    key: string,
    result: BytesLike
  ];
  export type OutputTuple = [contextId: string, key: string, result: string];
  export interface OutputObject {
    contextId: string;
    key: string;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyCreatedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    strategyId: BigNumberish,
    creator: AddressLike,
    contextId: BytesLike,
    strategy: IStrategyBuilderModule.StrategyStruct
  ];
  export type OutputTuple = [
    wallet: string,
    strategyId: bigint,
    creator: string,
    contextId: string,
    strategy: IStrategyBuilderModule.StrategyStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
    creator: string;
    contextId: string;
    strategy: IStrategyBuilderModule.StrategyStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyDeletedEvent {
  export type InputTuple = [wallet: AddressLike, strategyId: BigNumberish];
  export type OutputTuple = [wallet: string, strategyId: bigint];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyExecutedEvent {
  export type InputTuple = [wallet: AddressLike, strategyId: BigNumberish];
  export type OutputTuple = [wallet: string, strategyId: bigint];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyStepExecutedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    strategyId: BigNumberish,
    stepId: BigNumberish,
    actions: IStrategyBuilderModule.ActionStruct[]
  ];
  export type OutputTuple = [
    wallet: string,
    strategyId: bigint,
    stepId: bigint,
    actions: IStrategyBuilderModule.ActionStructOutput[]
  ];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
    stepId: bigint;
    actions: IStrategyBuilderModule.ActionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStrategyBuilderModule extends BaseContract {
  connect(runner?: ContractRunner | null): IStrategyBuilderModule;
  waitForDeployment(): Promise<this>;

  interface: IStrategyBuilderModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  automation: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderModule.AutomationStructOutput],
    "view"
  >;

  createAutomation: TypedContractMethod<
    [
      id: BigNumberish,
      strategyId: BigNumberish,
      paymentToken: AddressLike,
      maxFeeInUSD: BigNumberish,
      condition: IStrategyBuilderModule.ConditionStruct
    ],
    [void],
    "nonpayable"
  >;

  createStrategy: TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      steps: IStrategyBuilderModule.StrategyStepStruct[]
    ],
    [void],
    "nonpayable"
  >;

  deleteAutomation: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteStrategy: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  executeAutomation: TypedContractMethod<
    [id: BigNumberish, wallet: AddressLike, beneficary: AddressLike],
    [void],
    "nonpayable"
  >;

  executeStrategy: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getStorageId: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [string],
    "view"
  >;

  strategy: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderModule.StrategyStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "automation"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderModule.AutomationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAutomation"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      strategyId: BigNumberish,
      paymentToken: AddressLike,
      maxFeeInUSD: BigNumberish,
      condition: IStrategyBuilderModule.ConditionStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createStrategy"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      steps: IStrategyBuilderModule.StrategyStepStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteAutomation"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteStrategy"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeAutomation"
  ): TypedContractMethod<
    [id: BigNumberish, wallet: AddressLike, beneficary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeStrategy"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStorageId"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "strategy"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderModule.StrategyStructOutput],
    "view"
  >;

  getEvent(
    key: "ActionExecuted"
  ): TypedContractEvent<
    ActionExecutedEvent.InputTuple,
    ActionExecutedEvent.OutputTuple,
    ActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationCreated"
  ): TypedContractEvent<
    AutomationCreatedEvent.InputTuple,
    AutomationCreatedEvent.OutputTuple,
    AutomationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationDeleted"
  ): TypedContractEvent<
    AutomationDeletedEvent.InputTuple,
    AutomationDeletedEvent.OutputTuple,
    AutomationDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationExecuted"
  ): TypedContractEvent<
    AutomationExecutedEvent.InputTuple,
    AutomationExecutedEvent.OutputTuple,
    AutomationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ContextVariableStored"
  ): TypedContractEvent<
    ContextVariableStoredEvent.InputTuple,
    ContextVariableStoredEvent.OutputTuple,
    ContextVariableStoredEvent.OutputObject
  >;
  getEvent(
    key: "StrategyCreated"
  ): TypedContractEvent<
    StrategyCreatedEvent.InputTuple,
    StrategyCreatedEvent.OutputTuple,
    StrategyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyDeleted"
  ): TypedContractEvent<
    StrategyDeletedEvent.InputTuple,
    StrategyDeletedEvent.OutputTuple,
    StrategyDeletedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyExecuted"
  ): TypedContractEvent<
    StrategyExecutedEvent.InputTuple,
    StrategyExecutedEvent.OutputTuple,
    StrategyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyStepExecuted"
  ): TypedContractEvent<
    StrategyStepExecutedEvent.InputTuple,
    StrategyStepExecutedEvent.OutputTuple,
    StrategyStepExecutedEvent.OutputObject
  >;

  filters: {
    "ActionExecuted(address,tuple)": TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;
    ActionExecuted: TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;

    "AutomationCreated(address,uint32,uint32,tuple,address,uint256)": TypedContractEvent<
      AutomationCreatedEvent.InputTuple,
      AutomationCreatedEvent.OutputTuple,
      AutomationCreatedEvent.OutputObject
    >;
    AutomationCreated: TypedContractEvent<
      AutomationCreatedEvent.InputTuple,
      AutomationCreatedEvent.OutputTuple,
      AutomationCreatedEvent.OutputObject
    >;

    "AutomationDeleted(address,uint32)": TypedContractEvent<
      AutomationDeletedEvent.InputTuple,
      AutomationDeletedEvent.OutputTuple,
      AutomationDeletedEvent.OutputObject
    >;
    AutomationDeleted: TypedContractEvent<
      AutomationDeletedEvent.InputTuple,
      AutomationDeletedEvent.OutputTuple,
      AutomationDeletedEvent.OutputObject
    >;

    "AutomationExecuted(address,uint32,address,uint256,uint256)": TypedContractEvent<
      AutomationExecutedEvent.InputTuple,
      AutomationExecutedEvent.OutputTuple,
      AutomationExecutedEvent.OutputObject
    >;
    AutomationExecuted: TypedContractEvent<
      AutomationExecutedEvent.InputTuple,
      AutomationExecutedEvent.OutputTuple,
      AutomationExecutedEvent.OutputObject
    >;

    "ContextVariableStored(bytes32,string,bytes)": TypedContractEvent<
      ContextVariableStoredEvent.InputTuple,
      ContextVariableStoredEvent.OutputTuple,
      ContextVariableStoredEvent.OutputObject
    >;
    ContextVariableStored: TypedContractEvent<
      ContextVariableStoredEvent.InputTuple,
      ContextVariableStoredEvent.OutputTuple,
      ContextVariableStoredEvent.OutputObject
    >;

    "StrategyCreated(address,uint32,address,bytes32,tuple)": TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;
    StrategyCreated: TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;

    "StrategyDeleted(address,uint32)": TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;
    StrategyDeleted: TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;

    "StrategyExecuted(address,uint32)": TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;
    StrategyExecuted: TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;

    "StrategyStepExecuted(address,uint32,uint32,tuple[])": TypedContractEvent<
      StrategyStepExecutedEvent.InputTuple,
      StrategyStepExecutedEvent.OutputTuple,
      StrategyStepExecutedEvent.OutputObject
    >;
    StrategyStepExecuted: TypedContractEvent<
      StrategyStepExecutedEvent.InputTuple,
      StrategyStepExecutedEvent.OutputTuple,
      StrategyStepExecutedEvent.OutputObject
    >;
  };
}
