/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IAction {
  export type PluginExecutionStruct = {
    target: AddressLike;
    value: BigNumberish;
    data: BytesLike;
  };

  export type PluginExecutionStructOutput = [
    target: string,
    value: bigint,
    data: string
  ] & { target: string; value: bigint; data: string };
}

export interface UniswapV2SwapActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH"
      | "_getSwapAmount"
      | "factory"
      | "router"
      | "swapETHForExactTokens"
      | "swapExactETHForTokens"
      | "swapExactTokensForETH"
      | "swapExactTokensForTokens"
      | "swapPercentageETHForTokens"
      | "swapPercentageTokensForETH"
      | "swapPercentageTokensForTokens"
      | "swapTokensForExactETH"
      | "swapTokensForExactTokens"
      | "uniswapV2RouterAddress"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_getSwapAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPercentageETHForTokens",
    values: [BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPercentageTokensForETH",
    values: [BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPercentageTokensForTokens",
    values: [BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2RouterAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentageETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentageTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentageTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2RouterAddress",
    data: BytesLike
  ): Result;
}

export interface UniswapV2SwapActions extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapV2SwapActions;
  waitForDeployment(): Promise<this>;

  interface: UniswapV2SwapActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WETH: TypedContractMethod<[], [string], "view">;

  _getSwapAmount: TypedContractMethod<
    [r: BigNumberish, a: BigNumberish],
    [bigint],
    "view"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  router: TypedContractMethod<[], [string], "view">;

  swapETHForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapExactETHForTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapExactTokensForETH: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapPercentageETHForTokens: TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[], to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapPercentageTokensForETH: TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[], to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapPercentageTokensForTokens: TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[], to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapTokensForExactETH: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  swapTokensForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  uniswapV2RouterAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_getSwapAmount"
  ): TypedContractMethod<[r: BigNumberish, a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapETHForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactETHForTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForETH"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapPercentageETHForTokens"
  ): TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[], to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapPercentageTokensForETH"
  ): TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[], to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapPercentageTokensForTokens"
  ): TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[], to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactETH"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: AddressLike[],
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "uniswapV2RouterAddress"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
