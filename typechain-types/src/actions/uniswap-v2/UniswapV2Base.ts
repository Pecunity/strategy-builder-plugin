/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface UniswapV2BaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DELTA_DEADLINE"
      | "PERCENTAGE_FACTOR"
      | "WETH"
      | "_getSwapAmount"
      | "factory"
      | "getTokenForSelector"
      | "router"
      | "tokenGetterIDs"
      | "uniswapV2RouterAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DELTA_DEADLINE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_getSwapAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenForSelector",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenGetterIDs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2RouterAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DELTA_DEADLINE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenForSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenGetterIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2RouterAddress",
    data: BytesLike
  ): Result;
}

export interface UniswapV2Base extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapV2Base;
  waitForDeployment(): Promise<this>;

  interface: UniswapV2BaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DELTA_DEADLINE: TypedContractMethod<[], [bigint], "view">;

  PERCENTAGE_FACTOR: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  _getSwapAmount: TypedContractMethod<
    [r: BigNumberish, a: BigNumberish],
    [bigint],
    "view"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  getTokenForSelector: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;

  router: TypedContractMethod<[], [string], "view">;

  tokenGetterIDs: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  uniswapV2RouterAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DELTA_DEADLINE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PERCENTAGE_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_getSwapAmount"
  ): TypedContractMethod<[r: BigNumberish, a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenForSelector"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenGetterIDs"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "uniswapV2RouterAddress"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
