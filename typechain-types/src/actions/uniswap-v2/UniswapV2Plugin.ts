/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type ManifestExternalCallPermissionStruct = {
  externalAddress: AddressLike;
  permitAnySelector: boolean;
  selectors: BytesLike[];
};

export type ManifestExternalCallPermissionStructOutput = [
  externalAddress: string,
  permitAnySelector: boolean,
  selectors: string[]
] & {
  externalAddress: string;
  permitAnySelector: boolean;
  selectors: string[];
};

export type ManifestFunctionStruct = {
  functionType: BigNumberish;
  functionId: BigNumberish;
  dependencyIndex: BigNumberish;
};

export type ManifestFunctionStructOutput = [
  functionType: bigint,
  functionId: bigint,
  dependencyIndex: bigint
] & { functionType: bigint; functionId: bigint; dependencyIndex: bigint };

export type ManifestAssociatedFunctionStruct = {
  executionSelector: BytesLike;
  associatedFunction: ManifestFunctionStruct;
};

export type ManifestAssociatedFunctionStructOutput = [
  executionSelector: string,
  associatedFunction: ManifestFunctionStructOutput
] & {
  executionSelector: string;
  associatedFunction: ManifestFunctionStructOutput;
};

export type ManifestExecutionHookStruct = {
  executionSelector: BytesLike;
  preExecHook: ManifestFunctionStruct;
  postExecHook: ManifestFunctionStruct;
};

export type ManifestExecutionHookStructOutput = [
  executionSelector: string,
  preExecHook: ManifestFunctionStructOutput,
  postExecHook: ManifestFunctionStructOutput
] & {
  executionSelector: string;
  preExecHook: ManifestFunctionStructOutput;
  postExecHook: ManifestFunctionStructOutput;
};

export type PluginManifestStruct = {
  interfaceIds: BytesLike[];
  dependencyInterfaceIds: BytesLike[];
  executionFunctions: BytesLike[];
  permittedExecutionSelectors: BytesLike[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStruct[];
  userOpValidationFunctions: ManifestAssociatedFunctionStruct[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStruct[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStruct[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStruct[];
  executionHooks: ManifestExecutionHookStruct[];
};

export type PluginManifestStructOutput = [
  interfaceIds: string[],
  dependencyInterfaceIds: string[],
  executionFunctions: string[],
  permittedExecutionSelectors: string[],
  permitAnyExternalAddress: boolean,
  canSpendNativeToken: boolean,
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[],
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[],
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[],
  executionHooks: ManifestExecutionHookStructOutput[]
] & {
  interfaceIds: string[];
  dependencyInterfaceIds: string[];
  executionFunctions: string[];
  permittedExecutionSelectors: string[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[];
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[];
  executionHooks: ManifestExecutionHookStructOutput[];
};

export type SelectorPermissionStruct = {
  functionSelector: BytesLike;
  permissionDescription: string;
};

export type SelectorPermissionStructOutput = [
  functionSelector: string,
  permissionDescription: string
] & { functionSelector: string; permissionDescription: string };

export type PluginMetadataStruct = {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStruct[];
};

export type PluginMetadataStructOutput = [
  name: string,
  version: string,
  author: string,
  permissionDescriptors: SelectorPermissionStructOutput[]
] & {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStructOutput[];
};

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface UniswapV2PluginInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTHOR"
      | "NAME"
      | "VERSION"
      | "_getSwapAmount"
      | "addLiqudityPercentageOfMaxPossible"
      | "addLiquidity"
      | "addLiquidityETH"
      | "addLiquidityETHPercentage"
      | "addLiquidityETHPercentageToken"
      | "addLiquidityPercentage"
      | "onInstall"
      | "onUninstall"
      | "pluginManifest"
      | "pluginMetadata"
      | "postExecutionHook"
      | "preExecutionHook"
      | "preRuntimeValidationHook"
      | "preUserOpValidationHook"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "removeLiquidityETHPercentage"
      | "removeLiquidityPercentage"
      | "router"
      | "runtimeValidationFunction"
      | "supportsInterface"
      | "swapETHForExactTokens"
      | "swapExactETHForTokens"
      | "swapExactTokensForETH"
      | "swapExactTokensForTokens"
      | "swapPercentageETHForTokens"
      | "swapPercentageTokensForETH"
      | "swapPercentageTokensForTokens"
      | "swapTokensForExactETH"
      | "swapTokensForExactTokens"
      | "uniswapV2RouterAddress"
      | "userOpValidationFunction"
      | "zap"
      | "zapETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LiquidityAdded" | "LiquidiyRemoved" | "TokenSwap"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AUTHOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_getSwapAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiqudityPercentageOfMaxPossible",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETHPercentage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETHPercentageToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityPercentage",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginManifest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pluginMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postExecutionHook",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preExecutionHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRuntimeValidationHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preUserOpValidationHook",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHPercentage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityPercentage",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "runtimeValidationFunction",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [BigNumberish, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [BigNumberish, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [BigNumberish, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [BigNumberish, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPercentageETHForTokens",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPercentageTokensForETH",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapPercentageTokensForTokens",
    values: [BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [BigNumberish, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [BigNumberish, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2RouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userOpValidationFunction",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zap",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zapETH",
    values: [AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "AUTHOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getSwapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiqudityPercentageOfMaxPossible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETHPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETHPercentageToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRuntimeValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preUserOpValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "runtimeValidationFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentageETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentageTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentageTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2RouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOpValidationFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapETH", data: BytesLike): Result;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    amountA: BigNumberish,
    amountB: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokenA: string,
    tokenB: string,
    amountA: bigint,
    amountB: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    amountA: bigint;
    amountB: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidiyRemovedEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    amountA: BigNumberish,
    amountB: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokenA: string,
    tokenB: string,
    amountA: bigint,
    amountB: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    amountA: bigint;
    amountB: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSwapEvent {
  export type InputTuple = [path: AddressLike[], amountsOut: BigNumberish[]];
  export type OutputTuple = [path: string[], amountsOut: bigint[]];
  export interface OutputObject {
    path: string[];
    amountsOut: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UniswapV2Plugin extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapV2Plugin;
  waitForDeployment(): Promise<this>;

  interface: UniswapV2PluginInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTHOR: TypedContractMethod<[], [string], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  _getSwapAmount: TypedContractMethod<
    [r: BigNumberish, a: BigNumberish],
    [bigint],
    "view"
  >;

  addLiqudityPercentageOfMaxPossible: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHDesired: BigNumberish,
      amountETHMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addLiquidityETHPercentage: TypedContractMethod<
    [token: AddressLike, percentageETHDesired: BigNumberish],
    [void],
    "nonpayable"
  >;

  addLiquidityETHPercentageToken: TypedContractMethod<
    [token: AddressLike, percentageTokenDesired: BigNumberish],
    [void],
    "nonpayable"
  >;

  addLiquidityPercentage: TypedContractMethod<
    [
      percentageADesired: BigNumberish,
      tokenA: AddressLike,
      tokenB: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  onInstall: TypedContractMethod<[arg0: BytesLike], [void], "view">;

  onUninstall: TypedContractMethod<[arg0: BytesLike], [void], "view">;

  pluginManifest: TypedContractMethod<[], [PluginManifestStructOutput], "view">;

  pluginMetadata: TypedContractMethod<[], [PluginMetadataStructOutput], "view">;

  postExecutionHook: TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;

  preExecutionHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  preRuntimeValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  preUserOpValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  removeLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  removeLiquidityETHPercentage: TypedContractMethod<
    [token: AddressLike, liquidityPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeLiquidityPercentage: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      percentageLiquidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  router: TypedContractMethod<[], [string], "view">;

  runtimeValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  swapETHForExactTokens: TypedContractMethod<
    [amountOut: BigNumberish, amountInMax: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapExactETHForTokens: TypedContractMethod<
    [amountIn: BigNumberish, amountOutMin: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapExactTokensForETH: TypedContractMethod<
    [amountIn: BigNumberish, amountOutMin: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [amountIn: BigNumberish, amountOutMin: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapPercentageETHForTokens: TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapPercentageTokensForETH: TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapPercentageTokensForTokens: TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapTokensForExactETH: TypedContractMethod<
    [amountOut: BigNumberish, amountInMax: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  swapTokensForExactTokens: TypedContractMethod<
    [amountOut: BigNumberish, amountInMax: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;

  uniswapV2RouterAddress: TypedContractMethod<[], [string], "view">;

  userOpValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  zap: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, amountIn: BigNumberish],
    [void],
    "nonpayable"
  >;

  zapETH: TypedContractMethod<
    [token: AddressLike, amountIn: BigNumberish, inputETH: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTHOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_getSwapAmount"
  ): TypedContractMethod<[r: BigNumberish, a: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "addLiqudityPercentageOfMaxPossible"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, percentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHDesired: BigNumberish,
      amountETHMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityETHPercentage"
  ): TypedContractMethod<
    [token: AddressLike, percentageETHDesired: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityETHPercentageToken"
  ): TypedContractMethod<
    [token: AddressLike, percentageTokenDesired: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityPercentage"
  ): TypedContractMethod<
    [
      percentageADesired: BigNumberish,
      tokenA: AddressLike,
      tokenB: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[arg0: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[arg0: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "pluginManifest"
  ): TypedContractMethod<[], [PluginManifestStructOutput], "view">;
  getFunction(
    nameOrSignature: "pluginMetadata"
  ): TypedContractMethod<[], [PluginMetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "postExecutionHook"
  ): TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preExecutionHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preRuntimeValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preUserOpValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETHPercentage"
  ): TypedContractMethod<
    [token: AddressLike, liquidityPercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityPercentage"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      percentageLiquidity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "runtimeValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapETHForExactTokens"
  ): TypedContractMethod<
    [amountOut: BigNumberish, amountInMax: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactETHForTokens"
  ): TypedContractMethod<
    [amountIn: BigNumberish, amountOutMin: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForETH"
  ): TypedContractMethod<
    [amountIn: BigNumberish, amountOutMin: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [amountIn: BigNumberish, amountOutMin: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapPercentageETHForTokens"
  ): TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapPercentageTokensForETH"
  ): TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapPercentageTokensForTokens"
  ): TypedContractMethod<
    [percentage: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactETH"
  ): TypedContractMethod<
    [amountOut: BigNumberish, amountInMax: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactTokens"
  ): TypedContractMethod<
    [amountOut: BigNumberish, amountInMax: BigNumberish, path: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV2RouterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userOpValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zap"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike, amountIn: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zapETH"
  ): TypedContractMethod<
    [token: AddressLike, amountIn: BigNumberish, inputETH: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidiyRemoved"
  ): TypedContractEvent<
    LiquidiyRemovedEvent.InputTuple,
    LiquidiyRemovedEvent.OutputTuple,
    LiquidiyRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSwap"
  ): TypedContractEvent<
    TokenSwapEvent.InputTuple,
    TokenSwapEvent.OutputTuple,
    TokenSwapEvent.OutputObject
  >;

  filters: {
    "LiquidityAdded(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidiyRemoved(address,address,uint256,uint256,uint256)": TypedContractEvent<
      LiquidiyRemovedEvent.InputTuple,
      LiquidiyRemovedEvent.OutputTuple,
      LiquidiyRemovedEvent.OutputObject
    >;
    LiquidiyRemoved: TypedContractEvent<
      LiquidiyRemovedEvent.InputTuple,
      LiquidiyRemovedEvent.OutputTuple,
      LiquidiyRemovedEvent.OutputObject
    >;

    "TokenSwap(address[],uint256[])": TypedContractEvent<
      TokenSwapEvent.InputTuple,
      TokenSwapEvent.OutputTuple,
      TokenSwapEvent.OutputObject
    >;
    TokenSwap: TypedContractEvent<
      TokenSwapEvent.InputTuple,
      TokenSwapEvent.OutputTuple,
      TokenSwapEvent.OutputObject
    >;
  };
}
