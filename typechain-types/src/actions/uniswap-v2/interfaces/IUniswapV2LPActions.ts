/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IAction {
  export type PluginExecutionStruct = {
    target: AddressLike;
    value: BigNumberish;
    data: BytesLike;
  };

  export type PluginExecutionStructOutput = [
    target: string,
    value: bigint,
    data: string
  ] & { target: string; value: bigint; data: string };
}

export interface IUniswapV2LPActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiqudityPercentage"
      | "addLiqudityPercentageETH"
      | "addLiquidity"
      | "addLiquidityETH"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "removeLiquidityETHPercentage"
      | "removeLiquidityPercentage"
      | "zap"
      | "zapETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiqudityPercentage",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiqudityPercentageETH",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHPercentage",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityPercentage",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zap",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zapETH",
    values: [AddressLike, BigNumberish, boolean, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiqudityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiqudityPercentageETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapETH", data: BytesLike): Result;
}

export interface IUniswapV2LPActions extends BaseContract {
  connect(runner?: ContractRunner | null): IUniswapV2LPActions;
  waitForDeployment(): Promise<this>;

  interface: IUniswapV2LPActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiqudityPercentage: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      percentage: BigNumberish,
      wallet: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  addLiqudityPercentageETH: TypedContractMethod<
    [token: AddressLike, percentage: BigNumberish, wallet: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  addLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  addLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHDesired: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  removeLiquidity: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  removeLiquidityETH: TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  removeLiquidityETHPercentage: TypedContractMethod<
    [token: AddressLike, liquidityPercentage: BigNumberish, to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  removeLiquidityPercentage: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      percentageLiquidity: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  zap: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountIn: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  zapETH: TypedContractMethod<
    [
      token: AddressLike,
      amountIn: BigNumberish,
      inputETH: boolean,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiqudityPercentage"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      percentage: BigNumberish,
      wallet: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiqudityPercentageETH"
  ): TypedContractMethod<
    [token: AddressLike, percentage: BigNumberish, wallet: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "addLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amountTokenDesired: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHDesired: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      amountETHMin: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityETHPercentage"
  ): TypedContractMethod<
    [token: AddressLike, liquidityPercentage: BigNumberish, to: AddressLike],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityPercentage"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      percentageLiquidity: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "zap"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      amountIn: BigNumberish,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "zapETH"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amountIn: BigNumberish,
      inputETH: boolean,
      to: AddressLike
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  filters: {};
}
