/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IAction {
  export type PluginExecutionStruct = {
    target: AddressLike;
    value: BigNumberish;
    data: BytesLike;
  };

  export type PluginExecutionStructOutput = [
    target: string,
    value: bigint,
    data: string
  ] & { target: string; value: bigint; data: string };
}

export interface IAaveV3ActionsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrow"
      | "borrowETH"
      | "borrowPercentageOfAvailable"
      | "borrowPercentageOfAvailableETH"
      | "changeSupplyToHealthFactor"
      | "changeSupplyToHealthFactorETH"
      | "repay"
      | "repayETH"
      | "supply"
      | "supplyETH"
      | "supplyPercentageOfBalance"
      | "supplyPercentageOfBalanceETH"
      | "withdraw"
      | "withdrawETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowETH",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPercentageOfAvailable",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPercentageOfAvailableETH",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSupplyToHealthFactor",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSupplyToHealthFactorETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayETH",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyPercentageOfBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyPercentageOfBalanceETH",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowPercentageOfAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowPercentageOfAvailableETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSupplyToHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSupplyToHealthFactorETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supplyETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyPercentageOfBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyPercentageOfBalanceETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
}

export interface IAaveV3Actions extends BaseContract {
  connect(runner?: ContractRunner | null): IAaveV3Actions;
  waitForDeployment(): Promise<this>;

  interface: IAaveV3ActionsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrow: TypedContractMethod<
    [
      wallet: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  borrowETH: TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish, interestRateMode: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  borrowPercentageOfAvailable: TypedContractMethod<
    [
      wallet: AddressLike,
      asset: AddressLike,
      percentage: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  borrowPercentageOfAvailableETH: TypedContractMethod<
    [
      wallet: AddressLike,
      percentage: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  changeSupplyToHealthFactor: TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, targetHealthFactor: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  changeSupplyToHealthFactorETH: TypedContractMethod<
    [wallet: AddressLike, targetHealthFactor: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  repay: TypedContractMethod<
    [
      wallet: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  repayETH: TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish, interestRateMode: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  supply: TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  supplyETH: TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  supplyPercentageOfBalance: TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, percentage: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  supplyPercentageOfBalanceETH: TypedContractMethod<
    [wallet: AddressLike, percentage: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  withdraw: TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  withdrawETH: TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      wallet: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowETH"
  ): TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish, interestRateMode: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowPercentageOfAvailable"
  ): TypedContractMethod<
    [
      wallet: AddressLike,
      asset: AddressLike,
      percentage: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowPercentageOfAvailableETH"
  ): TypedContractMethod<
    [
      wallet: AddressLike,
      percentage: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeSupplyToHealthFactor"
  ): TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, targetHealthFactor: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeSupplyToHealthFactorETH"
  ): TypedContractMethod<
    [wallet: AddressLike, targetHealthFactor: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      wallet: AddressLike,
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish
    ],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "repayETH"
  ): TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish, interestRateMode: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "supplyETH"
  ): TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "supplyPercentageOfBalance"
  ): TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, percentage: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "supplyPercentageOfBalanceETH"
  ): TypedContractMethod<
    [wallet: AddressLike, percentage: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [wallet: AddressLike, asset: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<
    [wallet: AddressLike, amount: BigNumberish],
    [IAction.PluginExecutionStructOutput[]],
    "view"
  >;

  filters: {};
}
