/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IFeeHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activatePrimaryToken"
      | "handleFee"
      | "handleFeeETH"
      | "tokenAllowed"
      | "updatePercentages"
      | "updatePrimaryTokenDiscount"
      | "updateTokenAllowance"
      | "updateVault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeHandled"
      | "FeeHandledETH"
      | "PrimaryTokenActivated"
      | "UpdatedPercentages"
      | "UpdatedPrimaryTokenDiscount"
      | "UpdatedTokenAllowance"
      | "UpdatedVault"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activatePrimaryToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFee",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFeeETH",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePercentages",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrimaryTokenDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenAllowance",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVault",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePrimaryToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleFeeETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrimaryTokenDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVault",
    data: BytesLike
  ): Result;
}

export namespace FeeHandledEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeHandledETHEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrimaryTokenActivatedEvent {
  export type InputTuple = [token: AddressLike, treasury: AddressLike];
  export type OutputTuple = [token: string, treasury: string];
  export interface OutputObject {
    token: string;
    treasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedPercentagesEvent {
  export type InputTuple = [
    beneficiary: BigNumberish,
    creator: BigNumberish,
    vault: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: bigint,
    creator: bigint,
    vault: bigint
  ];
  export interface OutputObject {
    beneficiary: bigint;
    creator: bigint;
    vault: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedPrimaryTokenDiscountEvent {
  export type InputTuple = [discount: BigNumberish];
  export type OutputTuple = [discount: bigint];
  export interface OutputObject {
    discount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedTokenAllowanceEvent {
  export type InputTuple = [token: AddressLike, allowed: boolean];
  export type OutputTuple = [token: string, allowed: boolean];
  export interface OutputObject {
    token: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedVaultEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFeeHandler extends BaseContract {
  connect(runner?: ContractRunner | null): IFeeHandler;
  waitForDeployment(): Promise<this>;

  interface: IFeeHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activatePrimaryToken: TypedContractMethod<
    [token: AddressLike, _treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  handleFee: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike,
      creator: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  handleFeeETH: TypedContractMethod<
    [beneficiary: AddressLike, creator: AddressLike],
    [void],
    "payable"
  >;

  tokenAllowed: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  updatePercentages: TypedContractMethod<
    [_beneficiary: BigNumberish, _creator: BigNumberish, _vault: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePrimaryTokenDiscount: TypedContractMethod<
    [_discount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTokenAllowance: TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  updateVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activatePrimaryToken"
  ): TypedContractMethod<
    [token: AddressLike, _treasury: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleFee"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      beneficiary: AddressLike,
      creator: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleFeeETH"
  ): TypedContractMethod<
    [beneficiary: AddressLike, creator: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tokenAllowed"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updatePercentages"
  ): TypedContractMethod<
    [_beneficiary: BigNumberish, _creator: BigNumberish, _vault: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePrimaryTokenDiscount"
  ): TypedContractMethod<[_discount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTokenAllowance"
  ): TypedContractMethod<
    [token: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeHandled"
  ): TypedContractEvent<
    FeeHandledEvent.InputTuple,
    FeeHandledEvent.OutputTuple,
    FeeHandledEvent.OutputObject
  >;
  getEvent(
    key: "FeeHandledETH"
  ): TypedContractEvent<
    FeeHandledETHEvent.InputTuple,
    FeeHandledETHEvent.OutputTuple,
    FeeHandledETHEvent.OutputObject
  >;
  getEvent(
    key: "PrimaryTokenActivated"
  ): TypedContractEvent<
    PrimaryTokenActivatedEvent.InputTuple,
    PrimaryTokenActivatedEvent.OutputTuple,
    PrimaryTokenActivatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedPercentages"
  ): TypedContractEvent<
    UpdatedPercentagesEvent.InputTuple,
    UpdatedPercentagesEvent.OutputTuple,
    UpdatedPercentagesEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedPrimaryTokenDiscount"
  ): TypedContractEvent<
    UpdatedPrimaryTokenDiscountEvent.InputTuple,
    UpdatedPrimaryTokenDiscountEvent.OutputTuple,
    UpdatedPrimaryTokenDiscountEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedTokenAllowance"
  ): TypedContractEvent<
    UpdatedTokenAllowanceEvent.InputTuple,
    UpdatedTokenAllowanceEvent.OutputTuple,
    UpdatedTokenAllowanceEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedVault"
  ): TypedContractEvent<
    UpdatedVaultEvent.InputTuple,
    UpdatedVaultEvent.OutputTuple,
    UpdatedVaultEvent.OutputObject
  >;

  filters: {
    "FeeHandled(address,uint256)": TypedContractEvent<
      FeeHandledEvent.InputTuple,
      FeeHandledEvent.OutputTuple,
      FeeHandledEvent.OutputObject
    >;
    FeeHandled: TypedContractEvent<
      FeeHandledEvent.InputTuple,
      FeeHandledEvent.OutputTuple,
      FeeHandledEvent.OutputObject
    >;

    "FeeHandledETH(uint256)": TypedContractEvent<
      FeeHandledETHEvent.InputTuple,
      FeeHandledETHEvent.OutputTuple,
      FeeHandledETHEvent.OutputObject
    >;
    FeeHandledETH: TypedContractEvent<
      FeeHandledETHEvent.InputTuple,
      FeeHandledETHEvent.OutputTuple,
      FeeHandledETHEvent.OutputObject
    >;

    "PrimaryTokenActivated(address,address)": TypedContractEvent<
      PrimaryTokenActivatedEvent.InputTuple,
      PrimaryTokenActivatedEvent.OutputTuple,
      PrimaryTokenActivatedEvent.OutputObject
    >;
    PrimaryTokenActivated: TypedContractEvent<
      PrimaryTokenActivatedEvent.InputTuple,
      PrimaryTokenActivatedEvent.OutputTuple,
      PrimaryTokenActivatedEvent.OutputObject
    >;

    "UpdatedPercentages(uint256,uint256,uint256)": TypedContractEvent<
      UpdatedPercentagesEvent.InputTuple,
      UpdatedPercentagesEvent.OutputTuple,
      UpdatedPercentagesEvent.OutputObject
    >;
    UpdatedPercentages: TypedContractEvent<
      UpdatedPercentagesEvent.InputTuple,
      UpdatedPercentagesEvent.OutputTuple,
      UpdatedPercentagesEvent.OutputObject
    >;

    "UpdatedPrimaryTokenDiscount(uint256)": TypedContractEvent<
      UpdatedPrimaryTokenDiscountEvent.InputTuple,
      UpdatedPrimaryTokenDiscountEvent.OutputTuple,
      UpdatedPrimaryTokenDiscountEvent.OutputObject
    >;
    UpdatedPrimaryTokenDiscount: TypedContractEvent<
      UpdatedPrimaryTokenDiscountEvent.InputTuple,
      UpdatedPrimaryTokenDiscountEvent.OutputTuple,
      UpdatedPrimaryTokenDiscountEvent.OutputObject
    >;

    "UpdatedTokenAllowance(address,bool)": TypedContractEvent<
      UpdatedTokenAllowanceEvent.InputTuple,
      UpdatedTokenAllowanceEvent.OutputTuple,
      UpdatedTokenAllowanceEvent.OutputObject
    >;
    UpdatedTokenAllowance: TypedContractEvent<
      UpdatedTokenAllowanceEvent.InputTuple,
      UpdatedTokenAllowanceEvent.OutputTuple,
      UpdatedTokenAllowanceEvent.OutputObject
    >;

    "UpdatedVault(address)": TypedContractEvent<
      UpdatedVaultEvent.InputTuple,
      UpdatedVaultEvent.OutputTuple,
      UpdatedVaultEvent.OutputObject
    >;
    UpdatedVault: TypedContractEvent<
      UpdatedVaultEvent.InputTuple,
      UpdatedVaultEvent.OutputTuple,
      UpdatedVaultEvent.OutputObject
    >;
  };
}
