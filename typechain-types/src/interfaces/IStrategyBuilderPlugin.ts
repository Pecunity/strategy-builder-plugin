/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IStrategyBuilderPlugin {
  export type ConditionStruct = {
    conditionAddress: AddressLike;
    id: BigNumberish;
    result1: BigNumberish;
    result0: BigNumberish;
  };

  export type ConditionStructOutput = [
    conditionAddress: string,
    id: bigint,
    result1: bigint,
    result0: bigint
  ] & {
    conditionAddress: string;
    id: bigint;
    result1: bigint;
    result0: bigint;
  };

  export type ActionStruct = {
    selector: BytesLike;
    parameter: BytesLike;
    target: AddressLike;
    value: BigNumberish;
    actionType: BigNumberish;
  };

  export type ActionStructOutput = [
    selector: string,
    parameter: string,
    target: string,
    value: bigint,
    actionType: bigint
  ] & {
    selector: string;
    parameter: string;
    target: string;
    value: bigint;
    actionType: bigint;
  };

  export type StrategyStepStruct = {
    condition: IStrategyBuilderPlugin.ConditionStruct;
    actions: IStrategyBuilderPlugin.ActionStruct[];
  };

  export type StrategyStepStructOutput = [
    condition: IStrategyBuilderPlugin.ConditionStructOutput,
    actions: IStrategyBuilderPlugin.ActionStructOutput[]
  ] & {
    condition: IStrategyBuilderPlugin.ConditionStructOutput;
    actions: IStrategyBuilderPlugin.ActionStructOutput[];
  };

  export type StrategyStruct = {
    creator: AddressLike;
    steps: IStrategyBuilderPlugin.StrategyStepStruct[];
  };

  export type StrategyStructOutput = [
    creator: string,
    steps: IStrategyBuilderPlugin.StrategyStepStructOutput[]
  ] & {
    creator: string;
    steps: IStrategyBuilderPlugin.StrategyStepStructOutput[];
  };
}

export interface IStrategyBuilderPluginInterface extends Interface {
  getFunction(nameOrSignature: "addStrategy"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutomationActivated"
      | "AutomationDeleted"
      | "AutomationExecuted"
      | "StrategyAdded"
      | "StrategyDeleted"
      | "StrategyExecuted"
      | "StrategyStepExecuted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [
      BigNumberish,
      AddressLike,
      IStrategyBuilderPlugin.StrategyStepStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
}

export namespace AutomationActivatedEvent {
  export type InputTuple = [
    automationId: BigNumberish,
    strategyId: BigNumberish,
    condition: IStrategyBuilderPlugin.ConditionStruct,
    paymentToken: AddressLike,
    maxFeeAmount: BigNumberish
  ];
  export type OutputTuple = [
    automationId: bigint,
    strategyId: bigint,
    condition: IStrategyBuilderPlugin.ConditionStructOutput,
    paymentToken: string,
    maxFeeAmount: bigint
  ];
  export interface OutputObject {
    automationId: bigint;
    strategyId: bigint;
    condition: IStrategyBuilderPlugin.ConditionStructOutput;
    paymentToken: string;
    maxFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationDeletedEvent {
  export type InputTuple = [automationId: BigNumberish];
  export type OutputTuple = [automationId: bigint];
  export interface OutputObject {
    automationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationExecutedEvent {
  export type InputTuple = [
    automationId: BigNumberish,
    paymentToken: AddressLike,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    automationId: bigint,
    paymentToken: string,
    feeAmount: bigint
  ];
  export interface OutputObject {
    automationId: bigint;
    paymentToken: string;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAddedEvent {
  export type InputTuple = [
    strategyId: BigNumberish,
    creator: AddressLike,
    strategy: IStrategyBuilderPlugin.StrategyStruct
  ];
  export type OutputTuple = [
    strategyId: bigint,
    creator: string,
    strategy: IStrategyBuilderPlugin.StrategyStructOutput
  ];
  export interface OutputObject {
    strategyId: bigint;
    creator: string;
    strategy: IStrategyBuilderPlugin.StrategyStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyDeletedEvent {
  export type InputTuple = [strategyId: BigNumberish];
  export type OutputTuple = [strategyId: bigint];
  export interface OutputObject {
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyExecutedEvent {
  export type InputTuple = [strategyId: BigNumberish];
  export type OutputTuple = [strategyId: bigint];
  export interface OutputObject {
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyStepExecutedEvent {
  export type InputTuple = [
    strategyId: BigNumberish,
    stepId: BigNumberish,
    actions: IStrategyBuilderPlugin.ActionStruct[]
  ];
  export type OutputTuple = [
    strategyId: bigint,
    stepId: bigint,
    actions: IStrategyBuilderPlugin.ActionStructOutput[]
  ];
  export interface OutputObject {
    strategyId: bigint;
    stepId: bigint;
    actions: IStrategyBuilderPlugin.ActionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStrategyBuilderPlugin extends BaseContract {
  connect(runner?: ContractRunner | null): IStrategyBuilderPlugin;
  waitForDeployment(): Promise<this>;

  interface: IStrategyBuilderPluginInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStrategy: TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      steps: IStrategyBuilderPlugin.StrategyStepStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      steps: IStrategyBuilderPlugin.StrategyStepStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AutomationActivated"
  ): TypedContractEvent<
    AutomationActivatedEvent.InputTuple,
    AutomationActivatedEvent.OutputTuple,
    AutomationActivatedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationDeleted"
  ): TypedContractEvent<
    AutomationDeletedEvent.InputTuple,
    AutomationDeletedEvent.OutputTuple,
    AutomationDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationExecuted"
  ): TypedContractEvent<
    AutomationExecutedEvent.InputTuple,
    AutomationExecutedEvent.OutputTuple,
    AutomationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyAdded"
  ): TypedContractEvent<
    StrategyAddedEvent.InputTuple,
    StrategyAddedEvent.OutputTuple,
    StrategyAddedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyDeleted"
  ): TypedContractEvent<
    StrategyDeletedEvent.InputTuple,
    StrategyDeletedEvent.OutputTuple,
    StrategyDeletedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyExecuted"
  ): TypedContractEvent<
    StrategyExecutedEvent.InputTuple,
    StrategyExecutedEvent.OutputTuple,
    StrategyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyStepExecuted"
  ): TypedContractEvent<
    StrategyStepExecutedEvent.InputTuple,
    StrategyStepExecutedEvent.OutputTuple,
    StrategyStepExecutedEvent.OutputObject
  >;

  filters: {
    "AutomationActivated(uint16,uint16,tuple,address,uint256)": TypedContractEvent<
      AutomationActivatedEvent.InputTuple,
      AutomationActivatedEvent.OutputTuple,
      AutomationActivatedEvent.OutputObject
    >;
    AutomationActivated: TypedContractEvent<
      AutomationActivatedEvent.InputTuple,
      AutomationActivatedEvent.OutputTuple,
      AutomationActivatedEvent.OutputObject
    >;

    "AutomationDeleted(uint16)": TypedContractEvent<
      AutomationDeletedEvent.InputTuple,
      AutomationDeletedEvent.OutputTuple,
      AutomationDeletedEvent.OutputObject
    >;
    AutomationDeleted: TypedContractEvent<
      AutomationDeletedEvent.InputTuple,
      AutomationDeletedEvent.OutputTuple,
      AutomationDeletedEvent.OutputObject
    >;

    "AutomationExecuted(uint16,address,uint256)": TypedContractEvent<
      AutomationExecutedEvent.InputTuple,
      AutomationExecutedEvent.OutputTuple,
      AutomationExecutedEvent.OutputObject
    >;
    AutomationExecuted: TypedContractEvent<
      AutomationExecutedEvent.InputTuple,
      AutomationExecutedEvent.OutputTuple,
      AutomationExecutedEvent.OutputObject
    >;

    "StrategyAdded(uint16,address,tuple)": TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;
    StrategyAdded: TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;

    "StrategyDeleted(uint16)": TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;
    StrategyDeleted: TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;

    "StrategyExecuted(uint16)": TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;
    StrategyExecuted: TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;

    "StrategyStepExecuted(uint16,uint16,tuple[])": TypedContractEvent<
      StrategyStepExecutedEvent.InputTuple,
      StrategyStepExecutedEvent.OutputTuple,
      StrategyStepExecutedEvent.OutputObject
    >;
    StrategyStepExecuted: TypedContractEvent<
      StrategyStepExecutedEvent.InputTuple,
      StrategyStepExecutedEvent.OutputTuple,
      StrategyStepExecutedEvent.OutputObject
    >;
  };
}
