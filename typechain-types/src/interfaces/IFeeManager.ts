/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFeeManager {
  export type FeeInfoStruct = {
    value: BigNumberish;
    feeType: BigNumberish;
    calculator: AddressLike;
  };

  export type FeeInfoStructOutput = [
    value: bigint,
    feeType: bigint,
    calculator: string
  ] & { value: bigint; feeType: bigint; calculator: string };
}

export interface IFeeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateFee"
      | "calculateFeeForPostCallAction"
      | "calculateFeeForPreCallAction"
      | "calculateFeeInPaymentTokens"
      | "feeSettings"
      | "getBasisFeeToken"
      | "getFeeType"
      | "getFixedFee"
      | "handleFee"
      | "inkwell"
      | "octoInk"
      | "prepareForPayment"
      | "tokenDistributor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFeeForPostCallAction",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFeeForPreCallAction",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFeeInPaymentTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeSettings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasisFeeToken",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFee",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "inkwell", values?: undefined): string;
  encodeFunctionData(functionFragment: "octoInk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareForPayment",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDistributor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFeeForPostCallAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFeeForPreCallAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFeeInPaymentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasisFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inkwell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "octoInk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareForPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDistributor",
    data: BytesLike
  ): Result;
}

export interface IFeeManager extends BaseContract {
  connect(runner?: ContractRunner | null): IFeeManager;
  waitForDeployment(): Promise<this>;

  interface: IFeeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateFee: TypedContractMethod<
    [basisToken: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  calculateFeeForPostCallAction: TypedContractMethod<
    [
      functionSelector: BytesLike,
      basisFeeToken: AddressLike,
      basisTokenAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  calculateFeeForPreCallAction: TypedContractMethod<
    [functionSelector: BytesLike, parameter: BytesLike],
    [bigint],
    "view"
  >;

  calculateFeeInPaymentTokens: TypedContractMethod<
    [paymentToken: AddressLike, fee: BigNumberish],
    [bigint],
    "view"
  >;

  feeSettings: TypedContractMethod<
    [functionSelector: BytesLike],
    [IFeeManager.FeeInfoStructOutput],
    "view"
  >;

  getBasisFeeToken: TypedContractMethod<
    [functionSelector: BytesLike, parameter: BytesLike],
    [string],
    "view"
  >;

  getFeeType: TypedContractMethod<
    [functionSelector: BytesLike],
    [bigint],
    "view"
  >;

  getFixedFee: TypedContractMethod<
    [functionSelector: BytesLike],
    [bigint],
    "view"
  >;

  handleFee: TypedContractMethod<
    [
      feeAmount: BigNumberish,
      executor: AddressLike,
      creator: AddressLike,
      paymentToken: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  inkwell: TypedContractMethod<[], [string], "view">;

  octoInk: TypedContractMethod<[], [string], "view">;

  prepareForPayment: TypedContractMethod<
    [feeAmount: BigNumberish, paymentToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  tokenDistributor: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateFee"
  ): TypedContractMethod<
    [basisToken: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateFeeForPostCallAction"
  ): TypedContractMethod<
    [
      functionSelector: BytesLike,
      basisFeeToken: AddressLike,
      basisTokenAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateFeeForPreCallAction"
  ): TypedContractMethod<
    [functionSelector: BytesLike, parameter: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateFeeInPaymentTokens"
  ): TypedContractMethod<
    [paymentToken: AddressLike, fee: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeSettings"
  ): TypedContractMethod<
    [functionSelector: BytesLike],
    [IFeeManager.FeeInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasisFeeToken"
  ): TypedContractMethod<
    [functionSelector: BytesLike, parameter: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeType"
  ): TypedContractMethod<[functionSelector: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFixedFee"
  ): TypedContractMethod<[functionSelector: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleFee"
  ): TypedContractMethod<
    [
      feeAmount: BigNumberish,
      executor: AddressLike,
      creator: AddressLike,
      paymentToken: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "inkwell"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "octoInk"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "prepareForPayment"
  ): TypedContractMethod<
    [feeAmount: BigNumberish, paymentToken: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenDistributor"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
