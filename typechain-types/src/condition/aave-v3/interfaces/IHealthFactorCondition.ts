/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../../common";

export declare namespace IHealthFactorCondition {
  export type ConditionStruct = {
    healthFactor: BigNumberish;
    comparison: BigNumberish;
    updateable: boolean;
  };

  export type ConditionStructOutput = [
    healthFactor: bigint,
    comparison: bigint,
    updateable: boolean
  ] & { healthFactor: bigint; comparison: bigint; updateable: boolean };
}

export interface IHealthFactorConditionInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "ConditionAdded" | "ConditionDeleted"
  ): EventFragment;
}

export namespace ConditionAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    wallet: AddressLike,
    condition: IHealthFactorCondition.ConditionStruct
  ];
  export type OutputTuple = [
    id: bigint,
    wallet: string,
    condition: IHealthFactorCondition.ConditionStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    wallet: string;
    condition: IHealthFactorCondition.ConditionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConditionDeletedEvent {
  export type InputTuple = [id: BigNumberish, wallet: AddressLike];
  export type OutputTuple = [id: bigint, wallet: string];
  export interface OutputObject {
    id: bigint;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IHealthFactorCondition extends BaseContract {
  connect(runner?: ContractRunner | null): IHealthFactorCondition;
  waitForDeployment(): Promise<this>;

  interface: IHealthFactorConditionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ConditionAdded"
  ): TypedContractEvent<
    ConditionAddedEvent.InputTuple,
    ConditionAddedEvent.OutputTuple,
    ConditionAddedEvent.OutputObject
  >;
  getEvent(
    key: "ConditionDeleted"
  ): TypedContractEvent<
    ConditionDeletedEvent.InputTuple,
    ConditionDeletedEvent.OutputTuple,
    ConditionDeletedEvent.OutputObject
  >;

  filters: {
    "ConditionAdded(uint32,address,tuple)": TypedContractEvent<
      ConditionAddedEvent.InputTuple,
      ConditionAddedEvent.OutputTuple,
      ConditionAddedEvent.OutputObject
    >;
    ConditionAdded: TypedContractEvent<
      ConditionAddedEvent.InputTuple,
      ConditionAddedEvent.OutputTuple,
      ConditionAddedEvent.OutputObject
    >;

    "ConditionDeleted(uint32,address)": TypedContractEvent<
      ConditionDeletedEvent.InputTuple,
      ConditionDeletedEvent.OutputTuple,
      ConditionDeletedEvent.OutputObject
    >;
    ConditionDeleted: TypedContractEvent<
      ConditionDeletedEvent.InputTuple,
      ConditionDeletedEvent.OutputTuple,
      ConditionDeletedEvent.OutputObject
    >;
  };
}
