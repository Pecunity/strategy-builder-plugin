/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ManifestExternalCallPermissionStruct = {
  externalAddress: AddressLike;
  permitAnySelector: boolean;
  selectors: BytesLike[];
};

export type ManifestExternalCallPermissionStructOutput = [
  externalAddress: string,
  permitAnySelector: boolean,
  selectors: string[]
] & {
  externalAddress: string;
  permitAnySelector: boolean;
  selectors: string[];
};

export type ManifestFunctionStruct = {
  functionType: BigNumberish;
  functionId: BigNumberish;
  dependencyIndex: BigNumberish;
};

export type ManifestFunctionStructOutput = [
  functionType: bigint,
  functionId: bigint,
  dependencyIndex: bigint
] & { functionType: bigint; functionId: bigint; dependencyIndex: bigint };

export type ManifestAssociatedFunctionStruct = {
  executionSelector: BytesLike;
  associatedFunction: ManifestFunctionStruct;
};

export type ManifestAssociatedFunctionStructOutput = [
  executionSelector: string,
  associatedFunction: ManifestFunctionStructOutput
] & {
  executionSelector: string;
  associatedFunction: ManifestFunctionStructOutput;
};

export type ManifestExecutionHookStruct = {
  executionSelector: BytesLike;
  preExecHook: ManifestFunctionStruct;
  postExecHook: ManifestFunctionStruct;
};

export type ManifestExecutionHookStructOutput = [
  executionSelector: string,
  preExecHook: ManifestFunctionStructOutput,
  postExecHook: ManifestFunctionStructOutput
] & {
  executionSelector: string;
  preExecHook: ManifestFunctionStructOutput;
  postExecHook: ManifestFunctionStructOutput;
};

export type PluginManifestStruct = {
  interfaceIds: BytesLike[];
  dependencyInterfaceIds: BytesLike[];
  executionFunctions: BytesLike[];
  permittedExecutionSelectors: BytesLike[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStruct[];
  userOpValidationFunctions: ManifestAssociatedFunctionStruct[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStruct[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStruct[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStruct[];
  executionHooks: ManifestExecutionHookStruct[];
};

export type PluginManifestStructOutput = [
  interfaceIds: string[],
  dependencyInterfaceIds: string[],
  executionFunctions: string[],
  permittedExecutionSelectors: string[],
  permitAnyExternalAddress: boolean,
  canSpendNativeToken: boolean,
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[],
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[],
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[],
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[],
  executionHooks: ManifestExecutionHookStructOutput[]
] & {
  interfaceIds: string[];
  dependencyInterfaceIds: string[];
  executionFunctions: string[];
  permittedExecutionSelectors: string[];
  permitAnyExternalAddress: boolean;
  canSpendNativeToken: boolean;
  permittedExternalCalls: ManifestExternalCallPermissionStructOutput[];
  userOpValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  runtimeValidationFunctions: ManifestAssociatedFunctionStructOutput[];
  preUserOpValidationHooks: ManifestAssociatedFunctionStructOutput[];
  preRuntimeValidationHooks: ManifestAssociatedFunctionStructOutput[];
  executionHooks: ManifestExecutionHookStructOutput[];
};

export type SelectorPermissionStruct = {
  functionSelector: BytesLike;
  permissionDescription: string;
};

export type SelectorPermissionStructOutput = [
  functionSelector: string,
  permissionDescription: string
] & { functionSelector: string; permissionDescription: string };

export type PluginMetadataStruct = {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStruct[];
};

export type PluginMetadataStructOutput = [
  name: string,
  version: string,
  author: string,
  permissionDescriptors: SelectorPermissionStructOutput[]
] & {
  name: string;
  version: string;
  author: string;
  permissionDescriptors: SelectorPermissionStructOutput[];
};

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export declare namespace IStrategyBuilderPlugin {
  export type ActionStruct = {
    selector: BytesLike;
    parameter: BytesLike;
    target: AddressLike;
    value: BigNumberish;
    actionType: BigNumberish;
  };

  export type ActionStructOutput = [
    selector: string,
    parameter: string,
    target: string,
    value: bigint,
    actionType: bigint
  ] & {
    selector: string;
    parameter: string;
    target: string;
    value: bigint;
    actionType: bigint;
  };

  export type ConditionStruct = {
    conditionAddress: AddressLike;
    id: BigNumberish;
    result1: BigNumberish;
    result0: BigNumberish;
  };

  export type ConditionStructOutput = [
    conditionAddress: string,
    id: bigint,
    result1: bigint,
    result0: bigint
  ] & {
    conditionAddress: string;
    id: bigint;
    result1: bigint;
    result0: bigint;
  };

  export type StrategyStepStruct = {
    condition: IStrategyBuilderPlugin.ConditionStruct;
    actions: IStrategyBuilderPlugin.ActionStruct[];
  };

  export type StrategyStepStructOutput = [
    condition: IStrategyBuilderPlugin.ConditionStructOutput,
    actions: IStrategyBuilderPlugin.ActionStructOutput[]
  ] & {
    condition: IStrategyBuilderPlugin.ConditionStructOutput;
    actions: IStrategyBuilderPlugin.ActionStructOutput[];
  };

  export type StrategyStruct = {
    creator: AddressLike;
    steps: IStrategyBuilderPlugin.StrategyStepStruct[];
  };

  export type StrategyStructOutput = [
    creator: string,
    steps: IStrategyBuilderPlugin.StrategyStepStructOutput[]
  ] & {
    creator: string;
    steps: IStrategyBuilderPlugin.StrategyStepStructOutput[];
  };

  export type AutomationStruct = {
    condition: IStrategyBuilderPlugin.ConditionStruct;
    strategyId: BigNumberish;
    paymentToken: AddressLike;
    maxFeeAmount: BigNumberish;
  };

  export type AutomationStructOutput = [
    condition: IStrategyBuilderPlugin.ConditionStructOutput,
    strategyId: bigint,
    paymentToken: string,
    maxFeeAmount: bigint
  ] & {
    condition: IStrategyBuilderPlugin.ConditionStructOutput;
    strategyId: bigint;
    paymentToken: string;
    maxFeeAmount: bigint;
  };
}

export interface StrategyBuilderPluginInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AUTHOR"
      | "NAME"
      | "VERSION"
      | "automation"
      | "createAutomation"
      | "createStrategy"
      | "deleteAutomation"
      | "deleteStrategy"
      | "executeAutomation"
      | "executeStrategy"
      | "feeController"
      | "feeHandler"
      | "getStorageId"
      | "onInstall"
      | "onUninstall"
      | "pluginManifest"
      | "pluginMetadata"
      | "postExecutionHook"
      | "preExecutionHook"
      | "preRuntimeValidationHook"
      | "preUserOpValidationHook"
      | "runtimeValidationFunction"
      | "strategy"
      | "supportsInterface"
      | "userOpValidationFunction"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionExecuted"
      | "AutomationCreated"
      | "AutomationDeleted"
      | "AutomationExecuted"
      | "StrategyCreated"
      | "StrategyDeleted"
      | "StrategyExecuted"
      | "StrategyStepExecuted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "AUTHOR", values?: undefined): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "automation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAutomation",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      IStrategyBuilderPlugin.ConditionStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrategy",
    values: [
      BigNumberish,
      AddressLike,
      IStrategyBuilderPlugin.StrategyStepStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAutomation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAutomation",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onInstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUninstall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginManifest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pluginMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postExecutionHook",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preExecutionHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRuntimeValidationHook",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preUserOpValidationHook",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "runtimeValidationFunction",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOpValidationFunction",
    values: [BigNumberish, UserOperationStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "AUTHOR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "automation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAutomation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeHandler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStorageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onInstall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onUninstall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginManifest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pluginMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preExecutionHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRuntimeValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preUserOpValidationHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runtimeValidationFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOpValidationFunction",
    data: BytesLike
  ): Result;
}

export namespace ActionExecutedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    action: IStrategyBuilderPlugin.ActionStruct
  ];
  export type OutputTuple = [
    wallet: string,
    action: IStrategyBuilderPlugin.ActionStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    action: IStrategyBuilderPlugin.ActionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationCreatedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    automationId: BigNumberish,
    strategyId: BigNumberish,
    condition: IStrategyBuilderPlugin.ConditionStruct,
    paymentToken: AddressLike,
    maxFeeAmount: BigNumberish
  ];
  export type OutputTuple = [
    wallet: string,
    automationId: bigint,
    strategyId: bigint,
    condition: IStrategyBuilderPlugin.ConditionStructOutput,
    paymentToken: string,
    maxFeeAmount: bigint
  ];
  export interface OutputObject {
    wallet: string;
    automationId: bigint;
    strategyId: bigint;
    condition: IStrategyBuilderPlugin.ConditionStructOutput;
    paymentToken: string;
    maxFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationDeletedEvent {
  export type InputTuple = [wallet: AddressLike, automationId: BigNumberish];
  export type OutputTuple = [wallet: string, automationId: bigint];
  export interface OutputObject {
    wallet: string;
    automationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AutomationExecutedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    automationId: BigNumberish,
    paymentToken: AddressLike,
    feeInToken: BigNumberish,
    feeInUSD: BigNumberish
  ];
  export type OutputTuple = [
    wallet: string,
    automationId: bigint,
    paymentToken: string,
    feeInToken: bigint,
    feeInUSD: bigint
  ];
  export interface OutputObject {
    wallet: string;
    automationId: bigint;
    paymentToken: string;
    feeInToken: bigint;
    feeInUSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyCreatedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    strategyId: BigNumberish,
    creator: AddressLike,
    strategy: IStrategyBuilderPlugin.StrategyStruct
  ];
  export type OutputTuple = [
    wallet: string,
    strategyId: bigint,
    creator: string,
    strategy: IStrategyBuilderPlugin.StrategyStructOutput
  ];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
    creator: string;
    strategy: IStrategyBuilderPlugin.StrategyStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyDeletedEvent {
  export type InputTuple = [wallet: AddressLike, strategyId: BigNumberish];
  export type OutputTuple = [wallet: string, strategyId: bigint];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyExecutedEvent {
  export type InputTuple = [wallet: AddressLike, strategyId: BigNumberish];
  export type OutputTuple = [wallet: string, strategyId: bigint];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyStepExecutedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    strategyId: BigNumberish,
    stepId: BigNumberish,
    actions: IStrategyBuilderPlugin.ActionStruct[]
  ];
  export type OutputTuple = [
    wallet: string,
    strategyId: bigint,
    stepId: bigint,
    actions: IStrategyBuilderPlugin.ActionStructOutput[]
  ];
  export interface OutputObject {
    wallet: string;
    strategyId: bigint;
    stepId: bigint;
    actions: IStrategyBuilderPlugin.ActionStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrategyBuilderPlugin extends BaseContract {
  connect(runner?: ContractRunner | null): StrategyBuilderPlugin;
  waitForDeployment(): Promise<this>;

  interface: StrategyBuilderPluginInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AUTHOR: TypedContractMethod<[], [string], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  automation: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderPlugin.AutomationStructOutput],
    "view"
  >;

  createAutomation: TypedContractMethod<
    [
      id: BigNumberish,
      strategyId: BigNumberish,
      paymentToken: AddressLike,
      maxFeeInUSD: BigNumberish,
      condition: IStrategyBuilderPlugin.ConditionStruct
    ],
    [void],
    "nonpayable"
  >;

  createStrategy: TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      steps: IStrategyBuilderPlugin.StrategyStepStruct[]
    ],
    [void],
    "nonpayable"
  >;

  deleteAutomation: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteStrategy: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  executeAutomation: TypedContractMethod<
    [id: BigNumberish, wallet: AddressLike, beneficary: AddressLike],
    [void],
    "nonpayable"
  >;

  executeStrategy: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeController: TypedContractMethod<[], [string], "view">;

  feeHandler: TypedContractMethod<[], [string], "view">;

  getStorageId: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [string],
    "view"
  >;

  onInstall: TypedContractMethod<[arg0: BytesLike], [void], "view">;

  onUninstall: TypedContractMethod<[arg0: BytesLike], [void], "view">;

  pluginManifest: TypedContractMethod<[], [PluginManifestStructOutput], "view">;

  pluginMetadata: TypedContractMethod<[], [PluginMetadataStructOutput], "view">;

  postExecutionHook: TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;

  preExecutionHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  preRuntimeValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  preUserOpValidationHook: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  runtimeValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  strategy: TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderPlugin.StrategyStructOutput],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  userOpValidationFunction: TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AUTHOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "automation"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderPlugin.AutomationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "createAutomation"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      strategyId: BigNumberish,
      paymentToken: AddressLike,
      maxFeeInUSD: BigNumberish,
      condition: IStrategyBuilderPlugin.ConditionStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createStrategy"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      creator: AddressLike,
      steps: IStrategyBuilderPlugin.StrategyStepStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteAutomation"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteStrategy"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeAutomation"
  ): TypedContractMethod<
    [id: BigNumberish, wallet: AddressLike, beneficary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeStrategy"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStorageId"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onInstall"
  ): TypedContractMethod<[arg0: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "onUninstall"
  ): TypedContractMethod<[arg0: BytesLike], [void], "view">;
  getFunction(
    nameOrSignature: "pluginManifest"
  ): TypedContractMethod<[], [PluginManifestStructOutput], "view">;
  getFunction(
    nameOrSignature: "pluginMetadata"
  ): TypedContractMethod<[], [PluginMetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "postExecutionHook"
  ): TypedContractMethod<
    [functionId: BigNumberish, preExecHookData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preExecutionHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preRuntimeValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "preUserOpValidationHook"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "runtimeValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      sender: AddressLike,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategy"
  ): TypedContractMethod<
    [wallet: AddressLike, id: BigNumberish],
    [IStrategyBuilderPlugin.StrategyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "userOpValidationFunction"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      userOp: UserOperationStruct,
      userOpHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ActionExecuted"
  ): TypedContractEvent<
    ActionExecutedEvent.InputTuple,
    ActionExecutedEvent.OutputTuple,
    ActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationCreated"
  ): TypedContractEvent<
    AutomationCreatedEvent.InputTuple,
    AutomationCreatedEvent.OutputTuple,
    AutomationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationDeleted"
  ): TypedContractEvent<
    AutomationDeletedEvent.InputTuple,
    AutomationDeletedEvent.OutputTuple,
    AutomationDeletedEvent.OutputObject
  >;
  getEvent(
    key: "AutomationExecuted"
  ): TypedContractEvent<
    AutomationExecutedEvent.InputTuple,
    AutomationExecutedEvent.OutputTuple,
    AutomationExecutedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyCreated"
  ): TypedContractEvent<
    StrategyCreatedEvent.InputTuple,
    StrategyCreatedEvent.OutputTuple,
    StrategyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyDeleted"
  ): TypedContractEvent<
    StrategyDeletedEvent.InputTuple,
    StrategyDeletedEvent.OutputTuple,
    StrategyDeletedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyExecuted"
  ): TypedContractEvent<
    StrategyExecutedEvent.InputTuple,
    StrategyExecutedEvent.OutputTuple,
    StrategyExecutedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyStepExecuted"
  ): TypedContractEvent<
    StrategyStepExecutedEvent.InputTuple,
    StrategyStepExecutedEvent.OutputTuple,
    StrategyStepExecutedEvent.OutputObject
  >;

  filters: {
    "ActionExecuted(address,tuple)": TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;
    ActionExecuted: TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;

    "AutomationCreated(address,uint32,uint32,tuple,address,uint256)": TypedContractEvent<
      AutomationCreatedEvent.InputTuple,
      AutomationCreatedEvent.OutputTuple,
      AutomationCreatedEvent.OutputObject
    >;
    AutomationCreated: TypedContractEvent<
      AutomationCreatedEvent.InputTuple,
      AutomationCreatedEvent.OutputTuple,
      AutomationCreatedEvent.OutputObject
    >;

    "AutomationDeleted(address,uint32)": TypedContractEvent<
      AutomationDeletedEvent.InputTuple,
      AutomationDeletedEvent.OutputTuple,
      AutomationDeletedEvent.OutputObject
    >;
    AutomationDeleted: TypedContractEvent<
      AutomationDeletedEvent.InputTuple,
      AutomationDeletedEvent.OutputTuple,
      AutomationDeletedEvent.OutputObject
    >;

    "AutomationExecuted(address,uint32,address,uint256,uint256)": TypedContractEvent<
      AutomationExecutedEvent.InputTuple,
      AutomationExecutedEvent.OutputTuple,
      AutomationExecutedEvent.OutputObject
    >;
    AutomationExecuted: TypedContractEvent<
      AutomationExecutedEvent.InputTuple,
      AutomationExecutedEvent.OutputTuple,
      AutomationExecutedEvent.OutputObject
    >;

    "StrategyCreated(address,uint32,address,tuple)": TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;
    StrategyCreated: TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;

    "StrategyDeleted(address,uint32)": TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;
    StrategyDeleted: TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;

    "StrategyExecuted(address,uint32)": TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;
    StrategyExecuted: TypedContractEvent<
      StrategyExecutedEvent.InputTuple,
      StrategyExecutedEvent.OutputTuple,
      StrategyExecutedEvent.OutputObject
    >;

    "StrategyStepExecuted(address,uint32,uint32,tuple[])": TypedContractEvent<
      StrategyStepExecutedEvent.InputTuple,
      StrategyStepExecutedEvent.OutputTuple,
      StrategyStepExecutedEvent.OutputObject
    >;
    StrategyStepExecuted: TypedContractEvent<
      StrategyStepExecutedEvent.InputTuple,
      StrategyStepExecutedEvent.OutputTuple,
      StrategyStepExecutedEvent.OutputObject
    >;
  };
}
