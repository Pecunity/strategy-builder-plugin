/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockCondition,
  MockConditionInterface,
} from "../../../../src/test/mocks/MockCondition";

const _abi = [
  {
    inputs: [],
    name: "BaseCondition__ConditionIsInUse",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "action",
        type: "uint16",
      },
    ],
    name: "actionValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "action",
        type: "uint16",
      },
    ],
    name: "addAutomationToCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "result",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
        ],
        internalType: "struct MockCondition.Condition",
        name: "condition",
        type: "tuple",
      },
    ],
    name: "addCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "strategy",
        type: "uint16",
      },
    ],
    name: "addStrategyToCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
    ],
    name: "automations",
    outputs: [
      {
        internalType: "uint16[]",
        name: "",
        type: "uint16[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
    ],
    name: "checkCondition",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_id",
        type: "uint16",
      },
    ],
    name: "conditionActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_id",
        type: "uint16",
      },
    ],
    name: "deleteCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "isUpdateable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "automation",
        type: "uint16",
      },
    ],
    name: "removeAutomationFromCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "strategy",
        type: "uint16",
      },
    ],
    name: "removeStrategyFromCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
    ],
    name: "strategies",
    outputs: [
      {
        internalType: "uint16[]",
        name: "",
        type: "uint16[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "strategy",
        type: "uint16",
      },
    ],
    name: "strategyValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    name: "updateCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061162c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639aaf7dd31161008c578063b77ecaf111610066578063b77ecaf1146102a7578063c01e7488146102d7578063dce9821414610307578063e49ffc6b14610337576100ea565b80639aaf7dd31461022b5780639f7fd9281461025b578063a95f105d14610277576100ea565b80633d392a4b116100c85780633d392a4b1461016b578063412140b51461019b5780634680ecca146101cb57806379cae4f4146101fb576100ea565b80630556540a146100ef5780630ebb9c341461011f578063372dce071461013b575b600080fd5b610109600480360381019061010491906110d8565b610367565b6040516101169190611120565b60405180910390f35b610139600480360381019061013491906110d8565b61036e565b005b6101556004803603810190610150919061113b565b61046c565b6040516101629190611120565b60405180910390f35b610185600480360381019061018091906111d9565b6106ec565b60405161019291906112d7565b60405180910390f35b6101b560048036038101906101b091906111d9565b6107c5565b6040516101c29190611120565b60405180910390f35b6101e560048036038101906101e091906111d9565b6107cd565b6040516101f291906112d7565b60405180910390f35b6102156004803603810190610210919061113b565b6108a5565b6040516102229190611120565b60405180910390f35b6102456004803603810190610240919061113b565b610a2a565b6040516102529190611120565b60405180910390f35b6102756004803603810190610270919061131d565b610ca9565b005b610291600480360381019061028c919061113b565b610d15565b60405161029e9190611120565b60405180910390f35b6102c160048036038101906102bc91906111d9565b610e99565b6040516102ce9190611120565b60405180910390f35b6102f160048036038101906102ec91906111d9565b610ead565b6040516102fe9190611379565b60405180910390f35b610321600480360381019061031c9190611394565b610f2e565b60405161032e9190611120565b60405180910390f35b610351600480360381019061034c9190611394565b610faa565b60405161035e9190611120565b60405180910390f35b6000919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff168152602001908152602001600020805490501180610432575060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002080549050115b15610469576040517f846e233f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002090506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002060009054906101000a900461ffff1690508361ffff16828261ffff16815481106105505761054f6113e7565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff1614610588576000925050506106e6565b60006001838054905061059b919061144f565b90508161ffff16811461069f5760008382815481106105bd576105bc6113e7565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff16905082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555080848461ffff168154811061066e5761066d6113e7565b5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff160217905550505b828054806106b0576106af611483565b5b60019003818190600052602060002090601091828204019190066002026101000a81549061ffff02191690559055600193505050505b92915050565b6060600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156107b857602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161077f5790505b5050505050905092915050565b600092915050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561089857602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161085f5790505b5050505050905092915050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff168152602001908152602001600020805490506109ae919061144f565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055506001905092915050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002090506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002060009054906101000a900461ffff1690508361ffff16828261ffff1681548110610b0d57610b0c6113e7565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff1614610b4557600092505050610ca3565b600060018380549050610b58919061144f565b90508161ffff168114610c5c576000838281548110610b7a57610b796113e7565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff16905082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff16021790555080848461ffff1681548110610c2b57610c2a6113e7565b5b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff160217905550505b82805480610c6d57610c6c611483565b5b60019003818190600052602060002090601091828204019190066002026101000a81549061ffff02191690559055600193505050505b92915050565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000208181610d0e91906115e8565b9050505050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff16021790555060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008561ffff1661ffff16815260200190815260200160002080549050610e1d919061144f565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060006101000a81548161ffff021916908361ffff1602179055506001905092915050565b6000610ea58383611026565b905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002060000160009054906101000a900460ff16610f23576000610f26565b60015b905092915050565b60008261ffff16600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060009054906101000a900461ffff1661ffff161490509392505050565b60008261ffff16600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008461ffff1661ffff16815260200190815260200160002060009054906101000a900461ffff1661ffff161490509392505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008361ffff1661ffff16815260200190815260200160002060000160019054906101000a900460ff16905092915050565b600080fd5b600061ffff82169050919050565b6110b58161109e565b81146110c057600080fd5b50565b6000813590506110d2816110ac565b92915050565b6000602082840312156110ee576110ed611099565b5b60006110fc848285016110c3565b91505092915050565b60008115159050919050565b61111a81611105565b82525050565b60006020820190506111356000830184611111565b92915050565b6000806040838503121561115257611151611099565b5b6000611160858286016110c3565b9250506020611171858286016110c3565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111a68261117b565b9050919050565b6111b68161119b565b81146111c157600080fd5b50565b6000813590506111d3816111ad565b92915050565b600080604083850312156111f0576111ef611099565b5b60006111fe858286016111c4565b925050602061120f858286016110c3565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61124e8161109e565b82525050565b60006112608383611245565b60208301905092915050565b6000602082019050919050565b600061128482611219565b61128e8185611224565b935061129983611235565b8060005b838110156112ca5781516112b18882611254565b97506112bc8361126c565b92505060018101905061129d565b5085935050505092915050565b600060208201905081810360008301526112f18184611279565b905092915050565b600080fd5b600060408284031215611314576113136112f9565b5b81905092915050565b6000806060838503121561133457611333611099565b5b6000611342858286016110c3565b9250506020611353858286016112fe565b9150509250929050565b600060ff82169050919050565b6113738161135d565b82525050565b600060208201905061138e600083018461136a565b92915050565b6000806000606084860312156113ad576113ac611099565b5b60006113bb868287016111c4565b93505060206113cc868287016110c3565b92505060406113dd868287016110c3565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061145a82611416565b915061146583611416565b925082820390508181111561147d5761147c611420565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6114bb81611105565b81146114c657600080fd5b50565b600081356114d6816114b2565b80915050919050565b60008160001b9050919050565b600060ff6114f9846114df565b9350801983169250808416831791505092915050565b600061151a82611105565b9050919050565b6000819050919050565b6115348261150f565b61154761154082611521565b83546114ec565b8255505050565b60008160081b9050919050565b600061ff006115698461154e565b9350801983169250808416831791505092915050565b6115888261150f565b61159b61159482611521565b835461155b565b8255505050565b6000810160008301806115b4816114c9565b90506115c0818461152b565b5050506000810160208301806115d5816114c9565b90506115e1818461157f565b5050505050565b6115f282826115a2565b505056fea2646970667358221220bde44ef3e45f0ab01c3a1a70177789e9a83d3eb3623cf13b1b77dfd7e55db6ad64736f6c63430008180033";

type MockConditionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockConditionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCondition__factory extends ContractFactory {
  constructor(...args: MockConditionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockCondition & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockCondition__factory {
    return super.connect(runner) as MockCondition__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockConditionInterface {
    return new Interface(_abi) as MockConditionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockCondition {
    return new Contract(address, _abi, runner) as unknown as MockCondition;
  }
}
