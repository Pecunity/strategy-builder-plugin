/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  UniswapV2Base,
  UniswapV2BaseInterface,
} from "../../../../src/actions/uniswap-v2/UniswapV2Base";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FailedToApproveTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenGetterID",
    type: "error",
  },
  {
    inputs: [],
    name: "NoValidPercentageAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoZeroAmountValid",
    type: "error",
  },
  {
    inputs: [],
    name: "NotZeroAmountForBothTokensAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolPairDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "DELTA_DEADLINE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERCENTAGE_FACTOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "_getSwapAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getTokenForSelector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    name: "tokenGetterIDs",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapV2RouterAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161060a38038061060a83398101604081905261002f9161012c565b6001600160a01b0381166080819052604080516315ab88c960e31b8152905163ad5c4648916004808201926020929091908290030181865afa158015610079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061009d919061012c565b6001600160a01b031660c0816001600160a01b0316815250506080516001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011a919061012c565b6001600160a01b031660a0525061015c565b60006020828403121561013e57600080fd5b81516001600160a01b038116811461015557600080fd5b9392505050565b60805160a05160c051610479610191600039600061010501526000610161015260008181609a01526101a401526104796000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063b1d6136811610066578063b1d6136814610127578063c45a01551461015c578063ecc861d014610183578063ee01e5e714610196578063f887ea401461019f57600080fd5b80634a377e1d146100985780635581161b146100d7578063617b595a146100ea578063ad5c464814610100575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6100ba6100e53660046102cf565b6101c6565b6100f2601e81565b6040519081526020016100ce565b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b61014a610135366004610391565b60006020819052908152604090205460ff1681565b60405160ff90911681526020016100ce565b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b6100f26101913660046103ac565b6101cf565b6100f26103e881565b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b60005b92915050565b60006107ca6101e0846107cd6103e4565b6102166101f085623cda206103e4565b6101fd87623cda296103e4565b61020791906103fb565b61021190876103e4565b610231565b610220919061040e565b61022a9190610421565b9392505050565b60006003821115610292575080600061024b600283610421565b6102569060016103fb565b90505b8181101561028c579050806002816102718186610421565b61027b91906103fb565b6102859190610421565b9050610259565b50919050565b811561029c575060015b919050565b80356001600160e01b03198116811461029c57600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156102e257600080fd5b6102eb836102a1565b9150602083013567ffffffffffffffff8082111561030857600080fd5b818501915085601f83011261031c57600080fd5b81358181111561032e5761032e6102b9565b604051601f8201601f19908116603f01168101908382118183101715610356576103566102b9565b8160405282815288602084870101111561036f57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156103a357600080fd5b61022a826102a1565b600080604083850312156103bf57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176101c9576101c96103ce565b808201808211156101c9576101c96103ce565b818103818111156101c9576101c96103ce565b60008261043e57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c73590d59d36a109494c31bb814a1ebd3f61f4d168840b55257b6aa55d2720a564736f6c63430008180033";

type UniswapV2BaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2BaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2Base__factory extends ContractFactory {
  constructor(...args: UniswapV2BaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_router, overrides || {});
  }
  override deploy(
    _router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_router, overrides || {}) as Promise<
      UniswapV2Base & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UniswapV2Base__factory {
    return super.connect(runner) as UniswapV2Base__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2BaseInterface {
    return new Interface(_abi) as UniswapV2BaseInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UniswapV2Base {
    return new Contract(address, _abi, runner) as unknown as UniswapV2Base;
  }
}
