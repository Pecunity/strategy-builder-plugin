/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IUniswapV2Base,
  IUniswapV2BaseInterface,
} from "../../../../../src/actions/uniswap-v2/interfaces/IUniswapV2Base";

const _abi = [
  {
    inputs: [],
    name: "FailedToApproveTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenGetterID",
    type: "error",
  },
  {
    inputs: [],
    name: "NoValidPercentageAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "NoZeroAmountValid",
    type: "error",
  },
  {
    inputs: [],
    name: "NotZeroAmountForBothTokensAllowed",
    type: "error",
  },
  {
    inputs: [],
    name: "PoolPairDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "getTokenForSelector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IUniswapV2Base__factory {
  static readonly abi = _abi;
  static createInterface(): IUniswapV2BaseInterface {
    return new Interface(_abi) as IUniswapV2BaseInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IUniswapV2Base {
    return new Contract(address, _abi, runner) as unknown as IUniswapV2Base;
  }
}
