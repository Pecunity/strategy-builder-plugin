/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IActionRegistry,
  IActionRegistryInterface,
} from "../../../contracts/interfaces/IActionRegistry";

const _abi = [
  {
    inputs: [],
    name: "ActionNotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddressNotValid",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "action",
        type: "address",
      },
    ],
    name: "ActionAllowed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "action",
        type: "address",
      },
    ],
    name: "ActionRevoked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "action",
        type: "address",
      },
    ],
    name: "allowAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "action",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "action",
        type: "address",
      },
    ],
    name: "revokeAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IActionRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IActionRegistryInterface {
    return new Interface(_abi) as IActionRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IActionRegistry {
    return new Contract(address, _abi, runner) as unknown as IActionRegistry;
  }
}
