/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockCondition,
  MockConditionInterface,
} from "../../../../contracts/test/mocks/MockCondition";

const _abi = [
  {
    inputs: [],
    name: "BaseCondition__ConditionIsInUse",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "action",
        type: "uint32",
      },
    ],
    name: "addAutomationToCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "result",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
        ],
        internalType: "struct MockCondition.Condition",
        name: "condition",
        type: "tuple",
      },
    ],
    name: "addCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "strategy",
        type: "uint32",
      },
    ],
    name: "addStrategyToCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "action",
        type: "uint32",
      },
    ],
    name: "automationValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "automations",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "checkCondition",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_id",
        type: "uint32",
      },
    ],
    name: "conditionActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_id",
        type: "uint32",
      },
    ],
    name: "deleteCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "isUpdateable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "automation",
        type: "uint32",
      },
    ],
    name: "removeAutomationFromCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "strategy",
        type: "uint32",
      },
    ],
    name: "removeStrategyFromCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "strategies",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "strategy",
        type: "uint32",
      },
    ],
    name: "strategyValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "updateCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5061166b8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806389a78a031161008c578063cff8364011610066578063cff83640146102a7578063e5012fb4146102d7578063eec93dd014610307578063fff5cf1914610337576100ea565b806389a78a031461022b5780638a4914c21461025b578063a6515d811461028b576100ea565b806314b0af70116100c857806314b0af701461016b578063384c879d1461019b57806357182cae146101cb578063687c0e31146101fb576100ea565b8063023ef5a9146100ef57806303d049bb1461011f5780631245f2981461014f575b600080fd5b61010960048036038101906101049190611117565b610367565b6040516101169190611172565b60405180910390f35b6101396004803603810190610134919061118d565b610500565b6040516101469190611172565b60405180910390f35b6101696004803603810190610164919061118d565b610507565b005b61018560048036038101906101809190611117565b61060d565b6040516101929190611172565b60405180910390f35b6101b560048036038101906101b09190611218565b6108b2565b6040516101c29190611316565b60405180910390f35b6101e560048036038101906101e09190611218565b610993565b6040516101f29190611172565b60405180910390f35b61021560048036038101906102109190611338565b61099b565b6040516102229190611172565b60405180910390f35b61024560048036038101906102409190611218565b610a21565b60405161025291906113a7565b60405180910390f35b61027560048036038101906102709190611117565b610aa6565b6040516102829190611172565b60405180910390f35b6102a560048036038101906102a091906113e6565b610d4c565b005b6102c160048036038101906102bc9190611218565b610dbc565b6040516102ce9190611172565b60405180910390f35b6102f160048036038101906102ec9190611117565b610dd0565b6040516102fe9190611172565b60405180910390f35b610321600480360381019061031c9190611218565b610f68565b60405161032e9190611316565b60405180910390f35b610351600480360381019061034c9190611338565b611048565b60405161035e9190611172565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff16021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff1681526020019081526020016000208054905061047c919061145f565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055506001905092915050565b6000919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000208054905011806105d3575060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002080549050115b1561060a576040517f846e233f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002090506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690508363ffffffff16828263ffffffff16815481106106fe576106fd611493565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff161461073a576000925050506108ac565b60006001838054905061074d919061145f565b90508163ffffffff16811461086357600083828154811061077157610770611493565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555080848463ffffffff168154811061082e5761082d611493565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505b82805480610874576108736114c2565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055600193505050505b92915050565b6060600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561098657602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116109495790505b5050505050905092915050565b600092915050565b60008263ffffffff16600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff161490509392505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900460ff16610a9b576000610a9e565b60015b905092915050565b600080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002090506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690508363ffffffff16828263ffffffff1681548110610b9857610b97611493565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1614610bd457600092505050610d46565b600060018380549050610be7919061145f565b90508163ffffffff168114610cfd576000838281548110610c0b57610c0a611493565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff16021790555080848463ffffffff1681548110610cc857610cc7611493565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505b82805480610d0e57610d0d6114c2565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055600193505050505b92915050565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff1681526020019081526020016000208181610db59190611627565b9050505050565b6000610dc883836110ce565b905092915050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff1681526020019081526020016000208290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff16021790555060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002080549050610ee4919061145f565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055506001905092915050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561103b57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411610ffe5790505b5050505050905092915050565b60008263ffffffff16600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff161490509392505050565b600092915050565b600080fd5b600063ffffffff82169050919050565b6110f4816110db565b81146110ff57600080fd5b50565b600081359050611111816110eb565b92915050565b6000806040838503121561112e5761112d6110d6565b5b600061113c85828601611102565b925050602061114d85828601611102565b9150509250929050565b60008115159050919050565b61116c81611157565b82525050565b60006020820190506111876000830184611163565b92915050565b6000602082840312156111a3576111a26110d6565b5b60006111b184828501611102565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111e5826111ba565b9050919050565b6111f5816111da565b811461120057600080fd5b50565b600081359050611212816111ec565b92915050565b6000806040838503121561122f5761122e6110d6565b5b600061123d85828601611203565b925050602061124e85828601611102565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61128d816110db565b82525050565b600061129f8383611284565b60208301905092915050565b6000602082019050919050565b60006112c382611258565b6112cd8185611263565b93506112d883611274565b8060005b838110156113095781516112f08882611293565b97506112fb836112ab565b9250506001810190506112dc565b5085935050505092915050565b6000602082019050818103600083015261133081846112b8565b905092915050565b600080600060608486031215611351576113506110d6565b5b600061135f86828701611203565b935050602061137086828701611102565b925050604061138186828701611102565b9150509250925092565b600060ff82169050919050565b6113a18161138b565b82525050565b60006020820190506113bc6000830184611398565b92915050565b600080fd5b6000604082840312156113dd576113dc6113c2565b5b81905092915050565b600080606083850312156113fd576113fc6110d6565b5b600061140b85828601611102565b925050602061141c858286016113c7565b9150509250929050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061146a82611426565b915061147583611426565b925082820390508181111561148d5761148c611430565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6114fa81611157565b811461150557600080fd5b50565b60008135611515816114f1565b80915050919050565b60008160001b9050919050565b600060ff6115388461151e565b9350801983169250808416831791505092915050565b600061155982611157565b9050919050565b6000819050919050565b6115738261154e565b61158661157f82611560565b835461152b565b8255505050565b60008160081b9050919050565b600061ff006115a88461158d565b9350801983169250808416831791505092915050565b6115c78261154e565b6115da6115d382611560565b835461159a565b8255505050565b6000810160008301806115f381611508565b90506115ff818461156a565b50505060008101602083018061161481611508565b905061162081846115be565b5050505050565b61163182826115e1565b505056fea2646970667358221220572adf400b6e7a2a70b5c2c91a10636fddaabc322e64d4f55bf55267f8ee14ad64736f6c634300081c0033";

type MockConditionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockConditionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCondition__factory extends ContractFactory {
  constructor(...args: MockConditionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockCondition & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockCondition__factory {
    return super.connect(runner) as MockCondition__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockConditionInterface {
    return new Interface(_abi) as MockConditionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockCondition {
    return new Contract(address, _abi, runner) as unknown as MockCondition;
  }
}
