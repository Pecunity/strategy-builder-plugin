/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockCondition,
  MockConditionInterface,
} from "../../../../contracts/test/mocks/MockCondition";

const _abi = [
  {
    inputs: [],
    name: "ConditionAlreadyExist",
    type: "error",
  },
  {
    inputs: [],
    name: "ConditionAlreadyInUseOfAutomation",
    type: "error",
  },
  {
    inputs: [],
    name: "ConditionAlreadyInUseOfStrategy",
    type: "error",
  },
  {
    inputs: [],
    name: "ConditionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "ConditionIsInUse",
    type: "error",
  },
  {
    inputs: [],
    name: "ConditionNotInUseOfAutomation",
    type: "error",
  },
  {
    inputs: [],
    name: "ConditionNotInUseOfStrategy",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "automation",
        type: "uint32",
      },
    ],
    name: "AutomationAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "automation",
        type: "uint32",
      },
    ],
    name: "AutomationRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "ConditionDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "strategy",
        type: "uint32",
      },
    ],
    name: "StrategyAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "strategy",
        type: "uint32",
      },
    ],
    name: "StrategyRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "automation",
        type: "uint32",
      },
    ],
    name: "addAutomationToCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "result",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
        ],
        internalType: "struct MockCondition.Condition",
        name: "condition",
        type: "tuple",
      },
    ],
    name: "addCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "strategy",
        type: "uint32",
      },
    ],
    name: "addStrategyToCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "automations",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "checkCondition",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "automationId",
        type: "uint32",
      },
    ],
    name: "conditionInAutomation",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "strategyId",
        type: "uint32",
      },
    ],
    name: "conditionInStrategy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "deleteCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "isConditionActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "isUpdateable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "automation",
        type: "uint32",
      },
    ],
    name: "removeAutomationFromCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "strategy",
        type: "uint32",
      },
    ],
    name: "removeStrategyFromCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "strategies",
    outputs: [
      {
        internalType: "uint32[]",
        name: "",
        type: "uint32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "id",
        type: "uint32",
      },
    ],
    name: "updateCondition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506111908061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806357182cae11610097578063a6515d8111610066578063a6515d8114610243578063d8cd9c1b14610256578063e5012fb414610269578063eec93dd01461027c57600080fd5b806357182cae146101e25780638455c3d0146101f857806389a78a031461020b5780638a4914c21461023057600080fd5b80631245f298116100d35780631245f2981461015957806314b0af701461016e578063384c879d146101815780634fdcabb8146101a157600080fd5b806301ffc9a7146100fa578063023ef5a91461013357806303d049bb14610146575b600080fd5b61011e610108366004610f2a565b6001600160e01b03191663732d321f60e01b1490565b60405190151581526020015b60405180910390f35b61011e610141366004610f6d565b61028f565b61011e610154366004610fa0565b610408565b61016c610167366004610fa0565b610454565b005b61011e61017c366004610f6d565b610554565b61019461018f366004610fd2565b61078e565b60405161012a9190610fee565b61011e6101af366004610fd2565b6001600160a01b038216600090815260046020908152604080832063ffffffff8516845290915290205460ff1692915050565b61011e6101f0366004610fd2565b600092915050565b61011e610206366004611037565b610836565b61021e610219366004610fd2565b610937565b60405160ff909116815260200161012a565b61011e61023e366004610f6d565b610978565b61016c61025136600461107a565b610b9f565b61011e610264366004611037565b610bdb565b61011e610277366004610f6d565b610ca7565b61019461028a366004610fd2565b610e12565b33600090815260046020908152604080832063ffffffff86168452909152812054839060ff166102d257604051637c748e2960e01b815260040160405180910390fd5b828063ffffffff166000036102fa57604051637ae9080f60e11b815260040160405180910390fd5b610305338686610836565b156103235760405163433aca2960e01b815260040160405180910390fd5b33600090815260016020818152604080842063ffffffff8a8116808752918452918520805480860182558187529386206008850401805460079095166004026101000a80850219909516938b1694909402929092179092559252905461038991906110b9565b33600081815260036020908152604080832063ffffffff8b81168086529184528285208b821680875290855294839020805463ffffffff19169790911696909617909555519182527f64ed0b78fd4903b0c4a53da49298cec5f2ab5e723bbe6ba4602be84cc8c5fc6591015b60405180910390a3506001949350505050565b33600090815260046020908152604080832063ffffffff85168452909152812054829060ff1661044b57604051637c748e2960e01b815260040160405180910390fd5b50600092915050565b33600090815260046020908152604080832063ffffffff85168452909152902054819060ff1661049757604051637c748e2960e01b815260040160405180910390fd5b33600090815260016020908152604080832063ffffffff861684529091529020541515806104e257503360009081526020818152604080832063ffffffff8616845290915290205415155b1561050057604051637b28591360e01b815260040160405180910390fd5b33600081815260046020908152604080832063ffffffff87168085529252808320805460ff19169055519092917fb0f65a798e2cdda82f7d8ae7ab05d5c06b04d3f8470e4765ff56af507889d19c91a35050565b33600090815260046020908152604080832063ffffffff86168452909152812054839060ff1661059757604051637c748e2960e01b815260040160405180910390fd5b6105a2338585610bdb565b6105bf57604051630163c8ad60e71b815260040160405180910390fd5b3360008181526020818152604080832063ffffffff808a16808652918452828520958552600284528285209185529083528184208882168552909252822054835491169190610610906001906110b9565b90508163ffffffff1681146106d6576000838281548110610633576106336110da565b6000918252602080832060088304015433845260028252604080852063ffffffff8e8116875290845281862060079095166004026101000a9092048216808652939092529220805463ffffffff1916928616928317905585549092508291869181106106a1576106a16110da565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505b828054806106e6576106e66110f0565b6000828152602080822060086000199490940193840401805463ffffffff600460078716026101000a81021990911690915592909355338082526002845260408083208c8516808552908652818420948c1680855294865292819020805463ffffffff1916905551928352909290917fc29fe8f04eaa995e540803e6abbd839f149e3b6b8dc9d66f7b411e6ad92f1ebf91015b60405180910390a35060019695505050505050565b6001600160a01b038216600090815260016020908152604080832063ffffffff8516845282529182902080548351818402810184019094528084526060939283018282801561082857602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116107eb5790505b505050505090505b92915050565b6001600160a01b038316600081815260036020908152604080832063ffffffff80881680865291845282852087821686528452828520549585526001845282852091855292528220549192169015806108b857506001600160a01b038516600090815260016020908152604080832063ffffffff881684529091529020548110155b156108c7576000915050610930565b6001600160a01b038516600090815260016020908152604080832063ffffffff8881168552925290912080549185169183908110610907576109076110da565b6000918252602090912060088204015460079091166004026101000a900463ffffffff16149150505b9392505050565b6001600160a01b038216600090815260056020908152604080832063ffffffff8516845290915281205460ff1661096f576000610930565b60019392505050565b33600090815260046020908152604080832063ffffffff86168452909152812054839060ff166109bb57604051637c748e2960e01b815260040160405180910390fd5b6109c6338585610836565b6109e25760405162ede60b60e71b815260040160405180910390fd5b33600081815260016020818152604080842063ffffffff808b16808752918452828620968652600384528286209186529083528185208982168652909252832054845491169291610a32916110b9565b90508163ffffffff168114610af8576000838281548110610a5557610a556110da565b6000918252602080832060088304015433845260038252604080852063ffffffff8e8116875290845281862060079095166004026101000a9092048216808652939092529220805463ffffffff191692861692831790558554909250829186918110610ac357610ac36110da565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550505b82805480610b0857610b086110f0565b6000828152602080822060086000199490940193840401805463ffffffff600460078716026101000a81021990911690915592909355338082526003845260408083208c8516808552908652818420948c1680855294865292819020805463ffffffff1916905551928352909290917f2be6cc3208d4434b357c0fdd8ae07d6e1f69605413b29b13d68bbd943a225dea9101610779565b33600090815260056020908152604080832063ffffffff8616845290915290208190610bcb8282611118565b905050610bd782610e8f565b5050565b6001600160a01b038316600081815260026020908152604080832063ffffffff80881680865291845282852087821686528452828520549585528484528285209185529252822054919216901580610c5a57506001600160a01b03851660009081526020818152604080832063ffffffff881684529091529020548110155b15610c69576000915050610930565b6001600160a01b03851660009081526020818152604080832063ffffffff8881168552925290912080549185169183908110610907576109076110da565b33600090815260046020908152604080832063ffffffff86168452909152812054839060ff16610cea57604051637c748e2960e01b815260040160405180910390fd5b828063ffffffff16600003610d1257604051637ae9080f60e11b815260040160405180910390fd5b610d1d338686610bdb565b15610d3b57604051630662978b60e51b815260040160405180910390fd5b3360009081526020818152604080832063ffffffff8981168086529184529184208054600180820183558287529486206008820401805460079092166004026101000a80860219909216948b1691909102939093179092559092529054610da291906110b9565b33600081815260026020908152604080832063ffffffff8b81168086529184528285208b821680875290855294839020805463ffffffff19169790911696909617909555519182527fe4fed7933c124d57c605c2c0c04bf0518034d885e739653e3cc6667526d65d1691016103f5565b6001600160a01b03821660009081526020818152604080832063ffffffff85168452825291829020805483518184028101840190945280845260609392830182828015610828576000918252602091829020805463ffffffff1684529082028301929091600491018084116107eb57509498975050505050505050565b33600090815260046020908152604080832063ffffffff85168452909152902054819060ff1615610ed3576040516303d0619f60e61b815260040160405180910390fd5b818063ffffffff16600003610efb57604051637ae9080f60e11b815260040160405180910390fd5b505033600090815260046020908152604080832063ffffffff909416835292905220805460ff19166001179055565b600060208284031215610f3c57600080fd5b81356001600160e01b03198116811461093057600080fd5b803563ffffffff81168114610f6857600080fd5b919050565b60008060408385031215610f8057600080fd5b610f8983610f54565b9150610f9760208401610f54565b90509250929050565b600060208284031215610fb257600080fd5b61093082610f54565b80356001600160a01b0381168114610f6857600080fd5b60008060408385031215610fe557600080fd5b610f8983610fbb565b602080825282518282018190526000918401906040840190835b8181101561102c57835163ffffffff16835260209384019390920191600101611008565b509095945050505050565b60008060006060848603121561104c57600080fd5b61105584610fbb565b925061106360208501610f54565b915061107160408501610f54565b90509250925092565b600080828403606081121561108e57600080fd5b61109784610f54565b92506040601f19820112156110ab57600080fd5b506020830190509250929050565b8181038181111561083057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008135801515811461083057600080fd5b61112182611106565b1515815460ff821691508160ff19821617835561ff0061114360208601611106565b151560081b168261ffff198316171783555050505056fea26469706673582212201df68bbe8b2f66f36381ab10a8d7f9133ad43533d0c726a6f05c169ba9d7690d64736f6c634300081c0033";

type MockConditionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockConditionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCondition__factory extends ContractFactory {
  constructor(...args: MockConditionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockCondition & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockCondition__factory {
    return super.connect(runner) as MockCondition__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockConditionInterface {
    return new Interface(_abi) as MockConditionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockCondition {
    return new Contract(address, _abi, runner) as unknown as MockCondition;
  }
}
