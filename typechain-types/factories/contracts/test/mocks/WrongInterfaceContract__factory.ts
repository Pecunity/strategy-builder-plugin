/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  WrongInterfaceContract,
  WrongInterfaceContractInterface,
} from "../../../../contracts/test/mocks/WrongInterfaceContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060c780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b604e60383660046062565b6001600160e01b0319166336372b0760e01b1490565b604051901515815260200160405180910390f35b600060208284031215607357600080fd5b81356001600160e01b031981168114608a57600080fd5b939250505056fea26469706673582212202cba03a9d3d00b316864fe756455c212aa4f1e0e478f1b015bfa9da2001e2cb364736f6c634300081c0033";

type WrongInterfaceContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WrongInterfaceContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WrongInterfaceContract__factory extends ContractFactory {
  constructor(...args: WrongInterfaceContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      WrongInterfaceContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): WrongInterfaceContract__factory {
    return super.connect(runner) as WrongInterfaceContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WrongInterfaceContractInterface {
    return new Interface(_abi) as WrongInterfaceContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): WrongInterfaceContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as WrongInterfaceContract;
  }
}
