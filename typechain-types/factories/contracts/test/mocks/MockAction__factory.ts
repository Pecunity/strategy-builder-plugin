/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockAction,
  MockActionInterface,
} from "../../../../contracts/test/mocks/MockAction";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IAction.PluginExecution[]",
        name: "",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "callResult",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "identifier",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506104958061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806301ffc9a7146100465780633a61363a1461007f5780637998a1c4146100a0575b600080fd5b61006a610054366004610212565b6001600160e01b031916631e66287160e21b1490565b60405190151581526020015b60405180910390f35b61009261008d366004610275565b6100b2565b6040516100769291906103a7565b604051600160e01b8152602001610076565b6060806000855167ffffffffffffffff8111156100d1576100d1610243565b60405190808252806020026020018201604052801561011e57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816100ef5790505b50905060005b86518110156101e1576040518060600160405280876001600160a01b031681526020016000815260200188838151811061016057610160610449565b60200260200101518760405160240161018e9291906001600160a01b03929092168252602082015260400190565b60408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052905282518390839081106101ce576101ce610449565b6020908102919091010152600101610124565b5080846040516020016101f691815260200190565b6040516020818303038152906040529250925050935093915050565b60006020828403121561022457600080fd5b81356001600160e01b03198116811461023c57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461027057600080fd5b919050565b60008060006060848603121561028a57600080fd5b833567ffffffffffffffff8111156102a157600080fd5b8401601f810186136102b257600080fd5b803567ffffffffffffffff8111156102cc576102cc610243565b8060051b604051601f19603f830116810181811067ffffffffffffffff821117156102f9576102f9610243565b60405291825260208184018101929081018984111561031757600080fd5b6020850194505b8385101561033d5761032f85610259565b81526020948501940161031e565b5095506103509250505060208501610259565b929592945050506040919091013590565b6000815180845260005b818110156103875760208185018101518683018201520161036b565b506000602082860101526020601f19601f83011685010191505092915050565b6000604082016040835280855180835260608501915060608160051b86010192506020870160005b8281101561042a57868503605f19018452815180516001600160a01b031686526020808201519087015260409081015160609187018290529061041490870182610361565b95505060209384019391909101906001016103cf565b5050505082810360208401526104408185610361565b95945050505050565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203beeb7e80f6a0aa3ee5ba805b58d4d5862ff139834d1194cb7d07e7a77c2669a64736f6c634300081c0033";

type MockActionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockActionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAction__factory extends ContractFactory {
  constructor(...args: MockActionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockAction & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAction__factory {
    return super.connect(runner) as MockAction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockActionInterface {
    return new Interface(_abi) as MockActionInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockAction {
    return new Contract(address, _abi, runner) as unknown as MockAction;
  }
}
